{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work-25\\知识库系统\\admin\\src\\views\\km\\search\\DocSearch.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\views\\km\\search\\DocSearch.vue","mtime":1740914398544},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n  import {ajaxGetDictItems, getDictItemsFromCache} from '@/api/api'\n  import {ACCESS_TOKEN} from \"@/store/mutation-types\"\n  import {httpPostAction, getAction, downloadFileName, getActionPDF,getKeyword,abstractKmDoc} from \"../../../api/manage\";\n  import {AJeecgListMixin} from '@/mixins/AJeecgListMixin'\n  import Vue from \"vue\";\n  import IframePageContent from \"../../../components/layouts/IframeFReportView\";\n  import SearchHeader from '../Common/SearchHeader'\n\n  export default {\n    name: \"docSearch\",\n    mixins: [AJeecgListMixin],\n    components: {IframePageContent,SearchHeader},\n    data() {\n      return {\r\n\t\t  suggestions:[],\n        pageTitle:\"检索结果\",\n        boolCheckChange: true,\n        knowledgeTitle: \"知识专题\",\n        checkedArray: [],\n        topicCodesTree: {\n          checked: [],\n          halfChecked: [],\n        },\n        topicCodes:\"\",\n        // businessTypes:\"1\",\n        boolSelect: false,\n        treeData: [],\n        confirmLoading: false,\n        PDFurl: '',\n        visible: false,\n        pdfLoading: false,\n        pdfShow: true,\n        isorter: {\n          column: '_score',\n          order: 'desc',\n        },\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n        checkboxVuale: [],\n        title: \"预览\",\n        width: 900,\n        // hotTopicReportList: [],\n        defaultBusinessTypeList: [],\n        docDataSource: [],\n        loadedRatio: 0,\n        isSearchResult: false,\n        filterOptions:[],\n        //要filter的字段\n        filterDictCode: 'km_dict_source',\n        //表头\n        columns: [],\n        //列设置\n        settingColumns: [],\n        //列定义\n        defColumns: [\n          {\n            title: '#',\n            dataIndex: '',\n            key: 'rowIndex',\n            width: 60,\n            align: \"center\",\n            scopedSlots: {customRender: 'indexNum'}\n          },\n          {\n            title: '标题',\n            align: \"left\",\n            dataIndex: 'title',\n            scopedSlots: {customRender: 'docTitle'}\n          },\n          {\n            title: '文档来源',\n            align: \"left\",\n            dataIndex: 'category_dictText',\n            width: 180,\n            filters: [],\n            customCell: () => {\n              return {\n                style: {\n                  'max-width': '6em',\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis'\n                },\n              };\n            },\n          },\n          {\n            title: '标签',\n            align: \"left\",\n            dataIndex: 'businessType_dictText',\n            customCell: () => {\n              return {\n                style: {\n                  'max-width': '6em',\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow:'ellipsis'\n                },\n              };\n            },\n          },\n          {\n            title: '操作',\n            dataIndex: 'action',\n            align: \"center\",\n            fixed: \"right\",\n            width: 180,\n            scopedSlots: {\n              filterDropdown: 'filterDropdown',\n              filterIcon: 'filterIcon',\n              customRender: 'action'\n            }\n          },\n        ],\n        options: [],\n        content: '',\n        checkedValues: '',\n        itemList: [],\n        // 要加载多选的字典\n        dictCode: 'km_dict_category',\n\n        url: {\n          rootList: \"/sys/category/loadTreeRoot\",\n          list: '/KM/kmDoc/searchDoc',\n          hotTopicReport: '/KM/kmSearchRecord/hotTopicReport',\n          defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n          previewKmDoc: '/KM/kmDoc/previewKmDoc',\n          downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n          addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n          delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\r\n\t\t  selectKeyword: '/KM/kmSearchRecord/selectKeyword',\r\n\t\t  abstractKmDoc: '/KM/kmDoc/abstractKmDoc',\n        },\r\n\t\tvisible1: false, // 控制模态框显示\r\n\t\tbuttonLoading: false, // 按钮加载状态\r\n\t\tloading1: true, // 模态框加载状态\r\n\t\tfullText: \"\", // 后端返回的完整文章摘要\r\n\t\tdisplayedText: \"\", // 逐字显示的内容\r\n\t\ttypingSpeed: 50, // 打字速度（毫秒）\r\n\t\tisGenerating: false, // 是否正在生成中\n      }\n    },\r\n\tcomputed: {\r\n\t  // 动态模态框标题\r\n\t  modalTitle() {\r\n\t    return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\r\n\t  },\r\n\t},\n    created() {\n      this.loadTree();\n      // 调用初始化自定义table列表函数\n      this.initColumns();\n      this.initFilterDict();\n\n      //设置全局token\n      Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n      window._CONFIG['token'] = Vue.prototype.token;\n      // this.hotTopicReportFun();\n      this.initDict();\n      let params = this.$route.params;\n      console.log(\"params：\", params);\n      this.topicCodes=params.topicCodes;\n      this.businessTypes=params.businessTypes;\n\n      // if(this.businessTypes)\n      //   this.loadDefaultBusinessTypeFunc()\n\n      if(this.topicCodes==null){\n        if (Object.keys(params).length > 0) {\n          this.boolCheckChange = params.boolCheckChange;\n          this.content = params.content;\n          let replaceTitle=this.content;\n          if(replaceTitle)\n            replaceTitle = replaceTitle.replace(/，/g, ',');\n          // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n          // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n          if(this.boolCheckChange){\n            params[\"content\"] = replaceTitle;\n          }else{\n            delete params[\"content\"];\n            delete params[\"boolCheckChange\"];\n          }\n          params[\"title\"] = replaceTitle;\n          params[\"keywords\"] = replaceTitle;\n          params[\"advSearchFlag\"] = 0;\n\n          if (params.category !== \"\" && params.category != null) {\n            this.checkboxVuale = params.category.split(\",\");\n            this.checkedValues = params.category\n          }\n          this.searchFun(params);\n        }\n      }else{\n        this.topicCodesTree=params.topicCodesTree;\n        this.knowledgeTitle=params.knowledgeTitle;\n        let param={};\n        param[\"topicCodes\"]=this.topicCodes;\n        this.searchFun(param);\n      }\n    },\n\n    watch: {\n      loadedRatio: {\n        handler(newVal, oldVal) {\n          console.log(newVal)\n          if (newVal === 1) {\n            this.pdfLoading = false;\n          }\n        }\n      }\n    },\n    methods: {\n      // 加载filter字段选项\n      initFilterDict() {\n        //优先从缓存中读取字典配置\n        // if (getDictItemsFromCache(this.dictCode)) {\n        let options = getDictItemsFromCache(this.filterDictCode)\n        if(options){\n          options.forEach((item, index) => {\n            let filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            this.filterOptions.push(filterOption);\n          });\n          console.log(this.filterOptions);\n          this.defColumns[2].filters =this.filterOptions;\n          return\n        }\r\n\t\t\r\n\t\t\r\n\t\t\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.filterDictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            console.log(options);\n            options.forEach((item, index) => {\n              let filterOption = {};\n              filterOption.text = item.title;\n              filterOption.value = item.value;\n              this.filterOptions.push(filterOption);\n            });\n            this.defColumns[2].filters =this.filterOptions;\n          }\n        })\n\n      },\r\n\t  \r\n\t  \r\n\t  // 显示模态框\r\n\t  showModal(record) {\r\n\t    this.visible1 = true;\r\n\t    this.buttonLoading = true;\r\n\t    this.isGenerating = true; // 显示“生成中”提示\r\n\t    this.abstractKmDoc(record)\r\n\t  \t\r\n\t  },\r\n\t  \t\r\n\t  abstractKmDoc(record){\r\n\t  \tlet params = {\r\n\t  \t  docId: record.id,\r\n\t  \t};\r\n\t  \tabstractKmDoc(this.url.abstractKmDoc, params).then(res => {\r\n\t  \t  if (res.success) {\r\n\t  \t\tthis.fullText = res.result\r\n\t  \t\tthis.buttonLoading = false;\r\n\t  \t\tthis.loading1 = false;\r\n\t  \t\tthis.isGenerating = false; // 关闭“生成中”提示\r\n\t  \t\t\t\r\n\t  \t\t// 开始逐字显示\r\n\t  \t\tthis.typeText();\r\n\t  \t\t\r\n\t  \t  } else {\r\n\t  \t    this.$message.warning(res.message)\r\n\t  \t  }\r\n\t  \t}).finally(() => {\r\n\t  \t})\r\n\t  \t\r\n\t  },\r\n\t  \t\r\n\t  // 模拟调用后端接口\r\n\t  \r\n\t  \t\r\n\t  // 逐字显示内容\r\n\t  typeText() {\r\n\t    let index = 0;\r\n\t    const timer = setInterval(() => {\r\n\t      if (index < this.fullText.length) {\r\n\t        this.displayedText += this.fullText.charAt(index);\r\n\t        index++;\r\n\t      } else {\r\n\t        clearInterval(timer); // 停止定时器\r\n\t      }\r\n\t    }, this.typingSpeed);\r\n\t  },\r\n\t  \t\r\n\t  // 关闭模态框\r\n\t  handleCancel1() {\r\n\t    this.visible1 = false;\r\n\t    this.displayedText = \"\"; // 清空内容\r\n\t    this.loading1 = true; // 重置加载状态\r\n\t    this.isGenerating = false; // 关闭“生成中”提示\r\n\t  },\r\n\t  \r\n\t  onInput() {\r\n\t  \t  console.log(\"=============\")\r\n\t        if (this.content) {\r\n\t          this.fetchSuggestions(this.content);\r\n\t        } else {\r\n\t          this.suggestions = [];\r\n\t        }\r\n\t      },\r\n\t  fetchSuggestions(keyword) {\r\n\t  \t\r\n\t  \tconsole.log(\"2222\")\r\n\t  \t\r\n\t        // 调用后端API获取推荐术语\r\n\t  \t\tgetKeyword(this.url.selectKeyword+'?'+'keyword='+keyword, keyword).then(res => {\r\n\t  \t\t  if (res.success) {\r\n\t  \t\t\tif (res.result && res.result.length > 0) {\r\n\t  \t\t\t\tlet a = []\r\n\t  \t\t\t\tfor (var index = 0; index < res.result.length; index++) {\r\n\t  \t\t\t\t\ta.push(res.result[index].corword)\r\n\t  \t\t\t\t}\r\n\t  \t\t\t\t\r\n\t  \t\t\t  this.suggestions = a\r\n\t  \t\t\t} else {\r\n\t  \t\t\t  this.suggestions = []\r\n\t  \t\t\t}\r\n\t  \t\t  } else {\r\n\t  \t\t\tthis.$message.warning(res.message)\r\n\t  \t\t  }\r\n\t  \t\t}).finally(() => {\r\n\t  \t\t})\r\n\t      },\r\n\t      selectSuggestion(suggestion) {\r\n\t        this.content = suggestion;\r\n\t        this.suggestions = [];\r\n\t        // 这里可以触发搜索操作\r\n\t      },\r\n\t  \n\n      // 是否全文检索\n      onCheckChange(e) {\n        this.boolCheckChange = e.target.checked\n        console.log(`checked = ${e.target.checked}`);\n      },\n\n      // 加载树节点，获取树数据\n      loadTree() {\n        let params = {\n          async: false,\n          pcode: \"\"\n        };\n        getAction(this.url.rootList, params).then(res => {\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              this.treeData = res.result\n            } else {\n              this.treeData = []\n            }\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n        })\n      },\n\n      // 查找一个节点的所有父节点\n      familyTree(treeData, id) {\n        var arrTree = [];\n        var forFn = function (arr, key) {\n          for (var i = 0; i < arr.length; i++) {\n            var item = arr[i]\n            if (item.key === key) {\n              if (item.parentId === \"0\") {\n                break;\n              } else {\n                console.log(\"父节点\", item.parentId);\n                arrTree.push(item.parentId);\n                forFn(treeData, item.parentId);\n              }\n              break\n            } else {\n              if (item.children != null) {\n                forFn(item.children, key);\n              }\n            }\n          }\n        }\n        forFn(treeData, id);\n        return arrTree\n      },\n\n      // 树节点选择触发\n      onCheck(checkedKeys, checkedNodes) {\n        if (checkedKeys.checked.length > 1) {\n          let checkKeys = checkedKeys.checked[1];\n          checkedKeys.checked = [];\n          checkedKeys.checked.push(checkKeys);\n          let checkNodesTitle = checkedNodes.checkedNodes[1];\n          checkedNodes.checkedNodes = [];\n          checkedNodes.checkedNodes.push(checkNodesTitle);\n        }\n        console.log(\"checkedKeys\", checkedKeys);\n        console.log(\"checkedNodes\", checkedNodes);\n        let temp = new Array();\n        let tempArray = new Array();\n        this.checkedArray = checkedKeys.checked;\n\n        for (let i = 0; i < this.checkedArray.length; i++) {\n          let arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n          temp = temp.concat(arrTemp);\n        }\n        // 数组去重\n        tempArray = [...new Set(temp)];\n        console.log(\"tempArray\", tempArray);\n        checkedKeys.halfChecked = tempArray;\n        let checkedTitle = checkedNodes.checkedNodes;\n        this.knowledgeTitle = \"\";\n        for (let i = 0; i < checkedTitle.length; i++) {\n          if (this.knowledgeTitle === \"\") {\n            this.knowledgeTitle = checkedTitle[i].data.props.title;\n          } else {\n            if (checkedTitle[i].data.props.data != null) {\n              this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[i].data.props.title;\n            }\n          }\n        }\n        if (this.knowledgeTitle === \"\") {\n          this.knowledgeTitle = \"知识专题\"\n          this.topicCodes = null;\n        }\n        let param = this.getQueryParams();//查询条件互相影响\n        // let param={};\n        this.topicCodes=checkedTitle[0].data.props.code;\n        param[\"topicCodes\"]=this.topicCodes;\n        this.searchFun(param);\n        // this.businessTypes=null;\n\n      },\n      // 自定义列表  列设置更改事件\n      onColSettingsChange(checkedValues) {\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000)\n        this.settingColumns = checkedValues;\n        const cols = this.defColumns.filter(item => {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true\n          }\n          if (this.settingColumns.includes(item.dataIndex)) {\n            return true\n          }\n          return false\n        })\n        this.columns = cols;\n      },\n      // 自定义列表  初始化\n      initColumns() {\n        //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n        //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        let colSettings = Vue.ls.get(key);\n        if (colSettings == null || colSettings == undefined) {\n          let allSettingColumns = [];\n          this.defColumns.forEach(function (item, i, array) {\n            allSettingColumns.push(item.dataIndex);\n          })\n          this.settingColumns = allSettingColumns;\n          this.columns = this.defColumns;\n        } else {\n          this.settingColumns = colSettings;\n          const cols = this.defColumns.filter(item => {\n            if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n              return true;\n            }\n            if (colSettings.includes(item.dataIndex)) {\n              return true;\n            }\n            return false;\n          })\n          this.columns = cols;\n        }\n      },\n\n      searchFun(params) {\n        getAction(this.url.list, params).then((res) => {\n          if (res.success) {\n            this.dataSource = res.result.kmSearchResultVOPage.records;\n            this.itemList = res.result.paramPath;\n            if (res.result.kmSearchResultVOPage.total) {\n              this.ipagination.total = res.result.kmSearchResultVOPage.total;\n            } else {\n              this.ipagination.total = 0;\n            }\n          } else {\n            this.$message.error(\"检索失败\");\n          }\n        })\n      },\n\n      loadData() {\n        this.searchDocFun('2');\n      },\n\n      // 加载 分类数据\n      initDict() {\n        this.options = [];\n\n        //优先从缓存中读取字典配置\n        if (getDictItemsFromCache(this.dictCode)) {\n          let options = getDictItemsFromCache(this.dictCode)\n          options.forEach((item, index) => {\n            let person = {};\n            person.label = item.title;\n            person.value = item.value;\n            this.options.push(person);\n          });\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            options.forEach((item, index) => {\n              let person = {};\n              person.label = item.title;\n              person.value = item.value;\n              this.options.push(person);\n            });\n          }\n        })\n\n\n      },\n\n      // 多选框选择触发\n      onChange(checkedValues) {\n        this.checkedValues = checkedValues.toString();\n        console.log('checked = ', checkedValues);\n      },\n      // 按回车键触发方法\n      pressEnterFun(e) {\n        this.$nextTick(() => {\n          this.searchDocFun('0');\n        })\n      },\n      // 检索\n      searchDocFun(type) {\n        // this.businessTypes=null;\n\n        let params = {};\n        params = this.getQueryParams();//查询条件\n        if (type === '0') {\n          this.isSearchResult = false;\n          this.ipagination.current = 1;\n          //启用用过滤\n          this.defColumns[2].filters =this.filterOptions;\n        } else if (type === '1') {\n          this.isSearchResult = true;\n          this.ipagination.current = 1;\n          //禁用过滤\n          this.defColumns[2].filters = [];\n        }\n\n        this.loading = true;\n\n        if (this.content !== \"\" && this.content != null) {\n          let replaceTitle=this.content\n          if(replaceTitle)\n            replaceTitle = replaceTitle.replace(/，/g, ',');\n          // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n          // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n          if(this.boolCheckChange){\n            params[\"content\"] = replaceTitle;\n          }else{\n            delete params[\"content\"];\n          }\n          params[\"title\"] = replaceTitle;\n          params[\"keywords\"] = replaceTitle;\n        }\n        params[\"advSearchFlag\"] = 0;\n        if (this.checkedValues !== \"\" && this.checkedValues != null) {\n          params['category'] = this.checkedValues;\n        }\n        if( this.topicCodes!=null){\n          params['topicCodes']=this.topicCodes;\n        }\n        if(this.businessTypes!=null){\n          params['businessTypes']=this.businessTypes;\n        }\n\n        // 判断参数是否为空\n        if (this.empty(params)) {\n          if (this.isSearchResult) {\n            params.withinSearchFlag = '1';\n          }\n          params.field = this.getQueryField();\n          params.pageNo = this.ipagination.current;\n          params.pageSize = this.ipagination.pageSize;\n          this.loading = true;\n          getAction(this.url.list, params).then((res) => {\n            if (res.success) {\n              this.dataSource = res.result.kmSearchResultVOPage.records;\n              this.itemList = res.result.paramPath;\n              if (res.result.kmSearchResultVOPage.total) {\n                this.ipagination.total = res.result.kmSearchResultVOPage.total;\n              } else {\n                this.ipagination.total = 0;\n              }\n            } else {\n              this.$message.error(\"检索失败\");\n            }\n            this.loading = false;\n          })\n        } else {\n          this.loading = false;\n          this.$message.info(\"请输入搜索条件\");\n        }\n      },\n\n      loadDefaultBusinessTypeFunc(){\n        getAction(this.url.defaultBusinessTypeList).then(res => {\n          if (res.success) {\n            this.defaultBusinessTypeList = res.result;\n          } else {\n            this.$message.error(\"业务加载失败\");\n          }\n        })\n      },\n\n      //  判断对象是否为空\n      empty(obj) {\n        for (let key in obj) {\n          return true;\n        }\n        return false;\n      },\n\n      //批量下载\n      downloadKmDocBatch() {\n        console.log(\"批量下载\")\n        if (!this.url.downloadKmDoc) {\n          this.$message.error(\"请设置url.downloadKmDoc属性!\")\n          return\n        }\n        if (this.selectionRows.length <= 0) {\n          this.$message.warning('请选择一条记录！');\n          return;\n        } else {\n          var that = this;\n          this.$confirm({\n            title: \"确认下载\",\n            content: \"是否下载选中数据?\",\n            onOk: function () {\n              for (var i = 0; i < that.selectionRows.length; i++) {\n                let fileName = i;\n                downloadFileName(that.url.downloadKmDoc, {docId: that.selectionRows[i].id})\n              }\n              that.onClearSelected();\n            }\n          });\n        }\n      },\n      //加收藏夹\n      addFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.addFavouriteKmDoc;\n        method = 'post';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"收藏成功!\");\n            //this.loadData();\n            record.favourite = 1;\n          } else {\n            this.$message.warning(\"收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n      //取消收藏夹\n      delFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.delFavouriteKmDoc;\n        method = 'delete';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"取消收藏成功!\");\n            // this.loadData();\n            record.favourite = 0;\n          } else {\n            this.$message.warning(\"取消收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n\n      // 显示预览窗口，初始化\n      previewKmDoc(record) {\n        // this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.PDFurl =  this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.visible = true;\n        this.pdfLoading = true;\n        this.pdfShow = true;\n      },\n      //关闭预览窗口\n      handleCancel() {\n        this.visible = false;\n      },\n\n      //下载文件\n      downloadKmDoc(record) {\n        this.$notification.success({\n          message: '文件开始下载...',\n          duration: 1,\n        });\n        downloadFileName(this.url.downloadKmDoc, {docId: record.id})\n      },\n\n      // 返回\n      backHomepage() {\n        this.$router.push('/defaultDocSearch');\n      },\n      // 跳转到收藏夹\n      jumpKmDocFavouritePage(){\n        this.$router.push('/km/filemanagement/KmDocFavouriteList');\n      },\n      // 跳转到个人草稿文件夹\n      jumpDraftsPage(){\n        this.$router.push('/km/filemanagement/DraftsList');\n      },\n      historyBack(){\n        history.back()\n      },\n      // 点击个人登录，跳转页面\n      login() {\n        this.$router.push('/dashboard/analysis');\n      },\n\n    }\n  }\n",{"version":3,"sources":["DocSearch.vue"],"names":[],"mappings":";AAiMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"DocSearch.vue","sourceRoot":"src/views/km/search","sourcesContent":["<template>\n  <a-layout class=\"layout\">\n\n    <a-layout-header  class=\"searchHeader\" style=\" background-color: #1a53ba;width: 100%; height: 60px\" >\n\n      <SearchHeader :title='pageTitle'/>\n\n    </a-layout-header>\n    <a-layout-content :style=\"{ background: '#fff',  minHeight: '680px' }\">\n\n      <div :bordered=\"false\" :style=\"{backgroundColor: '#f2f2f2',height: '100%'}\">\n        <!--<SearchHeader/>-->\n        <div  :style=\"{backgroundColor: '#1a53ba',padding: '10px',minWidth: '900px',height: '150px'}\">\n      <!-- 查询区域 -->\n      <div class=\"table-page-search-wrapper\">\n        <a-form layout=\"inline\">\n          <a-row>\n            <a-col :span=\"24\" style=\"text-align: center;\">\n              <div style=\"display:inline-block\">\n                <div style=\"float: left\">\n   <a-input style=\"width: 800px;\" size=\"large\" placeholder=\"标题、关键字、全文\" v-model=\"content\"\r\n            @pressEnter=\"pressEnterFun\" @input=\"onInput\">\n\n                    <a-icon slot=\"suffix\" @click=\"searchDocFun('0')\" type=\"search\" style=\"color:#1890FF;fontSize:22px\"/>\n                  </a-input>\r\n\t\t\t\t  <ul v-if=\"suggestions.length\" class=\"suggestions-list\">\r\n\t\t\t\t  \t  <li\r\n\t\t\t\t  \t\tv-for=\"(suggestion, index) in suggestions\"\r\n\t\t\t\t  \t\t:key=\"index\"\r\n\t\t\t\t  \t\t@click=\"selectSuggestion(suggestion)\"\r\n\t\t\t\t  \t\tclass=\"suggestion-item\"\r\n\t\t\t\t  \t  >\r\n\t\t\t\t  \t\t{{ suggestion }}\r\n\t\t\t\t  \t  </li>\r\n\t\t\t\t  \t</ul>\n                  <div class=\"checkbox\" style=\"width: 750px;text-align: center;margin-top: 10px;margin-left: 20px\">\n                    <a-checkbox-group :options=\"options\" v-model=\"checkboxVuale\" @change=\"onChange\"/>\n                  </div>\n                </div>\n                <div style=\"float: left;width: 100px;text-align: left;margin-top: -2px\">\n                  <span style=\"color: white;margin-left: 20px\">\n                   <span>全文检索</span>\n                   <a-checkbox class=\"checkbox\" v-model=\"boolCheckChange\" style=\"margin-left: 8px\"\n                               @change=\"onCheckChange\"/>\n                  </span>\n                </div>\n              </div>\n            </a-col>\n          </a-row>\n        </a-form>\n      </div>\n      <!-- 查询区域-END -->\n    </div>\n    <!-- 表格区域 -->\n    <div style=\"background-color:white;margin: 15px;padding: 15px\">\n      <!-- 操作按钮区域 -->\n      <div class=\"table-operator\">\n        <!--      <a-button type=\"primary\" icon=\"download\" @click=\"handleExportXls('草稿文件夹')\">导出</a-button>-->\n        <a-dropdown v-has=\"'searchList:batchDownload'\" v-if=\"selectedRowKeys.length > 0\">\n          <a-menu slot=\"overlay\">\n            <a-menu-item key=\"1\" @click=\"downloadKmDocBatch\">\n              <a-icon type=\"vertical-align-bottom\"/>\n              批量下载\n            </a-menu-item>\n          </a-menu>\n          <a-button style=\"margin-left: 8px\"> 批量操作\n            <a-icon type=\"down\"/>\n          </a-button>\n        </a-dropdown>\n      </div>\n\n      <!-- table区域-begin -->\n      <div>\n        <div  class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 15px;color: #303133;\">\n          <span v-for=\"(item,index) in itemList\" :key=\"index\">\n            <span><b v-if=\"index==0\">检索范围: </b><span v-if=\"index==itemList.length-1\">{{item}}</span> <span v-else>{{item}}<span\n              style=\"font-weight: bold;color: red\">-></span>  </span></span>\n          </span>\n        </div>\n\n        <!--<div v-else class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 15px;color: #303133;\">-->\n          <!--<span v-for=\"(item,index) in defaultBusinessTypeList\" :xl=\"4\" :lg=\"4\" :md=\"4\" :sm=\"4\" :key=\"index\">-->\n            <!--<span style=\"text-align: left;margin-left: 10px\">-->\n              <!--<span @click=\"searchBusinessType(item.value)\">-->\n                <!--<a v-if=\"item.value === businessTypes\" style=\"color: #303133;font-weight: bold\">{{item.text}}</a>-->\n                <!--<a v-else style=\"color: #303133\">{{item.text}}</a></span>-->\n            <!--</span>-->\n          <!--</span>-->\n        <!--</div>-->\n\n        <a-table\n          ref=\"table\"\n          size=\"middle\"\n          rowKey=\"id\"\n          :columns=\"columns\"\n          :dataSource=\"dataSource\"\n          :pagination=\"ipagination\"\n          :loading=\"loading\"\n          :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange}\"\n          @change=\"handleTableChange\">\n\n\n          // 添加自定义列表插槽\n          <div slot=\"filterDropdown\">\n            <a-card style=\"width: 350px\">\n              <a-checkbox-group @change=\"onColSettingsChange\" v-model=\"settingColumns\" :defaultValue=\"settingColumns\">\n                <a-row>\n                  <template v-for=\"(item,index) in defColumns\">\n                    <template v-if=\"item.key!='rowIndex'&& item.dataIndex!='action'\">\n                      <a-col :span=\"12\">\n                        <a-checkbox :value=\"item.dataIndex\">{{ item.title }}</a-checkbox>\n                      </a-col>\n                    </template>\n                  </template>\n                </a-row>\n              </a-checkbox-group>\n            </a-card>\n          </div>\n          <a-icon slot=\"filterIcon\" type='setting' title=\"自定义列\"\n                  :style=\"{ fontSize:'18px',color:  '#108ee9',minWidth:'35px'}\"/>\n\n          <span slot=\"indexNum\" slot-scope=\"text, record,index\">\n                  <p>{{index+1+(ipagination.current-1)*ipagination.pageSize}}</p>\n               </span>\n          <span slot=\"action\" slot-scope=\"text, record\" style=\"width: 150px;\">\n\n           <!--<a-icon type=\"read\" title=\"预览\" @click=\"previewKmDoc(record)\"-->\n            <!--:style=\"{ fontSize: '18px', color: '#1890FF', }\"/>-->\n\t\t\t\t\t<img src=\"../../../assets/gpt.png\" style=\"width: 25px;height: 25px;\"@click=\"showModal(record)\" />\r\n\t\t\t\t\t<a-divider type=\"vertical\"/>\t\n\n          <a-icon v-if=\"record.downloadFlag==1\" type=\"download\" title=\"下载\" @click=\"downloadKmDoc(record)\"\n                  :style=\"{ fontSize: '18px', color: '#1890FF'}\"/>\n          <a-icon v-else type=\"download\" title=\"禁止下载\" :style=\"{ fontSize: '18px', color: '#909399'}\"/>\n\n          <a-divider type=\"vertical\"/>\n\n          <a-icon v-if=\"record.favourite==0\" type=\"star\" title=\"收藏\" @click=\"addFavouriteKmDoc(record)\"\n                  :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n          <a-icon v-else type=\"star\" theme=\"filled\" title=\"取消收藏\" @click=\"delFavouriteKmDoc(record)\"\n                  :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n\n        </span>\n\n          <span slot=\"docTitle\" slot-scope=\"text,record\">\n           <span @click=\"previewKmDoc(record,true)\"><a style=\"color: #303133\">\n             <span v-html=\" record.title \"></span></a></span>\n        </span>\n          <!--<span slot=\"test\" slot-scope=\"text, record\">-->\n          <!--<span v-html=\"record.title\"></span>-->\n          <!--</span>-->\n\n        </a-table>\n      </div>\n\r\n  <div>\n\n    <!-- 模态框 -->\n    <a-modal\n      :title=\"modalTitle\"\n      :visible=\"visible1\"\n      :footer=\"null\"\n      @cancel=\"handleCancel1\"\n      :maskClosable=\"false\"\n    >\n      <!-- 加载动画 -->\n      <a-spin v-if=\"loading1\" size=\"large\" />\n\n      <!-- 文章摘要内容 -->\n      <div v-else class=\"content\">\n        <p>{{ displayedText }}</p>\n      </div>\n    </a-modal>\n  </div>\r\n\r\n\r\n\n      <b-j-modal :title=\"title\"\n                 :width=\"width\"\n                 :visible=\"visible\"\n                 @cancel=\"handleCancel\"\n                 cancelText=\"关闭\"\n                 :okButtonProps=\"{ class:{'jee-hidden': true} }\">\n        <p-d-f-modal :p-d-furl=\"PDFurl\" :iframeWidth=\"width\"/>\n      </b-j-modal>\n\n    </div>\n  </div>\n    </a-layout-content>\n  </a-layout>\n</template>\n\n<script>\n  import {ajaxGetDictItems, getDictItemsFromCache} from '@/api/api'\n  import {ACCESS_TOKEN} from \"@/store/mutation-types\"\n  import {httpPostAction, getAction, downloadFileName, getActionPDF,getKeyword,abstractKmDoc} from \"../../../api/manage\";\n  import {AJeecgListMixin} from '@/mixins/AJeecgListMixin'\n  import Vue from \"vue\";\n  import IframePageContent from \"../../../components/layouts/IframeFReportView\";\n  import SearchHeader from '../Common/SearchHeader'\n\n  export default {\n    name: \"docSearch\",\n    mixins: [AJeecgListMixin],\n    components: {IframePageContent,SearchHeader},\n    data() {\n      return {\r\n\t\t  suggestions:[],\n        pageTitle:\"检索结果\",\n        boolCheckChange: true,\n        knowledgeTitle: \"知识专题\",\n        checkedArray: [],\n        topicCodesTree: {\n          checked: [],\n          halfChecked: [],\n        },\n        topicCodes:\"\",\n        // businessTypes:\"1\",\n        boolSelect: false,\n        treeData: [],\n        confirmLoading: false,\n        PDFurl: '',\n        visible: false,\n        pdfLoading: false,\n        pdfShow: true,\n        isorter: {\n          column: '_score',\n          order: 'desc',\n        },\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n        checkboxVuale: [],\n        title: \"预览\",\n        width: 900,\n        // hotTopicReportList: [],\n        defaultBusinessTypeList: [],\n        docDataSource: [],\n        loadedRatio: 0,\n        isSearchResult: false,\n        filterOptions:[],\n        //要filter的字段\n        filterDictCode: 'km_dict_source',\n        //表头\n        columns: [],\n        //列设置\n        settingColumns: [],\n        //列定义\n        defColumns: [\n          {\n            title: '#',\n            dataIndex: '',\n            key: 'rowIndex',\n            width: 60,\n            align: \"center\",\n            scopedSlots: {customRender: 'indexNum'}\n          },\n          {\n            title: '标题',\n            align: \"left\",\n            dataIndex: 'title',\n            scopedSlots: {customRender: 'docTitle'}\n          },\n          {\n            title: '文档来源',\n            align: \"left\",\n            dataIndex: 'category_dictText',\n            width: 180,\n            filters: [],\n            customCell: () => {\n              return {\n                style: {\n                  'max-width': '6em',\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis'\n                },\n              };\n            },\n          },\n          {\n            title: '标签',\n            align: \"left\",\n            dataIndex: 'businessType_dictText',\n            customCell: () => {\n              return {\n                style: {\n                  'max-width': '6em',\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow:'ellipsis'\n                },\n              };\n            },\n          },\n          {\n            title: '操作',\n            dataIndex: 'action',\n            align: \"center\",\n            fixed: \"right\",\n            width: 180,\n            scopedSlots: {\n              filterDropdown: 'filterDropdown',\n              filterIcon: 'filterIcon',\n              customRender: 'action'\n            }\n          },\n        ],\n        options: [],\n        content: '',\n        checkedValues: '',\n        itemList: [],\n        // 要加载多选的字典\n        dictCode: 'km_dict_category',\n\n        url: {\n          rootList: \"/sys/category/loadTreeRoot\",\n          list: '/KM/kmDoc/searchDoc',\n          hotTopicReport: '/KM/kmSearchRecord/hotTopicReport',\n          defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n          previewKmDoc: '/KM/kmDoc/previewKmDoc',\n          downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n          addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n          delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\r\n\t\t  selectKeyword: '/KM/kmSearchRecord/selectKeyword',\r\n\t\t  abstractKmDoc: '/KM/kmDoc/abstractKmDoc',\n        },\r\n\t\tvisible1: false, // 控制模态框显示\r\n\t\tbuttonLoading: false, // 按钮加载状态\r\n\t\tloading1: true, // 模态框加载状态\r\n\t\tfullText: \"\", // 后端返回的完整文章摘要\r\n\t\tdisplayedText: \"\", // 逐字显示的内容\r\n\t\ttypingSpeed: 50, // 打字速度（毫秒）\r\n\t\tisGenerating: false, // 是否正在生成中\n      }\n    },\r\n\tcomputed: {\r\n\t  // 动态模态框标题\r\n\t  modalTitle() {\r\n\t    return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\r\n\t  },\r\n\t},\n    created() {\n      this.loadTree();\n      // 调用初始化自定义table列表函数\n      this.initColumns();\n      this.initFilterDict();\n\n      //设置全局token\n      Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n      window._CONFIG['token'] = Vue.prototype.token;\n      // this.hotTopicReportFun();\n      this.initDict();\n      let params = this.$route.params;\n      console.log(\"params：\", params);\n      this.topicCodes=params.topicCodes;\n      this.businessTypes=params.businessTypes;\n\n      // if(this.businessTypes)\n      //   this.loadDefaultBusinessTypeFunc()\n\n      if(this.topicCodes==null){\n        if (Object.keys(params).length > 0) {\n          this.boolCheckChange = params.boolCheckChange;\n          this.content = params.content;\n          let replaceTitle=this.content;\n          if(replaceTitle)\n            replaceTitle = replaceTitle.replace(/，/g, ',');\n          // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n          // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n          if(this.boolCheckChange){\n            params[\"content\"] = replaceTitle;\n          }else{\n            delete params[\"content\"];\n            delete params[\"boolCheckChange\"];\n          }\n          params[\"title\"] = replaceTitle;\n          params[\"keywords\"] = replaceTitle;\n          params[\"advSearchFlag\"] = 0;\n\n          if (params.category !== \"\" && params.category != null) {\n            this.checkboxVuale = params.category.split(\",\");\n            this.checkedValues = params.category\n          }\n          this.searchFun(params);\n        }\n      }else{\n        this.topicCodesTree=params.topicCodesTree;\n        this.knowledgeTitle=params.knowledgeTitle;\n        let param={};\n        param[\"topicCodes\"]=this.topicCodes;\n        this.searchFun(param);\n      }\n    },\n\n    watch: {\n      loadedRatio: {\n        handler(newVal, oldVal) {\n          console.log(newVal)\n          if (newVal === 1) {\n            this.pdfLoading = false;\n          }\n        }\n      }\n    },\n    methods: {\n      // 加载filter字段选项\n      initFilterDict() {\n        //优先从缓存中读取字典配置\n        // if (getDictItemsFromCache(this.dictCode)) {\n        let options = getDictItemsFromCache(this.filterDictCode)\n        if(options){\n          options.forEach((item, index) => {\n            let filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            this.filterOptions.push(filterOption);\n          });\n          console.log(this.filterOptions);\n          this.defColumns[2].filters =this.filterOptions;\n          return\n        }\r\n\t\t\r\n\t\t\r\n\t\t\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.filterDictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            console.log(options);\n            options.forEach((item, index) => {\n              let filterOption = {};\n              filterOption.text = item.title;\n              filterOption.value = item.value;\n              this.filterOptions.push(filterOption);\n            });\n            this.defColumns[2].filters =this.filterOptions;\n          }\n        })\n\n      },\r\n\t  \r\n\t  \r\n\t  // 显示模态框\r\n\t  showModal(record) {\r\n\t    this.visible1 = true;\r\n\t    this.buttonLoading = true;\r\n\t    this.isGenerating = true; // 显示“生成中”提示\r\n\t    this.abstractKmDoc(record)\r\n\t  \t\r\n\t  },\r\n\t  \t\r\n\t  abstractKmDoc(record){\r\n\t  \tlet params = {\r\n\t  \t  docId: record.id,\r\n\t  \t};\r\n\t  \tabstractKmDoc(this.url.abstractKmDoc, params).then(res => {\r\n\t  \t  if (res.success) {\r\n\t  \t\tthis.fullText = res.result\r\n\t  \t\tthis.buttonLoading = false;\r\n\t  \t\tthis.loading1 = false;\r\n\t  \t\tthis.isGenerating = false; // 关闭“生成中”提示\r\n\t  \t\t\t\r\n\t  \t\t// 开始逐字显示\r\n\t  \t\tthis.typeText();\r\n\t  \t\t\r\n\t  \t  } else {\r\n\t  \t    this.$message.warning(res.message)\r\n\t  \t  }\r\n\t  \t}).finally(() => {\r\n\t  \t})\r\n\t  \t\r\n\t  },\r\n\t  \t\r\n\t  // 模拟调用后端接口\r\n\t  \r\n\t  \t\r\n\t  // 逐字显示内容\r\n\t  typeText() {\r\n\t    let index = 0;\r\n\t    const timer = setInterval(() => {\r\n\t      if (index < this.fullText.length) {\r\n\t        this.displayedText += this.fullText.charAt(index);\r\n\t        index++;\r\n\t      } else {\r\n\t        clearInterval(timer); // 停止定时器\r\n\t      }\r\n\t    }, this.typingSpeed);\r\n\t  },\r\n\t  \t\r\n\t  // 关闭模态框\r\n\t  handleCancel1() {\r\n\t    this.visible1 = false;\r\n\t    this.displayedText = \"\"; // 清空内容\r\n\t    this.loading1 = true; // 重置加载状态\r\n\t    this.isGenerating = false; // 关闭“生成中”提示\r\n\t  },\r\n\t  \r\n\t  onInput() {\r\n\t  \t  console.log(\"=============\")\r\n\t        if (this.content) {\r\n\t          this.fetchSuggestions(this.content);\r\n\t        } else {\r\n\t          this.suggestions = [];\r\n\t        }\r\n\t      },\r\n\t  fetchSuggestions(keyword) {\r\n\t  \t\r\n\t  \tconsole.log(\"2222\")\r\n\t  \t\r\n\t        // 调用后端API获取推荐术语\r\n\t  \t\tgetKeyword(this.url.selectKeyword+'?'+'keyword='+keyword, keyword).then(res => {\r\n\t  \t\t  if (res.success) {\r\n\t  \t\t\tif (res.result && res.result.length > 0) {\r\n\t  \t\t\t\tlet a = []\r\n\t  \t\t\t\tfor (var index = 0; index < res.result.length; index++) {\r\n\t  \t\t\t\t\ta.push(res.result[index].corword)\r\n\t  \t\t\t\t}\r\n\t  \t\t\t\t\r\n\t  \t\t\t  this.suggestions = a\r\n\t  \t\t\t} else {\r\n\t  \t\t\t  this.suggestions = []\r\n\t  \t\t\t}\r\n\t  \t\t  } else {\r\n\t  \t\t\tthis.$message.warning(res.message)\r\n\t  \t\t  }\r\n\t  \t\t}).finally(() => {\r\n\t  \t\t})\r\n\t      },\r\n\t      selectSuggestion(suggestion) {\r\n\t        this.content = suggestion;\r\n\t        this.suggestions = [];\r\n\t        // 这里可以触发搜索操作\r\n\t      },\r\n\t  \n\n      // 是否全文检索\n      onCheckChange(e) {\n        this.boolCheckChange = e.target.checked\n        console.log(`checked = ${e.target.checked}`);\n      },\n\n      // 加载树节点，获取树数据\n      loadTree() {\n        let params = {\n          async: false,\n          pcode: \"\"\n        };\n        getAction(this.url.rootList, params).then(res => {\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              this.treeData = res.result\n            } else {\n              this.treeData = []\n            }\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n        })\n      },\n\n      // 查找一个节点的所有父节点\n      familyTree(treeData, id) {\n        var arrTree = [];\n        var forFn = function (arr, key) {\n          for (var i = 0; i < arr.length; i++) {\n            var item = arr[i]\n            if (item.key === key) {\n              if (item.parentId === \"0\") {\n                break;\n              } else {\n                console.log(\"父节点\", item.parentId);\n                arrTree.push(item.parentId);\n                forFn(treeData, item.parentId);\n              }\n              break\n            } else {\n              if (item.children != null) {\n                forFn(item.children, key);\n              }\n            }\n          }\n        }\n        forFn(treeData, id);\n        return arrTree\n      },\n\n      // 树节点选择触发\n      onCheck(checkedKeys, checkedNodes) {\n        if (checkedKeys.checked.length > 1) {\n          let checkKeys = checkedKeys.checked[1];\n          checkedKeys.checked = [];\n          checkedKeys.checked.push(checkKeys);\n          let checkNodesTitle = checkedNodes.checkedNodes[1];\n          checkedNodes.checkedNodes = [];\n          checkedNodes.checkedNodes.push(checkNodesTitle);\n        }\n        console.log(\"checkedKeys\", checkedKeys);\n        console.log(\"checkedNodes\", checkedNodes);\n        let temp = new Array();\n        let tempArray = new Array();\n        this.checkedArray = checkedKeys.checked;\n\n        for (let i = 0; i < this.checkedArray.length; i++) {\n          let arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n          temp = temp.concat(arrTemp);\n        }\n        // 数组去重\n        tempArray = [...new Set(temp)];\n        console.log(\"tempArray\", tempArray);\n        checkedKeys.halfChecked = tempArray;\n        let checkedTitle = checkedNodes.checkedNodes;\n        this.knowledgeTitle = \"\";\n        for (let i = 0; i < checkedTitle.length; i++) {\n          if (this.knowledgeTitle === \"\") {\n            this.knowledgeTitle = checkedTitle[i].data.props.title;\n          } else {\n            if (checkedTitle[i].data.props.data != null) {\n              this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[i].data.props.title;\n            }\n          }\n        }\n        if (this.knowledgeTitle === \"\") {\n          this.knowledgeTitle = \"知识专题\"\n          this.topicCodes = null;\n        }\n        let param = this.getQueryParams();//查询条件互相影响\n        // let param={};\n        this.topicCodes=checkedTitle[0].data.props.code;\n        param[\"topicCodes\"]=this.topicCodes;\n        this.searchFun(param);\n        // this.businessTypes=null;\n\n      },\n      // 自定义列表  列设置更改事件\n      onColSettingsChange(checkedValues) {\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000)\n        this.settingColumns = checkedValues;\n        const cols = this.defColumns.filter(item => {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true\n          }\n          if (this.settingColumns.includes(item.dataIndex)) {\n            return true\n          }\n          return false\n        })\n        this.columns = cols;\n      },\n      // 自定义列表  初始化\n      initColumns() {\n        //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n        //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        let colSettings = Vue.ls.get(key);\n        if (colSettings == null || colSettings == undefined) {\n          let allSettingColumns = [];\n          this.defColumns.forEach(function (item, i, array) {\n            allSettingColumns.push(item.dataIndex);\n          })\n          this.settingColumns = allSettingColumns;\n          this.columns = this.defColumns;\n        } else {\n          this.settingColumns = colSettings;\n          const cols = this.defColumns.filter(item => {\n            if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n              return true;\n            }\n            if (colSettings.includes(item.dataIndex)) {\n              return true;\n            }\n            return false;\n          })\n          this.columns = cols;\n        }\n      },\n\n      searchFun(params) {\n        getAction(this.url.list, params).then((res) => {\n          if (res.success) {\n            this.dataSource = res.result.kmSearchResultVOPage.records;\n            this.itemList = res.result.paramPath;\n            if (res.result.kmSearchResultVOPage.total) {\n              this.ipagination.total = res.result.kmSearchResultVOPage.total;\n            } else {\n              this.ipagination.total = 0;\n            }\n          } else {\n            this.$message.error(\"检索失败\");\n          }\n        })\n      },\n\n      loadData() {\n        this.searchDocFun('2');\n      },\n\n      // 加载 分类数据\n      initDict() {\n        this.options = [];\n\n        //优先从缓存中读取字典配置\n        if (getDictItemsFromCache(this.dictCode)) {\n          let options = getDictItemsFromCache(this.dictCode)\n          options.forEach((item, index) => {\n            let person = {};\n            person.label = item.title;\n            person.value = item.value;\n            this.options.push(person);\n          });\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            options.forEach((item, index) => {\n              let person = {};\n              person.label = item.title;\n              person.value = item.value;\n              this.options.push(person);\n            });\n          }\n        })\n\n\n      },\n\n      // 多选框选择触发\n      onChange(checkedValues) {\n        this.checkedValues = checkedValues.toString();\n        console.log('checked = ', checkedValues);\n      },\n      // 按回车键触发方法\n      pressEnterFun(e) {\n        this.$nextTick(() => {\n          this.searchDocFun('0');\n        })\n      },\n      // 检索\n      searchDocFun(type) {\n        // this.businessTypes=null;\n\n        let params = {};\n        params = this.getQueryParams();//查询条件\n        if (type === '0') {\n          this.isSearchResult = false;\n          this.ipagination.current = 1;\n          //启用用过滤\n          this.defColumns[2].filters =this.filterOptions;\n        } else if (type === '1') {\n          this.isSearchResult = true;\n          this.ipagination.current = 1;\n          //禁用过滤\n          this.defColumns[2].filters = [];\n        }\n\n        this.loading = true;\n\n        if (this.content !== \"\" && this.content != null) {\n          let replaceTitle=this.content\n          if(replaceTitle)\n            replaceTitle = replaceTitle.replace(/，/g, ',');\n          // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n          // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n          if(this.boolCheckChange){\n            params[\"content\"] = replaceTitle;\n          }else{\n            delete params[\"content\"];\n          }\n          params[\"title\"] = replaceTitle;\n          params[\"keywords\"] = replaceTitle;\n        }\n        params[\"advSearchFlag\"] = 0;\n        if (this.checkedValues !== \"\" && this.checkedValues != null) {\n          params['category'] = this.checkedValues;\n        }\n        if( this.topicCodes!=null){\n          params['topicCodes']=this.topicCodes;\n        }\n        if(this.businessTypes!=null){\n          params['businessTypes']=this.businessTypes;\n        }\n\n        // 判断参数是否为空\n        if (this.empty(params)) {\n          if (this.isSearchResult) {\n            params.withinSearchFlag = '1';\n          }\n          params.field = this.getQueryField();\n          params.pageNo = this.ipagination.current;\n          params.pageSize = this.ipagination.pageSize;\n          this.loading = true;\n          getAction(this.url.list, params).then((res) => {\n            if (res.success) {\n              this.dataSource = res.result.kmSearchResultVOPage.records;\n              this.itemList = res.result.paramPath;\n              if (res.result.kmSearchResultVOPage.total) {\n                this.ipagination.total = res.result.kmSearchResultVOPage.total;\n              } else {\n                this.ipagination.total = 0;\n              }\n            } else {\n              this.$message.error(\"检索失败\");\n            }\n            this.loading = false;\n          })\n        } else {\n          this.loading = false;\n          this.$message.info(\"请输入搜索条件\");\n        }\n      },\n\n      loadDefaultBusinessTypeFunc(){\n        getAction(this.url.defaultBusinessTypeList).then(res => {\n          if (res.success) {\n            this.defaultBusinessTypeList = res.result;\n          } else {\n            this.$message.error(\"业务加载失败\");\n          }\n        })\n      },\n\n      //  判断对象是否为空\n      empty(obj) {\n        for (let key in obj) {\n          return true;\n        }\n        return false;\n      },\n\n      //批量下载\n      downloadKmDocBatch() {\n        console.log(\"批量下载\")\n        if (!this.url.downloadKmDoc) {\n          this.$message.error(\"请设置url.downloadKmDoc属性!\")\n          return\n        }\n        if (this.selectionRows.length <= 0) {\n          this.$message.warning('请选择一条记录！');\n          return;\n        } else {\n          var that = this;\n          this.$confirm({\n            title: \"确认下载\",\n            content: \"是否下载选中数据?\",\n            onOk: function () {\n              for (var i = 0; i < that.selectionRows.length; i++) {\n                let fileName = i;\n                downloadFileName(that.url.downloadKmDoc, {docId: that.selectionRows[i].id})\n              }\n              that.onClearSelected();\n            }\n          });\n        }\n      },\n      //加收藏夹\n      addFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.addFavouriteKmDoc;\n        method = 'post';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"收藏成功!\");\n            //this.loadData();\n            record.favourite = 1;\n          } else {\n            this.$message.warning(\"收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n      //取消收藏夹\n      delFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.delFavouriteKmDoc;\n        method = 'delete';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"取消收藏成功!\");\n            // this.loadData();\n            record.favourite = 0;\n          } else {\n            this.$message.warning(\"取消收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n\n      // 显示预览窗口，初始化\n      previewKmDoc(record) {\n        // this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.PDFurl =  this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.visible = true;\n        this.pdfLoading = true;\n        this.pdfShow = true;\n      },\n      //关闭预览窗口\n      handleCancel() {\n        this.visible = false;\n      },\n\n      //下载文件\n      downloadKmDoc(record) {\n        this.$notification.success({\n          message: '文件开始下载...',\n          duration: 1,\n        });\n        downloadFileName(this.url.downloadKmDoc, {docId: record.id})\n      },\n\n      // 返回\n      backHomepage() {\n        this.$router.push('/defaultDocSearch');\n      },\n      // 跳转到收藏夹\n      jumpKmDocFavouritePage(){\n        this.$router.push('/km/filemanagement/KmDocFavouriteList');\n      },\n      // 跳转到个人草稿文件夹\n      jumpDraftsPage(){\n        this.$router.push('/km/filemanagement/DraftsList');\n      },\n      historyBack(){\n        history.back()\n      },\n      // 点击个人登录，跳转页面\n      login() {\n        this.$router.push('/dashboard/analysis');\n      },\n\n    }\n  }\n</script>\n\n<style scoped>\n  @import '~@assets/less/common.less';\r\n  \r\n  .suggestions-list {\r\n  /*    position: absolute;\r\n      top: 100%;\r\n      left: 0;\r\n      right: 0;\r\n      margin-top: 5px;\r\n      padding: 0;\r\n      list-style: none; */\r\n  \tposition: fixed;\r\n  \twidth: 600px;\r\n      background-color: white;\r\n      border: 1px solid #ddd;\r\n      border-radius: 5px;\r\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n      z-index: 1000;\r\n  \tlist-style: none;\r\n    }\r\n    \r\n    .suggestion-item {\r\n      padding: 10px;\r\n      font-size: 14px;\r\n      color: #333;\r\n      cursor: pointer;\r\n      transition: background-color 0.3s ease, transform 0.2s ease;\r\n  \ttext-align: left;\r\n  \tpadding: 10px 15px; /* 调整内边距，左侧留出更多空间 */\r\n    }\r\n    \r\n    .suggestion-item:hover {\r\n      background-color: #f8f9fa;\r\n      transform: translateX(5px);\r\n    }\r\n    \r\n    .suggestion-item:active {\r\n      background-color: #e9ecef;\r\n  \t}\r\n  \t\r\n  \t\r\n  \t\r\n  \t/* 按钮动画 */\r\n  \t.ant-btn-primary {\r\n  \t  transition: all 0.3s ease;\r\n  \t}\r\n  \t\r\n  \t.ant-btn-primary:hover {\r\n  \t  transform: scale(1.05);\r\n  \t  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  \t}\r\n  \t\r\n  \t/* 模态框内容样式 */\r\n  \t.content {\r\n  \t  font-size: 16px;\r\n  \t  line-height: 1.6;\r\n  \t  color: #333;\r\n  \t  padding: 20px;\r\n  \t  background: #f9f9f9;\r\n  \t  border-radius: 8px;\r\n  \t  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  \t}\r\n  \t\r\n  \t/* 打字机效果 */\r\n  \t@keyframes blink {\r\n  \t  0%,\r\n  \t  100% {\r\n  \t    opacity: 1;\r\n  \t  }\r\n  \t  50% {\r\n  \t    opacity: 0;\r\n  \t  }\r\n  \t}\r\n  \t\r\n  \t.content p::after {\r\n  \t  content: \"|\";\r\n  \t  animation: blink 1s infinite;\r\n  \t  color: #1890ff;\r\n  \t}\r\n  \t\r\n  \t/* 生成中提示动画 */\r\n  \t@keyframes generating {\r\n  \t  0% {\r\n  \t    opacity: 0.5;\r\n  \t  }\r\n  \t  50% {\r\n  \t    opacity: 1;\r\n  \t  }\r\n  \t  100% {\r\n  \t    opacity: 0.5;\r\n  \t  }\r\n  \t}\r\n  \t\r\n  \t.generating-text {\r\n  \t  animation: generating 1.5s infinite;\r\n  \t  color: #1890ff;\r\n  \t  font-weight: bold;\r\n  \t}\n</style>"]}]}