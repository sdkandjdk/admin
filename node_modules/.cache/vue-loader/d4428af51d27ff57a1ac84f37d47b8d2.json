{"remainingRequest":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\知识库系统\\admin\\src\\views\\km\\filemanagement\\modules\\SubjectForm.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\知识库系统\\admin\\src\\views\\km\\filemanagement\\modules\\SubjectForm.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["\n\n  import {getAction} from '@/api/manage'\n  import Vue from \"vue\";\n  import PropTypes from \"ant-design-vue/lib/_util/vue-types\";\n\n  export default {\n    name: 'SubjectForm',\n    components: {},\n    props: {\n      //表单禁用\n      disabled: {\n        type: Boolean,\n        default: false,\n        required: false\n      }\n    },\n    data() {\n      return {\n        // a-tree 属性\n        boolSelect:false,\n        checkedTitle:[],\n        topicIds: '',\n        treeTopicCodes:{\n          checked:[],\n          halfChecked:[],\n        },\n        topicIdsArr: [],\n        topicCodesTree:[],\n        checkedArray:[],\n        treeData: [],\n        selectedKeys: [],\n        model: {},\n        type: 0,\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n        confirmLoading: false,\n        validatorRules: {},\n        replaceFields: {\n          key: 'id',\n          parentId:\"pid\",\n          title:\"name\",\n        },\n        url: {\n          rootList: \"/sys/category/loadTreeRoot\",\n          list: \"/sys/category/rootListNoPage\",\n          childList: \"/sys/category/childList\",\n          getChildListBatch: \"/sys/category/getChildListBatch\",\n          editRelease: '/KM/kmDoc/editRelease',\n          editDraft: '/KM/kmDoc/editDraft'\n        },\n        // 表头\n        columns: [\n          {\n            title: '专题名称',\n            align: \"left\",\n            dataIndex: 'name'\n          },\n        ],\n      }\n    },\n    computed: {\n      formDisabled() {\n        return this.disabled\n      },\n    },\n    created() {\n        this.loadTree();\n    },\n    methods: {\n\n\n\n      // 查找一个节点的所有父节点\n      familyTree(treeData,id){\n        var arrTree=[];\n        var forFn = function (arr, key) {\n          for (var i = 0; i < arr.length; i++) {\n            var item = arr[i]\n            if (item.key === key) {\n               if(item.parentId===\"0\"){\n                 break;\n               }else{\n                 console.log(\"父节点\",item.parentId);\n                 arrTree.push(item.parentId);\n                 forFn(treeData, item.parentId);\n               }\n              break\n            } else {\n              if (item.children!=null) {\n                forFn(item.children, key);\n              }\n            }\n          }\n        }\n        forFn(treeData,id);\n        return arrTree\n      },\n\n\n      // 加载树节点\n      loadTree() {\n        let params = {\n          async: false,\n          pcode: \"\"\n        };\n        getAction(this.url.rootList, params).then(res => {\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              this.treeData = res.result\n              this.treeTopicCodes.checked=this.topicCodesTree;\n              let temp=[];\n              let tempArray=[];\n              for(let i=0;i<this.topicCodesTree.length;i++){\n                let arrTemp=  this.familyTree(this.treeData,this.topicCodesTree[i]);\n                temp=temp.concat(arrTemp);\n              }\n              // 数组去重\n              tempArray=[...new Set(temp)];\n              this.treeTopicCodes.halfChecked=tempArray;\n            } else {\n              this.treeData = []\n            }\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n        })\n      },\n\n      getDataByResult(result) {\n        if (result && result.length > 0) {\n          return result.map(item => {\n            //判断是否标记了带有子节点\n            if (item.hasChild === '1') {\n              item[\"isLeaf\"]=false;\n            }else{\n              item[\"isLeaf\"]=true;\n            }\n            return item\n          })\n        }\n      },\n\n\n      onLoadData(treeNode){\n        return new Promise(resolve => {\n          let params ={};\n          params[\"pid\"] = treeNode.dataRef.id\n          console.log(\"treeNode\", treeNode.dataRef.id);\n          getAction(this.url.childList, params).then((res) => {\n            if (res.success) {\n              if (res.result && res.result.length > 0) {\n                treeNode.dataRef.children = this.getDataByResult(res.result)\n                this.treeData = [...this.treeData];\n                resolve();\n              }\n            } else {\n              this.$message.warning(res.message)\n            }\n          })\n\n        })\n      },\n\n      // 树节点选择触发\n      onCheck(checkedKeys, checkedNodes) {\n         let temp=new Array();\n        let tempArray=new Array();\n        this.checkedArray =checkedKeys.checked;\n        for(let i=0;i<this.checkedArray.length;i++){\n          let arrTemp=  this.familyTree(this.treeData,this.checkedArray[i]);\n          temp=temp.concat(arrTemp);\n        }\n        // 数组去重\n        tempArray=[...new Set(temp)];\n        console.log(\"tempArray\",tempArray);\n        checkedKeys.halfChecked=tempArray;\n        this.checkedTitle=checkedNodes.checkedNodes;\n      },\n\n\n      edit(model, type) {\n        this.type = type;\n        this.model = Object.assign({}, model);\n        this.model = model;\n        this.visible = true;\n        if (model.topicIds != null) {\n          this.topicCodesTree = model.topicIds.split(',');\n\n          this.topicIds = model.topicIds;\n          this.topicIdsArr = model.topicIds.split(',');\n        } else {\n          this.topicCodesTree = [];\n        }\n       console.log(this.checkedKeys);\n      },\n      // 点击确定触发事件\n      submitForm() {\n\n        if (this.checkedArray.length > 0) {\n          this.model.topicIds = this.checkedArray.toString();\n        } else {\n          this.model.topicIds = '',\n            this.model.topicIds_dictText = ''\n        }\n\n        if (this.topicIds === this.checkedArray.toString()) {\n          console.log(\"不操作\")\n        } else if (this.topicIds === '') {\n          this.model.addTopicIdList = this.checkedArray;\n        } else if (this.checkedArray.length === 0) {\n\n          this.model.removeTopicIdList = this.topicIds.split(',');\n        } else {\n          var topicIdsArr = this.topicIdsArr;\n          var topicCodesTreeArr = this.checkedArray;\n          this.model.addTopicIdList = [];\n          this.model.removeTopicIdList = [];\n          for (let i = 0; i < this.topicIdsArr.length; i++) {\n            for (let j = 0; j < this.checkedArray.length; j++) {\n              if (topicIdsArr[i] === topicCodesTreeArr[j]) {\n                delete topicIdsArr[i];\n                delete topicCodesTreeArr[j];\n              }\n            }\n          }\n          for (let i = 0; i < topicIdsArr.length; i++) {\n            if (typeof (topicIdsArr[i]) != \"undefined\") {\n              this.model.removeTopicIdList.push(topicIdsArr[i]);\n            }\n          }\n          for (let i = 0; i < topicCodesTreeArr.length; i++) {\n            if (typeof (topicCodesTreeArr[i]) != \"undefined\") {\n              this.model.addTopicIdList.push(topicCodesTreeArr[i]);\n            }\n          }\n        }\n        this.model.topicIds_dictText=\"\";\n        for(let i=0;i<this.checkedTitle.length;i++){\n          if(this.model.topicIds_dictText===\"\"){\n            this.model.topicIds_dictText=this.checkedTitle[i].data.props.title;\n          }else{\n            this.model.topicIds_dictText= this.model.topicIds_dictText+\",\"+this.checkedTitle[i].data.props.title;\n          }\n        }\n        this.$emit('ok');\n      },\n\n    }\n  }\n",{"version":3,"sources":["SubjectForm.vue"],"names":[],"mappings":";;AAaA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"SubjectForm.vue","sourceRoot":"src/views/km/filemanagement/modules","sourcesContent":["<template>\n  <a-tree\n    checkStrictly\n    checkable\n    v-model=\"treeTopicCodes\"\n    :tree-data=\"treeData\"\n    :selectable=\"boolSelect\"\n    @check=\"onCheck\"\n  />\n</template>\n\n<script>\n\n  import {getAction} from '@/api/manage'\n  import Vue from \"vue\";\n  import PropTypes from \"ant-design-vue/lib/_util/vue-types\";\n\n  export default {\n    name: 'SubjectForm',\n    components: {},\n    props: {\n      //表单禁用\n      disabled: {\n        type: Boolean,\n        default: false,\n        required: false\n      }\n    },\n    data() {\n      return {\n        // a-tree 属性\n        boolSelect:false,\n        checkedTitle:[],\n        topicIds: '',\n        treeTopicCodes:{\n          checked:[],\n          halfChecked:[],\n        },\n        topicIdsArr: [],\n        topicCodesTree:[],\n        checkedArray:[],\n        treeData: [],\n        selectedKeys: [],\n        model: {},\n        type: 0,\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n        confirmLoading: false,\n        validatorRules: {},\n        replaceFields: {\n          key: 'id',\n          parentId:\"pid\",\n          title:\"name\",\n        },\n        url: {\n          rootList: \"/sys/category/loadTreeRoot\",\n          list: \"/sys/category/rootListNoPage\",\n          childList: \"/sys/category/childList\",\n          getChildListBatch: \"/sys/category/getChildListBatch\",\n          editRelease: '/KM/kmDoc/editRelease',\n          editDraft: '/KM/kmDoc/editDraft'\n        },\n        // 表头\n        columns: [\n          {\n            title: '专题名称',\n            align: \"left\",\n            dataIndex: 'name'\n          },\n        ],\n      }\n    },\n    computed: {\n      formDisabled() {\n        return this.disabled\n      },\n    },\n    created() {\n        this.loadTree();\n    },\n    methods: {\n\n\n\n      // 查找一个节点的所有父节点\n      familyTree(treeData,id){\n        var arrTree=[];\n        var forFn = function (arr, key) {\n          for (var i = 0; i < arr.length; i++) {\n            var item = arr[i]\n            if (item.key === key) {\n               if(item.parentId===\"0\"){\n                 break;\n               }else{\n                 console.log(\"父节点\",item.parentId);\n                 arrTree.push(item.parentId);\n                 forFn(treeData, item.parentId);\n               }\n              break\n            } else {\n              if (item.children!=null) {\n                forFn(item.children, key);\n              }\n            }\n          }\n        }\n        forFn(treeData,id);\n        return arrTree\n      },\n\n\n      // 加载树节点\n      loadTree() {\n        let params = {\n          async: false,\n          pcode: \"\"\n        };\n        getAction(this.url.rootList, params).then(res => {\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              this.treeData = res.result\n              this.treeTopicCodes.checked=this.topicCodesTree;\n              let temp=[];\n              let tempArray=[];\n              for(let i=0;i<this.topicCodesTree.length;i++){\n                let arrTemp=  this.familyTree(this.treeData,this.topicCodesTree[i]);\n                temp=temp.concat(arrTemp);\n              }\n              // 数组去重\n              tempArray=[...new Set(temp)];\n              this.treeTopicCodes.halfChecked=tempArray;\n            } else {\n              this.treeData = []\n            }\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n        })\n      },\n\n      getDataByResult(result) {\n        if (result && result.length > 0) {\n          return result.map(item => {\n            //判断是否标记了带有子节点\n            if (item.hasChild === '1') {\n              item[\"isLeaf\"]=false;\n            }else{\n              item[\"isLeaf\"]=true;\n            }\n            return item\n          })\n        }\n      },\n\n\n      onLoadData(treeNode){\n        return new Promise(resolve => {\n          let params ={};\n          params[\"pid\"] = treeNode.dataRef.id\n          console.log(\"treeNode\", treeNode.dataRef.id);\n          getAction(this.url.childList, params).then((res) => {\n            if (res.success) {\n              if (res.result && res.result.length > 0) {\n                treeNode.dataRef.children = this.getDataByResult(res.result)\n                this.treeData = [...this.treeData];\n                resolve();\n              }\n            } else {\n              this.$message.warning(res.message)\n            }\n          })\n\n        })\n      },\n\n      // 树节点选择触发\n      onCheck(checkedKeys, checkedNodes) {\n         let temp=new Array();\n        let tempArray=new Array();\n        this.checkedArray =checkedKeys.checked;\n        for(let i=0;i<this.checkedArray.length;i++){\n          let arrTemp=  this.familyTree(this.treeData,this.checkedArray[i]);\n          temp=temp.concat(arrTemp);\n        }\n        // 数组去重\n        tempArray=[...new Set(temp)];\n        console.log(\"tempArray\",tempArray);\n        checkedKeys.halfChecked=tempArray;\n        this.checkedTitle=checkedNodes.checkedNodes;\n      },\n\n\n      edit(model, type) {\n        this.type = type;\n        this.model = Object.assign({}, model);\n        this.model = model;\n        this.visible = true;\n        if (model.topicIds != null) {\n          this.topicCodesTree = model.topicIds.split(',');\n\n          this.topicIds = model.topicIds;\n          this.topicIdsArr = model.topicIds.split(',');\n        } else {\n          this.topicCodesTree = [];\n        }\n       console.log(this.checkedKeys);\n      },\n      // 点击确定触发事件\n      submitForm() {\n\n        if (this.checkedArray.length > 0) {\n          this.model.topicIds = this.checkedArray.toString();\n        } else {\n          this.model.topicIds = '',\n            this.model.topicIds_dictText = ''\n        }\n\n        if (this.topicIds === this.checkedArray.toString()) {\n          console.log(\"不操作\")\n        } else if (this.topicIds === '') {\n          this.model.addTopicIdList = this.checkedArray;\n        } else if (this.checkedArray.length === 0) {\n\n          this.model.removeTopicIdList = this.topicIds.split(',');\n        } else {\n          var topicIdsArr = this.topicIdsArr;\n          var topicCodesTreeArr = this.checkedArray;\n          this.model.addTopicIdList = [];\n          this.model.removeTopicIdList = [];\n          for (let i = 0; i < this.topicIdsArr.length; i++) {\n            for (let j = 0; j < this.checkedArray.length; j++) {\n              if (topicIdsArr[i] === topicCodesTreeArr[j]) {\n                delete topicIdsArr[i];\n                delete topicCodesTreeArr[j];\n              }\n            }\n          }\n          for (let i = 0; i < topicIdsArr.length; i++) {\n            if (typeof (topicIdsArr[i]) != \"undefined\") {\n              this.model.removeTopicIdList.push(topicIdsArr[i]);\n            }\n          }\n          for (let i = 0; i < topicCodesTreeArr.length; i++) {\n            if (typeof (topicCodesTreeArr[i]) != \"undefined\") {\n              this.model.addTopicIdList.push(topicCodesTreeArr[i]);\n            }\n          }\n        }\n        this.model.topicIds_dictText=\"\";\n        for(let i=0;i<this.checkedTitle.length;i++){\n          if(this.model.topicIds_dictText===\"\"){\n            this.model.topicIds_dictText=this.checkedTitle[i].data.props.title;\n          }else{\n            this.model.topicIds_dictText= this.model.topicIds_dictText+\",\"+this.checkedTitle[i].data.props.title;\n          }\n        }\n        this.$emit('ok');\n      },\n\n    }\n  }\n</script>\n\n<style scoped>\n  @import '~@assets/less/common.less';\n</style>"]}]}