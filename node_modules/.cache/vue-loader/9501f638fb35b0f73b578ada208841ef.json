{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work-25\\知识库系统\\admin\\src\\views\\km\\search\\DefaultDocSearch.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\views\\km\\search\\DefaultDocSearch.vue","mtime":1740914036950},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n  import {ajaxGetDictItems, getDictItemsFromCache} from '@/api/api'\n  import {ACCESS_TOKEN} from \"@/store/mutation-types\"\n  import {httpPostAction, getAction, downloadFileName, getActionPDF,getKeyword,abstractKmDoc} from \"../../../api/manage\";\n  import {JeecgListMixin} from '@/mixins/JeecgListMixin'\n  import Vue from \"vue\";\n  import IframePageContent from \"../../../components/layouts/IframeFReportView\";\n  import GlobalFooter from '@/components/page/GlobalFooter'\n  import ARow from \"ant-design-vue/es/grid/Row\";\n  import SearchHeader from '../Common/SearchHeader'\n\n  export default {\n    name: \"defaultDocSearch\",\n    mixins: [JeecgListMixin],\n    components: {ARow, IframePageContent,GlobalFooter,SearchHeader},\n    data() {\n      return {\n        boolCheckChange:true,\r\n\t\tsuggestions:[],\n        checkedArray:[],\n        topicCodesTree: {\n          checked: [],\n          halfChecked: [],\n        },\n        boolSelect:false,\n        treeData:[],\n        knowledgeTitle:\"知识专题\",\n        confirmLoading: false,\n        PDFurl: '',\n        visible: false,\n        pdfLoading: false,\n        pdfShow: true,\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n        title: \"预览\",\n        width: '900',\n        defaultBusinessTypeList: [],\n        hotTopicReportList: [],\n        docDataSource: [],\n        loadedRatio: 0,\n\n        topMenuStyle: {\n          headerIndexLeft: {},\n          topNavHeader: {},\n          headerIndexRight: {},\n          topSmenuStyle: {}\n        },\n        pageTitle: \"\",\n        //表头\n        columns: [],\n        //列设置\n        settingColumns: [],\n        //要filter的字段\n        filterDictCode: 'km_dict_source',\n        //  过滤字段数据\n        filterOptions: [],\n        //列定义\n        defColumns: [\n          {\n            title: '#',\n            dataIndex: '',\n            key: 'rowIndex',\n            width: 40,\n            align: \"center\",\n            scopedSlots: {customRender: 'indexNum'},\n          },\n          {\n            title: '标题',\n            align: \"left\",\n            dataIndex: 'title',\n            scopedSlots: {customRender: 'docTitle'},\n          },\n          {\n            title: '文档来源',\n            align: \"center\",\n            dataIndex: 'source_dictText',\n            width: 150,\n            filters: [],\n            // scopedSlots: {\n            //   filterDropdown: 'filterSource',\n            //   filterIcon: 'filterIcon'\n            // },\n          },\n          {\n            title: '发文时间',\n            align: \"center\",\n            sorter: true,\n            dataIndex: 'pubTimeTxt',\n            width: 95,\n          },\n          {\n            title: '操作',\n            dataIndex: 'action',\n            align: \"center\",\n            width: 120,\n            scopedSlots: {\n              filterDropdown: 'filterDropdown',\n              filterIcon: 'filterIcon',\n              customRender: 'action'\n            }\n          },\n\n\n        ],\n        //  分类数据\n        options: [],\n        // 输入框输入的内容\n        content: '',\n        // 多选组件使用的变量\n        checkboxVuale: [],\n        checkedValues: '',\n\n        itemList: [],\n        // 要加载多选的字典\n        dictCode: 'km_dict_category',\n        // 请求的url地址\n        url: {\n          rootList: \"/sys/category/loadTreeRoot\",\n          recentlyList: '/KM/kmDocVisitRecord/recentlyVisitDocs',\n          defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n          hotTopicReport: '/KM/HomePage/listRecommendTopic',\n          list: '/KM/kmDoc/listRecently',\n          previewKmDoc: '/KM/kmDoc/previewKmDoc',\n          downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n          addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n          delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\r\n\t\t  selectKeyword: '/KM/kmSearchRecord/selectKeyword',\r\n\t\t  abstractKmDoc: '/KM/kmDoc/abstractKmDoc',\n        },\r\n      visible1: false, // 控制模态框显示\n      buttonLoading: false, // 按钮加载状态\n      loading1: true, // 模态框加载状态\n      fullText: \"\", // 后端返回的完整文章摘要\n      displayedText: \"\", // 逐字显示的内容\n      typingSpeed: 50, // 打字速度（毫秒）\n      isGenerating: false, // 是否正在生成中\n      }\n    },\r\n  computed: {\n    // 动态模态框标题\n    modalTitle() {\n      return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\n    },\n  },\n    created() {\n      this.loadTree();\n      //设置全局token\n      Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n      window._CONFIG['token'] = Vue.prototype.token;\n      this.hotTopicReportFun();\n      this.loadDefaultBusinessTypeFunc();\n      this.initDict();\n      this.initFilterDict();\n\n      // 调用初始化自定义table列表函数\n      this.initColumns();\n\n      this.changeTitle(\"普通检索\");\n\n    },\n    methods: {\r\n\t\t\r\n\t    // 显示模态框\r\n\t    showModal(record) {\r\n\t      this.visible1 = true;\r\n\t      this.buttonLoading = true;\r\n\t      this.isGenerating = true; // 显示“生成中”提示\r\n\t\t  this.abstractKmDoc(record)\r\n\t\r\n\t    },\r\n\t\r\n\t\tabstractKmDoc(record){\r\n\t\t\tlet params = {\r\n\t\t\t  docId: record.id,\r\n\t\t\t};\r\n\t\t\tabstractKmDoc(this.url.abstractKmDoc, params).then(res => {\r\n\t\t\t  if (res.success) {\r\n\t\t\t\tthis.fullText = res.result\r\n\t\t\t\tthis.buttonLoading = false;\r\n\t\t\t\tthis.loading1 = false;\r\n\t\t\t\tthis.isGenerating = false; // 关闭“生成中”提示\r\n\t\t\t\t\t\r\n\t\t\t\t// 开始逐字显示\r\n\t\t\t\tthis.typeText();\r\n\t\t\t\t\r\n\t\t\t  } else {\r\n\t\t\t    this.$message.warning(res.message)\r\n\t\t\t  }\r\n\t\t\t}).finally(() => {\r\n\t\t\t})\r\n\t\t\t\r\n\t\t},\r\n\t\r\n\t    // 模拟调用后端接口\r\n\r\n\t\r\n\t    // 逐字显示内容\r\n\t    typeText() {\r\n\t      let index = 0;\r\n\t      const timer = setInterval(() => {\r\n\t        if (index < this.fullText.length) {\r\n\t          this.displayedText += this.fullText.charAt(index);\r\n\t          index++;\r\n\t        } else {\r\n\t          clearInterval(timer); // 停止定时器\r\n\t        }\r\n\t      }, this.typingSpeed);\r\n\t    },\r\n\t\r\n\t    // 关闭模态框\r\n\t    handleCancel1() {\r\n\t      this.visible1 = false;\r\n\t      this.displayedText = \"\"; // 清空内容\r\n\t      this.loading1 = true; // 重置加载状态\r\n\t      this.isGenerating = false; // 关闭“生成中”提示\r\n\t    },\r\n\t\t\r\n\t\t\r\n\t\t    onInput() {\r\n\t\t\t  console.log(\"=============\")\r\n\t\t      if (this.content) {\r\n\t\t        this.fetchSuggestions(this.content);\r\n\t\t      } else {\r\n\t\t        this.suggestions = [];\r\n\t\t      }\r\n\t\t    },\r\n\t\tfetchSuggestions(keyword) {\r\n\t\t\t\r\n\t\t\tconsole.log(\"2222\")\r\n\t\t\t\r\n\t\t      // 调用后端API获取推荐术语\r\n\t\t\t\tgetKeyword(this.url.selectKeyword+'?'+'keyword='+keyword, keyword).then(res => {\n\t\t\t\t  if (res.success) {\n\t\t\t\t\tif (res.result && res.result.length > 0) {\r\n\t\t\t\t\t\tlet a = []\r\n\t\t\t\t\t\tfor (var index = 0; index < res.result.length; index++) {\r\n\t\t\t\t\t\t\ta.push(res.result[index].corword)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\n\t\t\t\t\t  this.suggestions = a\n\t\t\t\t\t} else {\n\t\t\t\t\t  this.suggestions = []\n\t\t\t\t\t}\n\t\t\t\t  } else {\n\t\t\t\t\tthis.$message.warning(res.message)\n\t\t\t\t  }\n\t\t\t\t}).finally(() => {\n\t\t\t\t})\r\n\t\t    },\r\n\t\t    selectSuggestion(suggestion) {\r\n\t\t      this.content = suggestion;\r\n\t\t      this.suggestions = [];\r\n\t\t      // 这里可以触发搜索操作\r\n\t\t    },\r\n\t\t\r\n\t\t\r\n\t\t\n      // 加载filter字段选项\n      initFilterDict() {\n        this.filterOptions = [];\n\n        //优先从缓存中读取字典配置\n        // if (getDictItemsFromCache(this.dictCode)) {\n        let options = getDictItemsFromCache(this.filterDictCode)\n        if(options){\n          options.forEach((item, index) => {\n            let filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            this.filterOptions.push(filterOption);\n          });\n          console.log(this.filterOptions);\n          this.defColumns[2].filters =this.filterOptions;\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.filterDictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            console.log(options);\n            options.forEach((item, index) => {\n              let filterOption = {};\n              filterOption.text = item.title;\n              filterOption.value = item.value;\n              this.filterOptions.push(filterOption);\n            });\n            this.defColumns[2].filters =this.filterOptions;\n          }\n        })\n\n      },\n      // 是否全文检索\n      onCheckChange(e){\n        this.boolCheckChange=e.target.checked\n        console.log(`checked = ${e.target.checked}`);\n      },\n\n      // 查找一个节点的所有父节点\n      familyTree(treeData, id) {\n        var arrTree = [];\n        var forFn = function (arr, key) {\n          for (var i = 0; i < arr.length; i++) {\n            var item = arr[i]\n            if (item.key === key) {\n              if (item.parentId === \"0\") {\n                break;\n              } else {\n                console.log(\"父节点\", item.parentId);\n                arrTree.push(item.parentId);\n                forFn(treeData, item.parentId);\n              }\n              break\n            } else {\n              if (item.children != null) {\n                forFn(item.children, key);\n              }\n            }\n          }\n        }\n        forFn(treeData, id);\n        return arrTree\n      },\n\n      // 树节点选择触发\n      onCheck(checkedKeys, checkedNodes) {\n        if(checkedKeys.checked.length>1){\n         let checkKeys=checkedKeys.checked[1];\n          checkedKeys.checked=[];\n          checkedKeys.checked.push(checkKeys);\n          let checkNodesTitle= checkedNodes.checkedNodes[1];\n          checkedNodes.checkedNodes=[];\n          checkedNodes.checkedNodes.push(checkNodesTitle);\n        }\n        console.log(\"checkedKeys\",checkedKeys);\n        console.log(\"checkedNodes\",checkedNodes);\n        let temp = new Array();\n        let tempArray = new Array();\n        this.checkedArray = checkedKeys.checked;\n\n        for (let i = 0; i < this.checkedArray.length; i++) {\n          let arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n          temp = temp.concat(arrTemp);\n        }\n        // 数组去重\n        tempArray = [...new Set(temp)];\n        console.log(\"tempArray\", tempArray);\n        checkedKeys.halfChecked = tempArray;\n        let checkedTitle = checkedNodes.checkedNodes;\n        this.knowledgeTitle = \"\";\n        for (let i = 0; i < checkedTitle.length; i++) {\n          if (this.knowledgeTitle === \"\") {\n            this.knowledgeTitle = checkedTitle[i].data.props.title;\n          } else {\n            if (checkedTitle[i].data.props.title != null) {\n              this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[i].data.props.title;\n            }\n          }\n        }\n        if(this.knowledgeTitle ===\"\"){\n          this.knowledgeTitle=\"知识专题\"\n        }\n        let topicCodes=checkedTitle[0].data.props.code;\n        this.knowledgeTitleFun(topicCodes,this.topicCodesTree,this.knowledgeTitle);\n      },\n\n      // 加载树节点，获取树数据\n      loadTree() {\n        let params = {\n          async: false,\n          pcode: \"\"\n        };\n        getAction(this.url.rootList, params).then(res => {\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              this.treeData = res.result\n            } else {\n              this.treeData = []\n            }\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n        })\n      },\n\n      // 更改页面标题\n      changeTitle(title) {\n        let projectTitle = \"Java知识库\"\n        // 特殊处理\n        document.title = title + ' · ' + projectTitle\n\n      },\n\n      // 自定义列表  列设置更改事件\n      onColSettingsChange(checkedValues) {\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000)\n        this.settingColumns = checkedValues;\n        const cols = this.defColumns.filter(item => {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true\n          }\n          if (this.settingColumns.includes(item.dataIndex)) {\n            return true\n          }\n          return false\n        })\n        this.columns = cols;\n      },\n      // 自定义列表  初始化\n      initColumns() {\n        //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n        //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        let colSettings = Vue.ls.get(key);\n        if (colSettings == null || colSettings == undefined) {\n          let allSettingColumns = [];\n          this.defColumns.forEach(function (item, i, array) {\n            allSettingColumns.push(item.dataIndex);\n          })\n          this.settingColumns = allSettingColumns;\n          this.columns = this.defColumns;\n        } else {\n          this.settingColumns = colSettings;\n          const cols = this.defColumns.filter(item => {\n            if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n              return true;\n            }\n            if (colSettings.includes(item.dataIndex)) {\n              return true;\n            }\n            return false;\n          })\n          this.columns = cols;\n        }\n      },\n\n      // 加载 分类数据\n      initDict() {\n        this.options = [];\n\n        //优先从缓存中读取字典配置\n        if (getDictItemsFromCache(this.dictCode)) {\n          let options = getDictItemsFromCache(this.dictCode)\n          options.forEach((item, index) => {\n            let person = {};\n            person.label = item.title;\n            person.value = item.value;\n            this.options.push(person);\n          });\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            options.forEach((item, index) => {\n              let person = {};\n              person.label = item.title;\n              person.value = item.value;\n              this.options.push(person);\n            });\n          }\n        })\n\n      },\n\n      // 多选框选择触发\n      onChange(checkedValues) {\n        this.checkedValues = checkedValues.toString();\n        this.checkboxVuale = checkedValues;\n        console.log('checked = ', checkedValues);\n      },\n      // 按回车键触发方法\n      pressEnterFun(e) {\n        this.$nextTick(() => {\n          this.searchDocFun();\n        })\n      },\n\n      //专题检索\n      knowledgeTitleFun(topicCodes,topicCodesTree,knowledgeTitle){\n        let params={};\n        params[\"topicCodes\"]=topicCodes;\n        params[\"topicCodesTree\"]=topicCodesTree;\n        params[\"knowledgeTitle\"]=knowledgeTitle;\n        // this.$router.push({name: 'RecommendTopicList',params:params});\n        this.$router.push({name: 'docSearch',params:params});\n      },\n\n      // 检索\n      searchDocFun() {\n        let params = {};\n        if (this.content !== \"\" && this.content != null) {\n          params['content'] = this.content;\n        }\n        if (this.checkedValues !== \"\" && this.checkedValues != null) {\n          params['category'] = this.checkedValues;\n        }\n        // 判断参数是否为空\n        if (this.empty(params)) {\n          params['column']=\"_score\";\n          params['order']=\"desc\";\n          params['boolCheckChange']=this.boolCheckChange;\n          if (params['content'] != null) {\n            params['content'] = params['content'].replace(/，/g, ',');\n          }\n          this.$router.push({name: 'docSearch', params: params});\n        } else {\n          this.$message.info(\"请输入搜索条件\");\n        }\n      },\n\n\n      loadDefaultBusinessTypeFunc(){\n        getAction(this.url.defaultBusinessTypeList).then(res => {\n          if (res.success) {\n            this.defaultBusinessTypeList = res.result;\n          } else {\n            this.$message.error(\"业务加载失败\");\n          }\n        })\n      },\n      // 热门专题\n      hotTopicReportFun() {\n        getAction(this.url.hotTopicReport).then(res => {\n          if (res.success) {\n            this.hotTopicReportList = res.result;\n          } else {\n            //this.$message.error(\"热门专题加载失败\");\n          }\n        })\n      },\n\n      //  判断对象是否为空\n      empty(obj) {\n        for (let key in obj) {\n          return true;\n        }\n        return false;\n      },\n\n      //批量下载\n      downloadKmDocBatch() {\n        console.log(\"批量下载\")\n        if (!this.url.downloadKmDoc) {\n          this.$message.error(\"请设置url.downloadKmDoc属性!\")\n          return\n        }\n        if (this.selectionRows.length <= 0) {\n          this.$message.warning('请选择一条记录！');\n          return;\n        } else {\n          var that = this;\n          this.$confirm({\n            title: \"确认下载\",\n            content: \"是否下载选中数据?\",\n            onOk: function () {\n              for (var i = 0; i < that.selectionRows.length; i++) {\n                let fileName = i;\n                downloadFileName(that.url.downloadKmDoc, {docId: that.selectionRows[i].id})\n              }\n              // that.loadData();\n              that.onClearSelected();\n            }\n          });\n        }\n      },\n\n      //访问业务类型\n      searchBusinessType(value){\n        let params = {};\n        params['businessTypes'] = value;\n        this.$router.push({name: 'docSearch', params: params});\n      },\n\n      // 显示预览窗口，初始化\n      previewKmDoc(record) {\n        //this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.PDFurl =  this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.title ='预览 - ' + record.title;\n        this.visible = true;\n        this.pdfLoading = true;\n        this.pdfShow = true;\n      },\n      //关闭预览窗口\n      handleCancel() {\n        this.visible = false;\n      },\n\n      //下载文件\n      downloadKmDoc(record) {\n        this.$notification.success({\n          message: '文件开始下载...',\n          duration: 1,\n        });\n        downloadFileName(this.url.downloadKmDoc, {docId: record.id})\n      },\n      //加收藏夹\n      addFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.addFavouriteKmDoc;\n        method = 'post';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"收藏成功!\");\n            // this.loadData();\n            record.favourite = 1;\n          } else {\n            this.$message.warning(\"收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n      //取消收藏夹\n      delFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.delFavouriteKmDoc;\n        method = 'delete';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"取消收藏成功!\");\n            // this.loadData();\n            record.favourite = 0;\n          } else {\n            this.$message.warning(\"取消收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n\n\n\n    }\n  }\n",{"version":3,"sources":["DefaultDocSearch.vue"],"names":[],"mappingsfile":"DefaultDocSearch.vue","sourceRoot":"src/views/km/search","sourcesContent":["<template>\n  <a-layout class=\"layout\">\n\n    <a-layout-header  class=\"searchHeader\" style=\" background-color: #1a53ba;width: 100%; height: 60px\" >\n      <SearchHeader  :title='pageTitle'/>\n    </a-layout-header>\n\n    <a-layout-content :style=\"{ background: '#fff',  minHeight: '680px' }\">\n\n      <div :bordered=\"false\" :style=\"{backgroundColor: '#f2f2f2',height: '100%'}\">\n        <!--<SearchHeader/>-->\n        <div  :style=\"{backgroundColor: '#1a53ba',padding: '10px',minWidth: '900px',height: '150px'}\">\n      <!-- 查询区域 -->\n      <div class=\"table-page-search-wrapper\" >\n        <!--<p></p>-->\n        <a-form layout=\"inline\">\n          <a-row>\n            <a-col :span=\"24\" style=\"text-align: center;\">\n              <div style=\"display:inline-block\">\n                <div style=\"float: left\">\n                  <a-input style=\"width: 800px;\" size=\"large\" placeholder=\"标题、关键字、全文\" v-model=\"content\"\n                           @pressEnter=\"pressEnterFun\" @input=\"onInput\">\n\n                    <a-icon slot=\"suffix\" @click=\"searchDocFun\" type=\"search\" style=\"color:#1890FF;fontSize:22px\"/>\n                  </a-input>\r\n\t\t\t\t<ul v-if=\"suggestions.length\" class=\"suggestions-list\">\n\t\t\t\t\t  <li\n\t\t\t\t\t\tv-for=\"(suggestion, index) in suggestions\"\n\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t@click=\"selectSuggestion(suggestion)\"\n\t\t\t\t\t\tclass=\"suggestion-item\"\n\t\t\t\t\t  >\n\t\t\t\t\t\t{{ suggestion }}\n\t\t\t\t\t  </li>\n\t\t\t\t\t</ul>\n                  <div class=\"checkbox\" style=\"width: 750px;text-align: center;margin-top: 10px;margin-left: 20px\">\n                    <a-checkbox-group :options=\"options\" v-model=\"checkboxVuale\" @change=\"onChange\"/>\n                  </div>\n                </div>\n                <div style=\"float: left;width: 100px;text-align: left;margin-top: -2px\">\n                  <span style=\"color: white;margin-left: 20px\">\n                   <span>全文检索</span>\n                      <a-checkbox  class=\"checkbox\" v-model=\"boolCheckChange\" style=\"margin-left: 8px\" @change=\"onCheckChange\" />\n                  </span>\n                </div>\n              </div>\n            </a-col>\n          </a-row>\n        </a-form>\n      </div>\n      <!-- 查询区域-END -->\n    </div>\n    <!-- 表格区域 -->\n    <div style=\"background-color:#f2f2f2\">\n      <a-form layout=\"inline\">\n        <a-row>\n          <a-col :xl=\"17\" :lg=\"15\" :md=\"14\" :sm=\"24\" style=\"background-color: #f2f2f2;padding: 15px\">\n            <div style=\"padding: 0; box-shadow:1px 2px 3px 2px #ccc\">\n              <!--<a-col style=\"background-color: #108ee9\">-->\n              <!--<h3 style=\"color: white;margin-left: 20px;padding:5px\"><b>新入库文档</b></h3>-->\n              <!--</a-col>-->\n              <a-table\n                style=\"background-color: white\"\n                ref=\"docTable\"\n                size=\"middle\"\n                rowKey=\"id\"\n                :columns=\"columns\"\n                :dataSource=\"dataSource\"\n                :pagination=\"ipagination\"\n                :loading=\"loading\"\n                @change=\"handleTableChange\">\n\n            <span slot=\"docTitle\" slot-scope=\"text,record\">\n              <span @click=\"previewKmDoc(record)\"><a style=\"color: #303133\">{{ record.title}}</a></span>\n           </span>\n\n\n                // 添加自定义列表插槽\n                <div slot=\"filterDropdown\">\n                  <a-card style=\"width: 350px\">\n                    <a-checkbox-group @change=\"onColSettingsChange\" v-model=\"settingColumns\"\n                                      :defaultValue=\"settingColumns\">\n                      <a-row>\n                        <template v-for=\"(item,index) in defColumns\">\n                          <template v-if=\"item.key!='rowIndex'&& item.dataIndex!='action'\">\n                            <a-col :span=\"12\">\n                              <a-checkbox :value=\"item.dataIndex\">{{ item.title }}</a-checkbox>\n                            </a-col>\n                          </template>\n                        </template>\n                      </a-row>\n                    </a-checkbox-group>\n                  </a-card>\n                </div>\n                <a-icon slot=\"filterIcon\" type='setting' title=\"自定义列\"\n                        :style=\"{ fontSize:'16px',color:  '#108ee9',minWidth:'35px'}\"/>\n                <span slot=\"indexNum\" slot-scope=\"text, record,index\">\n                  <p>{{index+1+(ipagination.current-1)*ipagination.pageSize}}</p>\n               </span>\n\n                <span slot=\"action\" slot-scope=\"text, record\" style=\"width: 150px;\">\t\t\r\n\t\t\t\t\t<img src=\"../../../assets/gpt.png\" style=\"width: 25px;height: 25px;\"@click=\"showModal(record)\" />\r\n\t\t\t\t\t<a-divider type=\"vertical\"/>\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\n                   <a-icon v-if=\"record.downloadFlag==1\" type=\"download\" title=\"下载\" @click=\"downloadKmDoc(record)\"\n                           :style=\"{ fontSize: '16px', color: '#1890FF'}\"/>\n                   <a-icon v-else type=\"download\" title=\"禁止下载\"\n                           :style=\"{ fontSize: '16px', color: '#909399'}\"/>\n                   <a-divider type=\"vertical\"/>\n                   <a-icon v-if=\"record.favourite==0\" type=\"star\" title=\"收藏\" @click=\"addFavouriteKmDoc(record)\"\n                           :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n                   <a-icon v-else type=\"star\" theme=\"filled\" title=\"取消收藏\" @click=\"delFavouriteKmDoc(record)\"\n                           :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n               </span>\n              </a-table>\n            </div>\n          </a-col>\n          <a-col :xl=\"7\" :lg=\"9\" :md=\"10\" :sm=\"24\" style=\"background-color: #f2f2f2;padding: 15px;min-width: 350px\">\n            <div style=\"background-color: white;padding: 0; box-shadow:1px 2px 3px 2px #ccc\">\n              <a-form layout=\"inline\" style=\"min-height: 10px\">\n                <a-row>\n                  <a-col style=\"background-color: #108ee9\">\n                    <h3 style=\"color: white;margin-left: 20px;padding:5px\">\n                      <b>科室</b>\n                    </h3>\n                  </a-col>\n                  <a-col v-for=\"(item,index) in defaultBusinessTypeList\" :xl=\"12\" :lg=\"12\" :md=\"12\" :sm=\"24\" :key=\"index\">\n                    <h4 style=\"text-align: left;margin-left: 20px\">\n                      <span @click=\"searchBusinessType(item.value)\"><a style=\"color: #303133\">{{item.text}}</a></span>\n                    </h4>\n                  </a-col>\n                </a-row>\n              </a-form>\n            </div>\n\n          </a-col>\n\n        </a-row>\n      </a-form>\n\r\n\r\n  <div>\n\n    <!-- 模态框 -->\n    <a-modal\n      :title=\"modalTitle\"\n      :visible=\"visible1\"\n      :footer=\"null\"\n      @cancel=\"handleCancel1\"\n      :maskClosable=\"false\"\n    >\n      <!-- 加载动画 -->\n      <a-spin v-if=\"loading1\" size=\"large\" />\n\n      <!-- 文章摘要内容 -->\n      <div v-else class=\"content\">\n        <p>{{ displayedText }}</p>\n      </div>\n    </a-modal>\n  </div>\r\n\r\n\n      <b-j-modal :title=\"title\"\n                 :width=\"width\"\n                 :visible=\"visible\"\n                 @cancel=\"handleCancel\"\n                 cancelText=\"关闭\"\n                 :okButtonProps=\"{ class:{'jee-hidden': true} }\">\n        <div>\n          <div>\n            <p-d-f-modal iframe-i-d=\"pdfIDde\" :p-d-furl=\"PDFurl\" :iframeWidth=\"width\"/>\n          </div>\n        </div>\n      </b-j-modal>\n\n      <a-layout-footer style=\"padding: 0\">\n        <global-footer/>\n      </a-layout-footer>\n\n    </div>\n  </div>\n\n    </a-layout-content>\n  </a-layout>\n</template>\n\n<script>\n  import {ajaxGetDictItems, getDictItemsFromCache} from '@/api/api'\n  import {ACCESS_TOKEN} from \"@/store/mutation-types\"\n  import {httpPostAction, getAction, downloadFileName, getActionPDF,getKeyword,abstractKmDoc} from \"../../../api/manage\";\n  import {JeecgListMixin} from '@/mixins/JeecgListMixin'\n  import Vue from \"vue\";\n  import IframePageContent from \"../../../components/layouts/IframeFReportView\";\n  import GlobalFooter from '@/components/page/GlobalFooter'\n  import ARow from \"ant-design-vue/es/grid/Row\";\n  import SearchHeader from '../Common/SearchHeader'\n\n  export default {\n    name: \"defaultDocSearch\",\n    mixins: [JeecgListMixin],\n    components: {ARow, IframePageContent,GlobalFooter,SearchHeader},\n    data() {\n      return {\n        boolCheckChange:true,\r\n\t\tsuggestions:[],\n        checkedArray:[],\n        topicCodesTree: {\n          checked: [],\n          halfChecked: [],\n        },\n        boolSelect:false,\n        treeData:[],\n        knowledgeTitle:\"知识专题\",\n        confirmLoading: false,\n        PDFurl: '',\n        visible: false,\n        pdfLoading: false,\n        pdfShow: true,\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n        title: \"预览\",\n        width: '900',\n        defaultBusinessTypeList: [],\n        hotTopicReportList: [],\n        docDataSource: [],\n        loadedRatio: 0,\n\n        topMenuStyle: {\n          headerIndexLeft: {},\n          topNavHeader: {},\n          headerIndexRight: {},\n          topSmenuStyle: {}\n        },\n        pageTitle: \"\",\n        //表头\n        columns: [],\n        //列设置\n        settingColumns: [],\n        //要filter的字段\n        filterDictCode: 'km_dict_source',\n        //  过滤字段数据\n        filterOptions: [],\n        //列定义\n        defColumns: [\n          {\n            title: '#',\n            dataIndex: '',\n            key: 'rowIndex',\n            width: 40,\n            align: \"center\",\n            scopedSlots: {customRender: 'indexNum'},\n          },\n          {\n            title: '标题',\n            align: \"left\",\n            dataIndex: 'title',\n            scopedSlots: {customRender: 'docTitle'},\n          },\n          {\n            title: '文档来源',\n            align: \"center\",\n            dataIndex: 'source_dictText',\n            width: 150,\n            filters: [],\n            // scopedSlots: {\n            //   filterDropdown: 'filterSource',\n            //   filterIcon: 'filterIcon'\n            // },\n          },\n          {\n            title: '发文时间',\n            align: \"center\",\n            sorter: true,\n            dataIndex: 'pubTimeTxt',\n            width: 95,\n          },\n          {\n            title: '操作',\n            dataIndex: 'action',\n            align: \"center\",\n            width: 120,\n            scopedSlots: {\n              filterDropdown: 'filterDropdown',\n              filterIcon: 'filterIcon',\n              customRender: 'action'\n            }\n          },\n\n\n        ],\n        //  分类数据\n        options: [],\n        // 输入框输入的内容\n        content: '',\n        // 多选组件使用的变量\n        checkboxVuale: [],\n        checkedValues: '',\n\n        itemList: [],\n        // 要加载多选的字典\n        dictCode: 'km_dict_category',\n        // 请求的url地址\n        url: {\n          rootList: \"/sys/category/loadTreeRoot\",\n          recentlyList: '/KM/kmDocVisitRecord/recentlyVisitDocs',\n          defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n          hotTopicReport: '/KM/HomePage/listRecommendTopic',\n          list: '/KM/kmDoc/listRecently',\n          previewKmDoc: '/KM/kmDoc/previewKmDoc',\n          downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n          addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n          delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\r\n\t\t  selectKeyword: '/KM/kmSearchRecord/selectKeyword',\r\n\t\t  abstractKmDoc: '/KM/kmDoc/abstractKmDoc',\n        },\r\n      visible1: false, // 控制模态框显示\n      buttonLoading: false, // 按钮加载状态\n      loading1: true, // 模态框加载状态\n      fullText: \"\", // 后端返回的完整文章摘要\n      displayedText: \"\", // 逐字显示的内容\n      typingSpeed: 50, // 打字速度（毫秒）\n      isGenerating: false, // 是否正在生成中\n      }\n    },\r\n  computed: {\n    // 动态模态框标题\n    modalTitle() {\n      return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\n    },\n  },\n    created() {\n      this.loadTree();\n      //设置全局token\n      Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n      window._CONFIG['token'] = Vue.prototype.token;\n      this.hotTopicReportFun();\n      this.loadDefaultBusinessTypeFunc();\n      this.initDict();\n      this.initFilterDict();\n\n      // 调用初始化自定义table列表函数\n      this.initColumns();\n\n      this.changeTitle(\"普通检索\");\n\n    },\n    methods: {\r\n\t\t\r\n\t    // 显示模态框\r\n\t    showModal(record) {\r\n\t      this.visible1 = true;\r\n\t      this.buttonLoading = true;\r\n\t      this.isGenerating = true; // 显示“生成中”提示\r\n\t\t  this.abstractKmDoc(record)\r\n\t\r\n\t    },\r\n\t\r\n\t\tabstractKmDoc(record){\r\n\t\t\tlet params = {\r\n\t\t\t  docId: record.id,\r\n\t\t\t};\r\n\t\t\tabstractKmDoc(this.url.abstractKmDoc, params).then(res => {\r\n\t\t\t  if (res.success) {\r\n\t\t\t\tthis.fullText = res.result\r\n\t\t\t\tthis.buttonLoading = false;\r\n\t\t\t\tthis.loading1 = false;\r\n\t\t\t\tthis.isGenerating = false; // 关闭“生成中”提示\r\n\t\t\t\t\t\r\n\t\t\t\t// 开始逐字显示\r\n\t\t\t\tthis.typeText();\r\n\t\t\t\t\r\n\t\t\t  } else {\r\n\t\t\t    this.$message.warning(res.message)\r\n\t\t\t  }\r\n\t\t\t}).finally(() => {\r\n\t\t\t})\r\n\t\t\t\r\n\t\t},\r\n\t\r\n\t    // 模拟调用后端接口\r\n\r\n\t\r\n\t    // 逐字显示内容\r\n\t    typeText() {\r\n\t      let index = 0;\r\n\t      const timer = setInterval(() => {\r\n\t        if (index < this.fullText.length) {\r\n\t          this.displayedText += this.fullText.charAt(index);\r\n\t          index++;\r\n\t        } else {\r\n\t          clearInterval(timer); // 停止定时器\r\n\t        }\r\n\t      }, this.typingSpeed);\r\n\t    },\r\n\t\r\n\t    // 关闭模态框\r\n\t    handleCancel1() {\r\n\t      this.visible1 = false;\r\n\t      this.displayedText = \"\"; // 清空内容\r\n\t      this.loading1 = true; // 重置加载状态\r\n\t      this.isGenerating = false; // 关闭“生成中”提示\r\n\t    },\r\n\t\t\r\n\t\t\r\n\t\t    onInput() {\r\n\t\t\t  console.log(\"=============\")\r\n\t\t      if (this.content) {\r\n\t\t        this.fetchSuggestions(this.content);\r\n\t\t      } else {\r\n\t\t        this.suggestions = [];\r\n\t\t      }\r\n\t\t    },\r\n\t\tfetchSuggestions(keyword) {\r\n\t\t\t\r\n\t\t\tconsole.log(\"2222\")\r\n\t\t\t\r\n\t\t      // 调用后端API获取推荐术语\r\n\t\t\t\tgetKeyword(this.url.selectKeyword+'?'+'keyword='+keyword, keyword).then(res => {\n\t\t\t\t  if (res.success) {\n\t\t\t\t\tif (res.result && res.result.length > 0) {\r\n\t\t\t\t\t\tlet a = []\r\n\t\t\t\t\t\tfor (var index = 0; index < res.result.length; index++) {\r\n\t\t\t\t\t\t\ta.push(res.result[index].corword)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\n\t\t\t\t\t  this.suggestions = a\n\t\t\t\t\t} else {\n\t\t\t\t\t  this.suggestions = []\n\t\t\t\t\t}\n\t\t\t\t  } else {\n\t\t\t\t\tthis.$message.warning(res.message)\n\t\t\t\t  }\n\t\t\t\t}).finally(() => {\n\t\t\t\t})\r\n\t\t    },\r\n\t\t    selectSuggestion(suggestion) {\r\n\t\t      this.content = suggestion;\r\n\t\t      this.suggestions = [];\r\n\t\t      // 这里可以触发搜索操作\r\n\t\t    },\r\n\t\t\r\n\t\t\r\n\t\t\n      // 加载filter字段选项\n      initFilterDict() {\n        this.filterOptions = [];\n\n        //优先从缓存中读取字典配置\n        // if (getDictItemsFromCache(this.dictCode)) {\n        let options = getDictItemsFromCache(this.filterDictCode)\n        if(options){\n          options.forEach((item, index) => {\n            let filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            this.filterOptions.push(filterOption);\n          });\n          console.log(this.filterOptions);\n          this.defColumns[2].filters =this.filterOptions;\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.filterDictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            console.log(options);\n            options.forEach((item, index) => {\n              let filterOption = {};\n              filterOption.text = item.title;\n              filterOption.value = item.value;\n              this.filterOptions.push(filterOption);\n            });\n            this.defColumns[2].filters =this.filterOptions;\n          }\n        })\n\n      },\n      // 是否全文检索\n      onCheckChange(e){\n        this.boolCheckChange=e.target.checked\n        console.log(`checked = ${e.target.checked}`);\n      },\n\n      // 查找一个节点的所有父节点\n      familyTree(treeData, id) {\n        var arrTree = [];\n        var forFn = function (arr, key) {\n          for (var i = 0; i < arr.length; i++) {\n            var item = arr[i]\n            if (item.key === key) {\n              if (item.parentId === \"0\") {\n                break;\n              } else {\n                console.log(\"父节点\", item.parentId);\n                arrTree.push(item.parentId);\n                forFn(treeData, item.parentId);\n              }\n              break\n            } else {\n              if (item.children != null) {\n                forFn(item.children, key);\n              }\n            }\n          }\n        }\n        forFn(treeData, id);\n        return arrTree\n      },\n\n      // 树节点选择触发\n      onCheck(checkedKeys, checkedNodes) {\n        if(checkedKeys.checked.length>1){\n         let checkKeys=checkedKeys.checked[1];\n          checkedKeys.checked=[];\n          checkedKeys.checked.push(checkKeys);\n          let checkNodesTitle= checkedNodes.checkedNodes[1];\n          checkedNodes.checkedNodes=[];\n          checkedNodes.checkedNodes.push(checkNodesTitle);\n        }\n        console.log(\"checkedKeys\",checkedKeys);\n        console.log(\"checkedNodes\",checkedNodes);\n        let temp = new Array();\n        let tempArray = new Array();\n        this.checkedArray = checkedKeys.checked;\n\n        for (let i = 0; i < this.checkedArray.length; i++) {\n          let arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n          temp = temp.concat(arrTemp);\n        }\n        // 数组去重\n        tempArray = [...new Set(temp)];\n        console.log(\"tempArray\", tempArray);\n        checkedKeys.halfChecked = tempArray;\n        let checkedTitle = checkedNodes.checkedNodes;\n        this.knowledgeTitle = \"\";\n        for (let i = 0; i < checkedTitle.length; i++) {\n          if (this.knowledgeTitle === \"\") {\n            this.knowledgeTitle = checkedTitle[i].data.props.title;\n          } else {\n            if (checkedTitle[i].data.props.title != null) {\n              this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[i].data.props.title;\n            }\n          }\n        }\n        if(this.knowledgeTitle ===\"\"){\n          this.knowledgeTitle=\"知识专题\"\n        }\n        let topicCodes=checkedTitle[0].data.props.code;\n        this.knowledgeTitleFun(topicCodes,this.topicCodesTree,this.knowledgeTitle);\n      },\n\n      // 加载树节点，获取树数据\n      loadTree() {\n        let params = {\n          async: false,\n          pcode: \"\"\n        };\n        getAction(this.url.rootList, params).then(res => {\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              this.treeData = res.result\n            } else {\n              this.treeData = []\n            }\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n        })\n      },\n\n      // 更改页面标题\n      changeTitle(title) {\n        let projectTitle = \"Java知识库\"\n        // 特殊处理\n        document.title = title + ' · ' + projectTitle\n\n      },\n\n      // 自定义列表  列设置更改事件\n      onColSettingsChange(checkedValues) {\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000)\n        this.settingColumns = checkedValues;\n        const cols = this.defColumns.filter(item => {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true\n          }\n          if (this.settingColumns.includes(item.dataIndex)) {\n            return true\n          }\n          return false\n        })\n        this.columns = cols;\n      },\n      // 自定义列表  初始化\n      initColumns() {\n        //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n        //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        let colSettings = Vue.ls.get(key);\n        if (colSettings == null || colSettings == undefined) {\n          let allSettingColumns = [];\n          this.defColumns.forEach(function (item, i, array) {\n            allSettingColumns.push(item.dataIndex);\n          })\n          this.settingColumns = allSettingColumns;\n          this.columns = this.defColumns;\n        } else {\n          this.settingColumns = colSettings;\n          const cols = this.defColumns.filter(item => {\n            if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n              return true;\n            }\n            if (colSettings.includes(item.dataIndex)) {\n              return true;\n            }\n            return false;\n          })\n          this.columns = cols;\n        }\n      },\n\n      // 加载 分类数据\n      initDict() {\n        this.options = [];\n\n        //优先从缓存中读取字典配置\n        if (getDictItemsFromCache(this.dictCode)) {\n          let options = getDictItemsFromCache(this.dictCode)\n          options.forEach((item, index) => {\n            let person = {};\n            person.label = item.title;\n            person.value = item.value;\n            this.options.push(person);\n          });\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            options.forEach((item, index) => {\n              let person = {};\n              person.label = item.title;\n              person.value = item.value;\n              this.options.push(person);\n            });\n          }\n        })\n\n      },\n\n      // 多选框选择触发\n      onChange(checkedValues) {\n        this.checkedValues = checkedValues.toString();\n        this.checkboxVuale = checkedValues;\n        console.log('checked = ', checkedValues);\n      },\n      // 按回车键触发方法\n      pressEnterFun(e) {\n        this.$nextTick(() => {\n          this.searchDocFun();\n        })\n      },\n\n      //专题检索\n      knowledgeTitleFun(topicCodes,topicCodesTree,knowledgeTitle){\n        let params={};\n        params[\"topicCodes\"]=topicCodes;\n        params[\"topicCodesTree\"]=topicCodesTree;\n        params[\"knowledgeTitle\"]=knowledgeTitle;\n        // this.$router.push({name: 'RecommendTopicList',params:params});\n        this.$router.push({name: 'docSearch',params:params});\n      },\n\n      // 检索\n      searchDocFun() {\n        let params = {};\n        if (this.content !== \"\" && this.content != null) {\n          params['content'] = this.content;\n        }\n        if (this.checkedValues !== \"\" && this.checkedValues != null) {\n          params['category'] = this.checkedValues;\n        }\n        // 判断参数是否为空\n        if (this.empty(params)) {\n          params['column']=\"_score\";\n          params['order']=\"desc\";\n          params['boolCheckChange']=this.boolCheckChange;\n          if (params['content'] != null) {\n            params['content'] = params['content'].replace(/，/g, ',');\n          }\n          this.$router.push({name: 'docSearch', params: params});\n        } else {\n          this.$message.info(\"请输入搜索条件\");\n        }\n      },\n\n\n      loadDefaultBusinessTypeFunc(){\n        getAction(this.url.defaultBusinessTypeList).then(res => {\n          if (res.success) {\n            this.defaultBusinessTypeList = res.result;\n          } else {\n            this.$message.error(\"业务加载失败\");\n          }\n        })\n      },\n      // 热门专题\n      hotTopicReportFun() {\n        getAction(this.url.hotTopicReport).then(res => {\n          if (res.success) {\n            this.hotTopicReportList = res.result;\n          } else {\n            //this.$message.error(\"热门专题加载失败\");\n          }\n        })\n      },\n\n      //  判断对象是否为空\n      empty(obj) {\n        for (let key in obj) {\n          return true;\n        }\n        return false;\n      },\n\n      //批量下载\n      downloadKmDocBatch() {\n        console.log(\"批量下载\")\n        if (!this.url.downloadKmDoc) {\n          this.$message.error(\"请设置url.downloadKmDoc属性!\")\n          return\n        }\n        if (this.selectionRows.length <= 0) {\n          this.$message.warning('请选择一条记录！');\n          return;\n        } else {\n          var that = this;\n          this.$confirm({\n            title: \"确认下载\",\n            content: \"是否下载选中数据?\",\n            onOk: function () {\n              for (var i = 0; i < that.selectionRows.length; i++) {\n                let fileName = i;\n                downloadFileName(that.url.downloadKmDoc, {docId: that.selectionRows[i].id})\n              }\n              // that.loadData();\n              that.onClearSelected();\n            }\n          });\n        }\n      },\n\n      //访问业务类型\n      searchBusinessType(value){\n        let params = {};\n        params['businessTypes'] = value;\n        this.$router.push({name: 'docSearch', params: params});\n      },\n\n      // 显示预览窗口，初始化\n      previewKmDoc(record) {\n        //this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.PDFurl =  this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.title ='预览 - ' + record.title;\n        this.visible = true;\n        this.pdfLoading = true;\n        this.pdfShow = true;\n      },\n      //关闭预览窗口\n      handleCancel() {\n        this.visible = false;\n      },\n\n      //下载文件\n      downloadKmDoc(record) {\n        this.$notification.success({\n          message: '文件开始下载...',\n          duration: 1,\n        });\n        downloadFileName(this.url.downloadKmDoc, {docId: record.id})\n      },\n      //加收藏夹\n      addFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.addFavouriteKmDoc;\n        method = 'post';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"收藏成功!\");\n            // this.loadData();\n            record.favourite = 1;\n          } else {\n            this.$message.warning(\"收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n      //取消收藏夹\n      delFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.delFavouriteKmDoc;\n        method = 'delete';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"取消收藏成功!\");\n            // this.loadData();\n            record.favourite = 0;\n          } else {\n            this.$message.warning(\"取消收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n\n\n\n    }\n  }\n</script>\n\n<style>\n  @import \"~@assets/less/common.less\";\r\n  \r\n  \r\n  .suggestions-list {\r\n/*    position: absolute;\r\n    top: 100%;\r\n    left: 0;\r\n    right: 0;\r\n    margin-top: 5px;\r\n    padding: 0;\r\n    list-style: none; */\r\n\tposition: fixed;\r\n\twidth: 600px;\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    z-index: 1000;\r\n\tlist-style: none;\r\n  }\r\n  \r\n  .suggestion-item {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    color: #333;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease, transform 0.2s ease;\r\n\ttext-align: left;\r\n\tpadding: 10px 15px; /* 调整内边距，左侧留出更多空间 */\r\n  }\r\n  \r\n  .suggestion-item:hover {\r\n    background-color: #f8f9fa;\r\n    transform: translateX(5px);\r\n  }\r\n  \r\n  .suggestion-item:active {\r\n    background-color: #e9ecef;\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/* 按钮动画 */\r\n\t.ant-btn-primary {\r\n\t  transition: all 0.3s ease;\r\n\t}\r\n\t\r\n\t.ant-btn-primary:hover {\r\n\t  transform: scale(1.05);\r\n\t  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t}\r\n\t\r\n\t/* 模态框内容样式 */\r\n\t.content {\r\n\t  font-size: 16px;\r\n\t  line-height: 1.6;\r\n\t  color: #333;\r\n\t  padding: 20px;\r\n\t  background: #f9f9f9;\r\n\t  border-radius: 8px;\r\n\t  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\t\r\n\t/* 打字机效果 */\r\n\t@keyframes blink {\r\n\t  0%,\r\n\t  100% {\r\n\t    opacity: 1;\r\n\t  }\r\n\t  50% {\r\n\t    opacity: 0;\r\n\t  }\r\n\t}\r\n\t\r\n\t.content p::after {\r\n\t  content: \"|\";\r\n\t  animation: blink 1s infinite;\r\n\t  color: #1890ff;\r\n\t}\r\n\t\r\n\t/* 生成中提示动画 */\r\n\t@keyframes generating {\r\n\t  0% {\r\n\t    opacity: 0.5;\r\n\t  }\r\n\t  50% {\r\n\t    opacity: 1;\r\n\t  }\r\n\t  100% {\r\n\t    opacity: 0.5;\r\n\t  }\r\n\t}\r\n\t\r\n\t.generating-text {\r\n\t  animation: generating 1.5s infinite;\r\n\t  color: #1890ff;\r\n\t  font-weight: bold;\r\n\t}\n</style>\n\n"]}]}