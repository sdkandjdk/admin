{"remainingRequest":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\tools\\HeaderNotice.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\tools\\HeaderNotice.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["import { getAction, putAction } from '@/api/manage';\nimport ShowAnnouncement from './ShowAnnouncement';\nimport store from '@/store/';\nimport DynamicNotice from './DynamicNotice';\nexport default {\n  name: \"HeaderNotice\",\n  components: {\n    DynamicNotice: DynamicNotice,\n    ShowAnnouncement: ShowAnnouncement\n  },\n  data: function data() {\n    return {\n      loadding: false,\n      url: {\n        listCementByUser: \"/sys/annountCement/listByUser\",\n        editCementSend: \"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\n        queryById: \"/sys/annountCement/queryById\"\n      },\n      hovered: false,\n      announcement1: [],\n      announcement2: [],\n      msg1Count: \"0\",\n      msg2Count: \"0\",\n      msg1Title: \"通知(0)\",\n      msg2Title: \"\",\n      stopTimer: false,\n      websock: null,\n      lockReconnect: false,\n      heartCheck: null,\n      formData: {},\n      openPath: ''\n    };\n  },\n  computed: {\n    msgTotal: function msgTotal() {\n      return parseInt(this.msg1Count) + parseInt(this.msg2Count);\n    }\n  },\n  mounted: function mounted() {\n    this.loadData();\n    //this.timerFun();\n    this.initWebSocket();\n    // this.heartCheckFun();\n  },\n  destroyed: function destroyed() {\n    // 离开页面生命周期函数\n    this.websocketOnclose();\n  },\n  methods: {\n    timerFun: function timerFun() {\n      var _this = this;\n      this.stopTimer = false;\n      var myTimer = setInterval(function () {\n        // 停止定时器\n        if (_this.stopTimer == true) {\n          clearInterval(myTimer);\n          return;\n        }\n        _this.loadData();\n      }, 6000);\n    },\n    loadData: function loadData() {\n      var _this2 = this;\n      try {\n        // 获取系统消息\n        getAction(this.url.listCementByUser).then(function (res) {\n          if (res.success) {\n            _this2.announcement1 = res.result.anntMsgList;\n            _this2.msg1Count = res.result.anntMsgTotal;\n            _this2.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\n            _this2.announcement2 = res.result.sysMsgList;\n            _this2.msg2Count = res.result.sysMsgTotal;\n            _this2.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\n          }\n        }).catch(function (error) {\n          console.log(\"系统消息通知异常\", error); //这行打印permissionName is undefined\n          _this2.stopTimer = true;\n          console.log(\"清理timer\");\n        });\n      } catch (err) {\n        this.stopTimer = true;\n        console.log(\"通知异常\", err);\n      }\n    },\n    fetchNotice: function fetchNotice() {\n      var _this3 = this;\n      if (this.loadding) {\n        this.loadding = false;\n        return;\n      }\n      this.loadding = true;\n      setTimeout(function () {\n        _this3.loadding = false;\n      }, 200);\n    },\n    showAnnouncement: function showAnnouncement(record) {\n      var _this4 = this;\n      putAction(this.url.editCementSend, {\n        anntId: record.id\n      }).then(function (res) {\n        if (res.success) {\n          _this4.loadData();\n        }\n      });\n      this.hovered = false;\n      if (record.openType === 'component') {\n        this.openPath = record.openPage;\n        this.formData = {\n          id: record.busId\n        };\n        this.$refs.showDynamNotice.detail(record.openPage);\n      } else {\n        this.$refs.ShowAnnouncement.detail(record);\n      }\n    },\n    toMyAnnouncement: function toMyAnnouncement() {\n      this.$router.push({\n        path: '/isps/userAnnouncement'\n      });\n    },\n    modalFormOk: function modalFormOk() {},\n    handleHoverChange: function handleHoverChange(visible) {\n      this.hovered = visible;\n    },\n    initWebSocket: function initWebSocket() {\n      // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\n      var userId = store.getters.userInfo.id;\n      var url = window._CONFIG['domianURL'].replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\") + \"/websocket/\" + userId;\n      //console.log(url);\n      this.websock = new WebSocket(url);\n      this.websock.onopen = this.websocketOnopen;\n      this.websock.onerror = this.websocketOnerror;\n      this.websock.onmessage = this.websocketOnmessage;\n      this.websock.onclose = this.websocketOnclose;\n    },\n    websocketOnopen: function websocketOnopen() {\n      console.log(\"WebSocket连接成功\");\n      //心跳检测重置\n      //this.heartCheck.reset().start();\n    },\n    websocketOnerror: function websocketOnerror(e) {\n      console.log(\"WebSocket连接发生错误\");\n      this.reconnect();\n    },\n    websocketOnmessage: function websocketOnmessage(e) {\n      console.log(\"-----接收消息-------\", e.data);\n      var data = eval(\"(\" + e.data + \")\"); //解析对象\n      if (data.cmd == \"topic\") {\n        //系统通知\n        this.loadData();\n      } else if (data.cmd == \"user\") {\n        //用户消息\n        this.loadData();\n      }\n      //心跳检测重置\n      //this.heartCheck.reset().start();\n    },\n    websocketOnclose: function websocketOnclose(e) {\n      console.log(\"connection closed (\" + e + \")\");\n      if (e) {\n        console.log(\"connection closed (\" + e.code + \")\");\n      }\n      this.reconnect();\n    },\n    websocketSend: function websocketSend(text) {\n      // 数据发送\n      try {\n        this.websock.send(text);\n      } catch (err) {\n        console.log(\"send failed (\" + err.code + \")\");\n      }\n    },\n    openNotification: function openNotification(data) {\n      var _this5 = this;\n      var text = data.msgTxt;\n      var key = \"open\".concat(Date.now());\n      this.$notification.open({\n        message: '消息提醒',\n        placement: 'bottomRight',\n        description: text,\n        key: key,\n        btn: function btn(h) {\n          return h('a-button', {\n            props: {\n              type: 'primary',\n              size: 'small'\n            },\n            on: {\n              click: function click() {\n                return _this5.showDetail(key, data);\n              }\n            }\n          }, '查看详情');\n        }\n      });\n    },\n    reconnect: function reconnect() {\n      var that = this;\n      if (that.lockReconnect) return;\n      that.lockReconnect = true;\n      //没连接上会一直重连，设置延迟避免请求过多\n      setTimeout(function () {\n        console.info(\"尝试重连...\");\n        that.initWebSocket();\n        that.lockReconnect = false;\n      }, 5000);\n    },\n    heartCheckFun: function heartCheckFun() {\n      var that = this;\n      //心跳检测,每20s心跳一次\n      that.heartCheck = {\n        timeout: 20000,\n        timeoutObj: null,\n        serverTimeoutObj: null,\n        reset: function reset() {\n          clearTimeout(this.timeoutObj);\n          //clearTimeout(this.serverTimeoutObj);\n          return this;\n        },\n        start: function start() {\n          var self = this;\n          this.timeoutObj = setTimeout(function () {\n            //这里发送一个心跳，后端收到后，返回一个心跳消息，\n            //onmessage拿到返回的心跳就说明连接正常\n            that.websocketSend(\"HeartBeat\");\n            console.info(\"客户端发送心跳\");\n            //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\n            //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\n            //}, self.timeout)\n          }, this.timeout);\n        }\n      };\n    },\n    showDetail: function showDetail(key, data) {\n      var _this6 = this;\n      this.$notification.close(key);\n      var id = data.msgId;\n      getAction(this.url.queryById, {\n        id: id\n      }).then(function (res) {\n        if (res.success) {\n          var record = res.result;\n          _this6.showAnnouncement(record);\n        }\n      });\n    }\n  }\n};",{"version":3,"names":["getAction","putAction","ShowAnnouncement","store","DynamicNotice","name","components","data","loadding","url","listCementByUser","editCementSend","queryById","hovered","announcement1","announcement2","msg1Count","msg2Count","msg1Title","msg2Title","stopTimer","websock","lockReconnect","heartCheck","formData","openPath","computed","msgTotal","parseInt","mounted","loadData","initWebSocket","destroyed","websocketOnclose","methods","timerFun","_this","myTimer","setInterval","clearInterval","_this2","then","res","success","result","anntMsgList","anntMsgTotal","sysMsgList","sysMsgTotal","catch","error","console","log","err","fetchNotice","_this3","setTimeout","showAnnouncement","record","_this4","anntId","id","openType","openPage","busId","$refs","showDynamNotice","detail","toMyAnnouncement","$router","push","path","modalFormOk","handleHoverChange","visible","userId","getters","userInfo","window","_CONFIG","replace","WebSocket","onopen","websocketOnopen","onerror","websocketOnerror","onmessage","websocketOnmessage","onclose","e","reconnect","eval","cmd","code","websocketSend","text","send","openNotification","_this5","msgTxt","key","concat","Date","now","$notification","open","message","placement","description","btn","h","props","type","size","on","click","showDetail","that","info","heartCheckFun","timeout","timeoutObj","serverTimeoutObj","reset","clearTimeout","start","self","_this6","close","msgId"],"sources":["src/components/tools/HeaderNotice.vue"],"sourcesContent":["<template>\n  <a-popover\n    trigger=\"click\"\n    placement=\"bottomRight\"\n    :autoAdjustOverflow=\"true\"\n    :arrowPointAtCenter=\"true\"\n    overlayClassName=\"header-notice-wrapper\"\n    @visibleChange=\"handleHoverChange\"\n    :overlayStyle=\"{ width: '300px', top: '50px' }\">\n    <template slot=\"content\">\n      <a-spin :spinning=\"loadding\">\n        <a-tabs>\n          <a-tab-pane :tab=\"msg1Title\" key=\"1\">\n            <!--<a-list>\n              <a-list-item>\n                <a-list-item-meta title=\"你收到了 14 份新周报\" description=\"一年前\">\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/ThXAXghbEsBCCSDihZxY.png\"/>\n                </a-list-item-meta>\n              </a-list-item>\n              <a-list-item>\n                <a-list-item-meta title=\"你推荐的 IT大牛 已通过第三轮面试\" description=\"一年前\">\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/OKJXDXrmkNshAMvwtvhu.png\"/>\n                </a-list-item-meta>\n              </a-list-item>\n              <a-list-item>\n                <a-list-item-meta title=\"这种模板可以区分多种通知类型\" description=\"一年前\">\n                  <a-avatar style=\"background-color: white\" slot=\"avatar\" src=\"https://gw.alipayobjects.com/zos/rmsportal/kISTdvpyTAhtGxpovNWd.png\"/>\n                </a-list-item-meta>\n              </a-list-item>\n            </a-list>-->\n            <a-list>\n              <a-list-item :key=\"index\" v-for=\"(record, index) in announcement1\">\n                <div style=\"margin-left: 5%;width: 80%\">\n                  <p><a @click=\"showAnnouncement(record)\">{{ record.titile }}</a></p>\n                  <p style=\"color: rgba(0,0,0,.45);margin-bottom: 0\">{{ record.createTime }} 发布</p>\n                </div>\n                <div style=\"text-align: right\">\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'L'\" color=\"blue\">一般消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'M'\" color=\"orange\">重要消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'H'\" color=\"red\">紧急消息</a-tag>\n                </div>\n              </a-list-item>\n              <div style=\"margin-top: 5px;text-align: center\">\n                <a-button @click=\"toMyAnnouncement()\" type=\"dashed\" block>查看更多</a-button>\n              </div>\n            </a-list>\n          </a-tab-pane>\n          <a-tab-pane :tab=\"msg2Title\" key=\"2\">\n            <a-list>\n              <a-list-item :key=\"index\" v-for=\"(record, index) in announcement2\">\n                <div style=\"margin-left: 5%;width: 80%\">\n                  <p><a @click=\"showAnnouncement(record)\">{{ record.titile }}</a></p>\n                  <p style=\"color: rgba(0,0,0,.45);margin-bottom: 0\">{{ record.createTime }} 发布</p>\n                </div>\n                <div style=\"text-align: right\">\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'L'\" color=\"blue\">一般消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'M'\" color=\"orange\">重要消息</a-tag>\n                  <a-tag @click=\"showAnnouncement(record)\" v-if=\"record.priority === 'H'\" color=\"red\">紧急消息</a-tag>\n                </div>\n              </a-list-item>\n              <div style=\"margin-top: 5px;text-align: center\">\n                <a-button @click=\"toMyAnnouncement()\" type=\"dashed\" block>查看更多</a-button>\n              </div>\n            </a-list>\n          </a-tab-pane>\n        </a-tabs>\n      </a-spin>\n    </template>\n    <span @click=\"fetchNotice\" class=\"header-notice\">\n      <a-badge :count=\"msgTotal\">\n        <a-icon style=\"font-size: 16px; padding: 4px\" type=\"bell\" />\n      </a-badge>\n    </span>\n    <show-announcement ref=\"ShowAnnouncement\" @ok=\"modalFormOk\"></show-announcement>\n    <dynamic-notice ref=\"showDynamNotice\" :path=\"openPath\" :formData=\"formData\"/>\n  </a-popover>\n</template>\n\n<script>\n  import { getAction,putAction } from '@/api/manage'\n  import ShowAnnouncement from './ShowAnnouncement'\n  import store from '@/store/'\n  import DynamicNotice from './DynamicNotice'\n\n\n  export default {\n    name: \"HeaderNotice\",\n    components: {\n      DynamicNotice,\n      ShowAnnouncement,\n    },\n    data () {\n      return {\n        loadding: false,\n        url:{\n          listCementByUser:\"/sys/annountCement/listByUser\",\n          editCementSend:\"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\n          queryById:\"/sys/annountCement/queryById\",\n        },\n        hovered: false,\n        announcement1:[],\n        announcement2:[],\n        msg1Count:\"0\",\n        msg2Count:\"0\",\n        msg1Title:\"通知(0)\",\n        msg2Title:\"\",\n        stopTimer:false,\n        websock: null,\n        lockReconnect:false,\n        heartCheck:null,\n        formData:{},\n        openPath:''\n      }\n    },\n    computed:{\n      msgTotal () {\n        return parseInt(this.msg1Count)+parseInt(this.msg2Count);\n      }\n    },\n    mounted() {\n      this.loadData();\n      //this.timerFun();\n      this.initWebSocket();\n     // this.heartCheckFun();\n    },\n    destroyed: function () { // 离开页面生命周期函数\n      this.websocketOnclose();\n    },\n    methods: {\n      timerFun() {\n        this.stopTimer = false;\n        let myTimer = setInterval(()=>{\n          // 停止定时器\n          if (this.stopTimer == true) {\n            clearInterval(myTimer);\n            return;\n          }\n          this.loadData()\n        },6000)\n      },\n      loadData (){\n        try {\n          // 获取系统消息\n          getAction(this.url.listCementByUser).then((res) => {\n            if (res.success) {\n              this.announcement1 = res.result.anntMsgList;\n              this.msg1Count = res.result.anntMsgTotal;\n              this.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\n              this.announcement2 = res.result.sysMsgList;\n              this.msg2Count = res.result.sysMsgTotal;\n              this.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\n            }\n          }).catch(error => {\n            console.log(\"系统消息通知异常\",error);//这行打印permissionName is undefined\n            this.stopTimer = true;\n            console.log(\"清理timer\");\n          });\n        } catch (err) {\n          this.stopTimer = true;\n          console.log(\"通知异常\",err);\n        }\n      },\n      fetchNotice () {\n        if (this.loadding) {\n          this.loadding = false\n          return\n        }\n        this.loadding = true\n        setTimeout(() => {\n          this.loadding = false\n        }, 200)\n      },\n      showAnnouncement(record){\n        putAction(this.url.editCementSend,{anntId:record.id}).then((res)=>{\n          if(res.success){\n            this.loadData();\n          }\n        });\n        this.hovered = false;\n        if(record.openType==='component'){\n          this.openPath = record.openPage;\n          this.formData = {id:record.busId};\n          this.$refs.showDynamNotice.detail(record.openPage);\n        }else{\n          this.$refs.ShowAnnouncement.detail(record);\n        }\n      },\n      toMyAnnouncement(){\n        this.$router.push({\n          path: '/isps/userAnnouncement'\n        });\n      },\n      modalFormOk(){\n      },\n      handleHoverChange (visible) {\n        this.hovered = visible;\n      },\n\n      initWebSocket: function () {\n        // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\n        var userId = store.getters.userInfo.id;\n        var url = window._CONFIG['domianURL'].replace(\"https://\",\"wss://\").replace(\"http://\",\"ws://\")+\"/websocket/\"+userId;\n        //console.log(url);\n        this.websock = new WebSocket(url);\n        this.websock.onopen = this.websocketOnopen;\n        this.websock.onerror = this.websocketOnerror;\n        this.websock.onmessage = this.websocketOnmessage;\n        this.websock.onclose = this.websocketOnclose;\n      },\n      websocketOnopen: function () {\n        console.log(\"WebSocket连接成功\");\n        //心跳检测重置\n        //this.heartCheck.reset().start();\n      },\n      websocketOnerror: function (e) {\n        console.log(\"WebSocket连接发生错误\");\n        this.reconnect();\n      },\n      websocketOnmessage: function (e) {\n        console.log(\"-----接收消息-------\",e.data);\n        var data = eval(\"(\" + e.data + \")\"); //解析对象\n        if(data.cmd == \"topic\"){\n            //系统通知\n          this.loadData();\n        }else if(data.cmd == \"user\"){\n            //用户消息\n          this.loadData();\n        }\n        //心跳检测重置\n        //this.heartCheck.reset().start();\n      },\n      websocketOnclose: function (e) {\n        console.log(\"connection closed (\" + e + \")\");\n        if(e){\n          console.log(\"connection closed (\" + e.code + \")\");\n        }\n        this.reconnect();\n      },\n      websocketSend(text) { // 数据发送\n        try {\n          this.websock.send(text);\n        } catch (err) {\n          console.log(\"send failed (\" + err.code + \")\");\n        }\n      },\n\n      openNotification (data) {\n        var text = data.msgTxt;\n        const key = `open${Date.now()}`;\n        this.$notification.open({\n          message: '消息提醒',\n          placement:'bottomRight',\n          description: text,\n          key,\n          btn: (h)=>{\n            return h('a-button', {\n              props: {\n                type: 'primary',\n                size: 'small',\n              },\n              on: {\n                click: () => this.showDetail(key,data)\n              }\n            }, '查看详情')\n          },\n        });\n      },\n\n      reconnect() {\n        var that = this;\n        if(that.lockReconnect) return;\n        that.lockReconnect = true;\n        //没连接上会一直重连，设置延迟避免请求过多\n        setTimeout(function () {\n          console.info(\"尝试重连...\");\n          that.initWebSocket();\n          that.lockReconnect = false;\n        }, 5000);\n      },\n      heartCheckFun(){\n        var that = this;\n        //心跳检测,每20s心跳一次\n        that.heartCheck = {\n          timeout: 20000,\n          timeoutObj: null,\n          serverTimeoutObj: null,\n          reset: function(){\n            clearTimeout(this.timeoutObj);\n            //clearTimeout(this.serverTimeoutObj);\n            return this;\n          },\n          start: function(){\n            var self = this;\n            this.timeoutObj = setTimeout(function(){\n              //这里发送一个心跳，后端收到后，返回一个心跳消息，\n              //onmessage拿到返回的心跳就说明连接正常\n              that.websocketSend(\"HeartBeat\");\n              console.info(\"客户端发送心跳\");\n              //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\n              //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\n              //}, self.timeout)\n            }, this.timeout)\n          }\n        }\n      },\n\n\n      showDetail(key,data){\n        this.$notification.close(key);\n        var id = data.msgId;\n        getAction(this.url.queryById,{id:id}).then((res) => {\n          if (res.success) {\n            var record = res.result;\n            this.showAnnouncement(record);\n          }\n        })\n\n      },\n    }\n  }\n</script>\n\n<style lang=\"css\">\n  .header-notice-wrapper {\n    top: 50px !important;\n  }\n</style>\n<style lang=\"less\" scoped>\n  .header-notice{\n    display: inline-block;\n    transition: all 0.3s;\n\n    span {\n      vertical-align: initial;\n    }\n  }\n</style>"],"mappings":"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","ignoreList":[]}]}