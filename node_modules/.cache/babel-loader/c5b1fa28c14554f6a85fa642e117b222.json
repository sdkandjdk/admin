{"remainingRequest":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\知识库系统\\admin\\src\\views\\user\\LoginAccount.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\知识库系统\\admin\\src\\views\\user\\LoginAccount.vue","mtime":1709892836747},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { getAction } from '@/api/manage';\nimport Vue from 'vue';\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'LoginAccount',\n  data: function data() {\n    return {\n      requestCodeSuccess: false,\n      randCodeImage: '',\n      currdatetime: '',\n      loginType: 0,\n      model: {\n        username: '',\n        password: '',\n        inputCode: ''\n      },\n      validatorRules: {\n        username: [{\n          required: true,\n          message: '请输入账号!'\n        }, {\n          validator: this.handleUsernameOrEmail\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码!',\n          validator: 'click'\n        }],\n        inputCode: [{\n          required: true,\n          message: '请输入验证码!'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.handleChangeCheckCode();\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(['Login'])), {}, {\n    /**刷新验证码*/handleChangeCheckCode: function handleChangeCheckCode() {\n      var _this = this;\n      this.currdatetime = new Date().getTime();\n      this.model.inputCode = '';\n      getAction(\"/sys/randomImage/\".concat(this.currdatetime)).then(function (res) {\n        if (res.success) {\n          _this.randCodeImage = res.result;\n          _this.requestCodeSuccess = true;\n        } else {\n          _this.$message.error(res.message);\n          _this.requestCodeSuccess = false;\n        }\n      }).catch(function () {\n        _this.requestCodeSuccess = false;\n      });\n    },\n    // 判断登录类型\n    handleUsernameOrEmail: function handleUsernameOrEmail(rule, value, callback) {\n      var regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n      if (regex.test(value)) {\n        this.loginType = 0;\n      } else {\n        this.loginType = 1;\n      }\n      callback();\n    },\n    /**\n     * 验证字段\n     * @param arr\n     * @param callback\n     */\n    validateFields: function validateFields(arr, callback) {\n      var _this2 = this;\n      var promiseArray = [];\n      var _iterator = _createForOfIteratorHelper(arr),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var item = _step.value;\n          var p = new Promise(function (resolve, reject) {\n            _this2.$refs['form'].validateField(item, function (err) {\n              if (!err) {\n                resolve();\n              } else {\n                reject(err);\n              }\n            });\n          });\n          promiseArray.push(p);\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      Promise.all(promiseArray).then(function () {\n        callback();\n      }).catch(function (err) {\n        callback(err);\n      });\n    },\n    acceptUsername: function acceptUsername(username) {\n      this.model['username'] = username;\n    },\n    //账号密码登录\n    handleLogin: function handleLogin(rememberMe) {\n      var _this3 = this;\n      this.validateFields(['username', 'password', 'inputCode'], function (err) {\n        if (!err) {\n          var loginParams = {\n            username: _this3.model.username,\n            password: _this3.model.password,\n            captcha: _this3.model.inputCode,\n            checkKey: _this3.currdatetime,\n            remember_me: rememberMe\n          };\n          console.log(\"登录参数\", loginParams);\n          _this3.Login(loginParams).then(function (res) {\n            _this3.$emit('success', res.result);\n            _this3.model = {};\n          }).catch(function (err) {\n            _this3.$emit('fail', err);\n          });\n        } else {\n          _this3.$emit('validateFail');\n        }\n      });\n    }\n  })\n};",{"version":3,"names":["getAction","Vue","mapActions","name","data","requestCodeSuccess","randCodeImage","currdatetime","loginType","model","username","password","inputCode","validatorRules","required","message","validator","handleUsernameOrEmail","created","handleChangeCheckCode","methods","_objectSpread","_this","Date","getTime","concat","then","res","success","result","$message","error","catch","rule","value","callback","regex","test","validateFields","arr","_this2","promiseArray","_iterator","_createForOfIteratorHelper","_step","_loop","item","p","Promise","resolve","reject","$refs","validateField","err","push","s","n","done","e","f","all","acceptUsername","handleLogin","rememberMe","_this3","loginParams","captcha","checkKey","remember_me","console","log","Login","$emit"],"sources":["src/views/user/LoginAccount.vue"],"sourcesContent":["<template>\n    <div>\n      <a-form-model ref=\"form\" :model=\"model\" :rules=\"validatorRules\">\n        <a-form-model-item required prop=\"username\">\n          <a-input v-model=\"model.username\" size=\"large\" placeholder=\"请输入账号\">\n            <a-icon slot=\"prefix\" type=\"user\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n          </a-input>\n        </a-form-model-item>\n        <a-form-model-item required prop=\"password\">\n          <a-input v-model=\"model.password\" size=\"large\" type=\"password\" autocomplete=\"false\" placeholder=\"请输入密码\">\n            <a-icon slot=\"prefix\" type=\"lock\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n          </a-input>\n        </a-form-model-item>\n\n        <a-row :gutter=\"0\">\n          <a-col :span=\"16\">\n            <a-form-model-item required prop=\"inputCode\">\n              <a-input v-model=\"model.inputCode\" size=\"large\" type=\"text\" placeholder=\"请输入验证码\">\n                <a-icon slot=\"prefix\" type=\"smile\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n              </a-input>\n            </a-form-model-item>\n          </a-col>\n          <a-col :span=\"8\" style=\"text-align: right\">\n            <img v-if=\"requestCodeSuccess\" style=\"margin-top: 2px;\" :src=\"randCodeImage\" @click=\"handleChangeCheckCode\"/>\n            <img v-else style=\"margin-top: 2px;\" src=\"../../assets/checkcode.png\" @click=\"handleChangeCheckCode\"/>\n          </a-col>\n        </a-row>\n      </a-form-model>\n    </div>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n  import Vue from 'vue'\n  import { mapActions } from 'vuex'\n\n  export default {\n    name: 'LoginAccount',\n    data(){\n      return {\n        requestCodeSuccess: false,\n        randCodeImage: '',\n        currdatetime: '',\n        loginType: 0,\n        model:{\n          username: '',\n          password: '',\n          inputCode: ''\n        },\n        validatorRules:{\n          username: [\n            { required: true, message: '请输入账号!' },\n            { validator: this.handleUsernameOrEmail }\n          ],\n          password: [{\n            required: true, message: '请输入密码!', validator: 'click'\n          }],\n          inputCode: [{\n            required: true, message: '请输入验证码!'\n          }]\n        }\n\n      }\n    },\n    created() {\n      this.handleChangeCheckCode();\n    },\n    methods:{\n      ...mapActions(['Login']),\n      /**刷新验证码*/\n      handleChangeCheckCode(){\n        this.currdatetime = new Date().getTime();\n        this.model.inputCode = ''\n        getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\n          if(res.success){\n            this.randCodeImage = res.result\n            this.requestCodeSuccess=true\n          }else{\n            this.$message.error(res.message)\n            this.requestCodeSuccess=false\n          }\n        }).catch(()=>{\n          this.requestCodeSuccess=false\n        })\n      },\n      // 判断登录类型\n      handleUsernameOrEmail (rule, value, callback) {\n        const regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n        if (regex.test(value)) {\n          this.loginType = 0\n        } else {\n          this.loginType = 1\n        }\n        callback()\n      },\n      /**\n       * 验证字段\n       * @param arr\n       * @param callback\n       */\n      validateFields(arr, callback){\n        let promiseArray = []\n        for(let item of arr){\n          let p = new Promise((resolve, reject) => {\n            this.$refs['form'].validateField(item, (err)=>{\n              if(!err){\n                resolve();\n              }else{\n                reject(err);\n              }\n            })\n          });\n          promiseArray.push(p)\n        }\n        Promise.all(promiseArray).then(()=>{\n          callback()\n        }).catch(err=>{\n          callback(err)\n        })\n      },\n      acceptUsername(username){\n        this.model['username'] = username\n      },\n      //账号密码登录\n      handleLogin(rememberMe){\n        this.validateFields([ 'username', 'password', 'inputCode' ], (err)=>{\n          if(!err){\n            let loginParams = {\n              username: this.model.username,\n              password: this.model.password,\n              captcha: this.model.inputCode,\n              checkKey: this.currdatetime,\n              remember_me: rememberMe,\n            }\n            console.log(\"登录参数\", loginParams)\n            this.Login(loginParams).then((res) => {\n              this.$emit('success', res.result)\n              this.model = {}\n            }).catch((err) => {\n              this.$emit('fail', err)\n            });\n          }else{\n            this.$emit('validateFail')\n          }\n        })\n      }\n\n\n    }\n\n  }\n</script>\n\n<style scoped>\n\n</style>"],"mappings":"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","ignoreList":[]}]}