{"remainingRequest":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\dict\\JMultiSelectTag.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\dict\\JMultiSelectTag.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nexport default {\n  name: 'JMultiSelectTag',\n  props: {\n    dictCode: String,\n    placeholder: String,\n    maxTagCount: Number,\n    disabled: Boolean,\n    value: String,\n    type: String,\n    options: Array,\n    spliter: {\n      type: String,\n      required: false,\n      default: ','\n    },\n    popContainer: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      dictOptions: [],\n      tagType: \"\",\n      arrayValue: !this.value ? [] : this.value.split(this.spliter)\n    };\n  },\n  created: function created() {\n    if (!this.type || this.type === \"list_multi\") {\n      this.tagType = \"select\";\n    } else {\n      this.tagType = this.type;\n    }\n    //获取字典数据\n    //this.initDictData();\n  },\n  watch: {\n    options: function options(val) {\n      this.setCurrentDictOptions(val);\n    },\n    dictCode: {\n      immediate: true,\n      handler: function handler() {\n        this.initDictData();\n      }\n    },\n    value: function value(val) {\n      if (!val) {\n        this.arrayValue = [];\n      } else {\n        this.arrayValue = this.value.split(this.spliter);\n      }\n    }\n  },\n  methods: {\n    initDictData: function initDictData() {\n      var _this = this;\n      if (this.options && this.options.length > 0) {\n        this.dictOptions = _toConsumableArray(this.options);\n      } else {\n        //优先从缓存中读取字典配置\n        var cacheOption = getDictItemsFromCache(this.dictCode);\n        if (cacheOption && cacheOption.length > 0) {\n          this.dictOptions = cacheOption;\n          return;\n        }\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then(function (res) {\n          if (res.success) {\n            _this.dictOptions = res.result;\n          }\n        });\n      }\n    },\n    onChange: function onChange(selectedValue) {\n      this.$emit('change', selectedValue.join(this.spliter));\n    },\n    setCurrentDictOptions: function setCurrentDictOptions(dictOptions) {\n      this.dictOptions = dictOptions;\n    },\n    getCurrentDictOptions: function getCurrentDictOptions() {\n      return this.dictOptions;\n    },\n    getParentContainer: function getParentContainer(node) {\n      if (!this.popContainer) {\n        return node.parentNode;\n      } else {\n        return document.querySelector(this.popContainer);\n      }\n    },\n    // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n    filterOption: function filterOption(input, option) {\n      return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    } // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",{"version":3,"names":["ajaxGetDictItems","getDictItemsFromCache","name","props","dictCode","String","placeholder","maxTagCount","Number","disabled","Boolean","value","type","options","Array","spliter","required","default","popContainer","data","dictOptions","tagType","arrayValue","split","created","watch","val","setCurrentDictOptions","immediate","handler","initDictData","methods","_this","length","_toConsumableArray","cacheOption","then","res","success","result","onChange","selectedValue","$emit","join","getCurrentDictOptions","getParentContainer","node","parentNode","document","querySelector","filterOption","input","option","componentOptions","children","text","toLowerCase","indexOf","model","prop","event"],"sources":["src/components/dict/JMultiSelectTag.vue"],"sourcesContent":["<template>\n  <a-checkbox-group v-if=\"tagType=='checkbox'\" @change=\"onChange\" :value=\"arrayValue\" :disabled=\"disabled\">\n    <a-checkbox v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text || item.label }}</a-checkbox>\n  </a-checkbox-group>\n\n  <a-select\n    v-else-if=\"tagType=='select'\"\n    :value=\"arrayValue\"\n    @change=\"onChange\"\n    :disabled=\"disabled\"\n    mode=\"multiple\"\n    :maxTagCount=\"maxTagCount\"\n    :placeholder=\"placeholder\"\n    :getPopupContainer=\"getParentContainer\"\n    optionFilterProp=\"children\"\n    :filterOption=\"filterOption\"\n    allowClear>\n    <a-select-option\n      v-for=\"(item,index) in dictOptions\"\n      :key=\"index\"\n      :value=\"item.value\">\n      <span style=\"display: inline-block;width: 100%\" :title=\" item.text || item.label \">\n        {{ item.text || item.label }}\n      </span>\n    </a-select-option>\n  </a-select>\n\n</template>\n\n<script>\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\n  export default {\n    name: 'JMultiSelectTag',\n    props: {\n      dictCode: String,\n      placeholder: String,\n      maxTagCount:Number,\n      disabled: Boolean,\n      value: String,\n      type: String,\n      options:Array,\n      spliter:{\n        type: String,\n        required: false,\n        default: ','\n      },\n      popContainer:{\n        type:String,\n        default:'',\n        required:false\n      },\n    },\n    data() {\n      return {\n        dictOptions: [],\n        tagType:\"\",\n        arrayValue:!this.value?[]:this.value.split(this.spliter)\n      }\n    },\n    created() {\n      if(!this.type || this.type===\"list_multi\"){\n        this.tagType = \"select\"\n      }else{\n        this.tagType = this.type\n      }\n      //获取字典数据\n      //this.initDictData();\n    },\n    watch:{\n      options: function(val){\n        this.setCurrentDictOptions(val);\n      },\n      dictCode:{\n        immediate:true,\n        handler() {\n          this.initDictData()\n        },\n      },\n      value (val) {\n        if(!val){\n          this.arrayValue = []\n        }else{\n          this.arrayValue = this.value.split(this.spliter)\n        }\n      }\n    },\n    methods: {\n      initDictData() {\n        if(this.options && this.options.length>0){\n          this.dictOptions = [...this.options]\n        }else{\n          //优先从缓存中读取字典配置\n          let cacheOption = getDictItemsFromCache(this.dictCode)\n          if(cacheOption && cacheOption.length>0){\n            this.dictOptions = cacheOption\n            return\n          }\n          //根据字典Code, 初始化字典数组\n          ajaxGetDictItems(this.dictCode, null).then((res) => {\n            if (res.success) {\n              this.dictOptions = res.result;\n            }\n          })\n        }\n\n      },\n      onChange (selectedValue) {\n        this.$emit('change', selectedValue.join(this.spliter));\n      },\n      setCurrentDictOptions(dictOptions){\n        this.dictOptions = dictOptions\n      },\n      getCurrentDictOptions(){\n        return this.dictOptions\n      },\n      getParentContainer(node){\n        if(!this.popContainer){\n          return node.parentNode\n        }else{\n          return document.querySelector(this.popContainer)\n        }\n      },\n      // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n      filterOption(input, option) {\n        return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      }\n      // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n    },\n    model: {\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n"],"mappings":";;;;;;AA8BA,SAAAA,gBAAA,EAAAC,qBAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACAC,QAAA,EAAAC,MAAA;IACAC,WAAA,EAAAD,MAAA;IACAE,WAAA,EAAAC,MAAA;IACAC,QAAA,EAAAC,OAAA;IACAC,KAAA,EAAAN,MAAA;IACAO,IAAA,EAAAP,MAAA;IACAQ,OAAA,EAAAC,KAAA;IACAC,OAAA;MACAH,IAAA,EAAAP,MAAA;MACAW,QAAA;MACAC,OAAA;IACA;IACAC,YAAA;MACAN,IAAA,EAAAP,MAAA;MACAY,OAAA;MACAD,QAAA;IACA;EACA;EACAG,IAAA,WAAAA,KAAA;IACA;MACAC,WAAA;MACAC,OAAA;MACAC,UAAA,QAAAX,KAAA,aAAAA,KAAA,CAAAY,KAAA,MAAAR,OAAA;IACA;EACA;EACAS,OAAA,WAAAA,QAAA;IACA,UAAAZ,IAAA,SAAAA,IAAA;MACA,KAAAS,OAAA;IACA;MACA,KAAAA,OAAA,QAAAT,IAAA;IACA;IACA;IACA;EACA;EACAa,KAAA;IACAZ,OAAA,WAAAA,QAAAa,GAAA;MACA,KAAAC,qBAAA,CAAAD,GAAA;IACA;IACAtB,QAAA;MACAwB,SAAA;MACAC,OAAA,WAAAA,QAAA;QACA,KAAAC,YAAA;MACA;IACA;IACAnB,KAAA,WAAAA,MAAAe,GAAA;MACA,KAAAA,GAAA;QACA,KAAAJ,UAAA;MACA;QACA,KAAAA,UAAA,QAAAX,KAAA,CAAAY,KAAA,MAAAR,OAAA;MACA;IACA;EACA;EACAgB,OAAA;IACAD,YAAA,WAAAA,aAAA;MAAA,IAAAE,KAAA;MACA,SAAAnB,OAAA,SAAAA,OAAA,CAAAoB,MAAA;QACA,KAAAb,WAAA,GAAAc,kBAAA,MAAArB,OAAA;MACA;QACA;QACA,IAAAsB,WAAA,GAAAlC,qBAAA,MAAAG,QAAA;QACA,IAAA+B,WAAA,IAAAA,WAAA,CAAAF,MAAA;UACA,KAAAb,WAAA,GAAAe,WAAA;UACA;QACA;QACA;QACAnC,gBAAA,MAAAI,QAAA,QAAAgC,IAAA,WAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,OAAA;YACAN,KAAA,CAAAZ,WAAA,GAAAiB,GAAA,CAAAE,MAAA;UACA;QACA;MACA;IAEA;IACAC,QAAA,WAAAA,SAAAC,aAAA;MACA,KAAAC,KAAA,WAAAD,aAAA,CAAAE,IAAA,MAAA5B,OAAA;IACA;IACAY,qBAAA,WAAAA,sBAAAP,WAAA;MACA,KAAAA,WAAA,GAAAA,WAAA;IACA;IACAwB,qBAAA,WAAAA,sBAAA;MACA,YAAAxB,WAAA;IACA;IACAyB,kBAAA,WAAAA,mBAAAC,IAAA;MACA,UAAA5B,YAAA;QACA,OAAA4B,IAAA,CAAAC,UAAA;MACA;QACA,OAAAC,QAAA,CAAAC,aAAA,MAAA/B,YAAA;MACA;IACA;IACA;IACAgC,YAAA,WAAAA,aAAAC,KAAA,EAAAC,MAAA;MACA,OAAAA,MAAA,CAAAC,gBAAA,CAAAC,QAAA,IAAAA,QAAA,IAAAC,IAAA,CAAAC,WAAA,GAAAC,OAAA,CAAAN,KAAA,CAAAK,WAAA;IACA,EACA;EACA;EACAE,KAAA;IACAC,IAAA;IACAC,KAAA;EACA;AACA","ignoreList":[]}]}