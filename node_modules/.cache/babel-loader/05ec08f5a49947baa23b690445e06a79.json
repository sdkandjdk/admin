{"remainingRequest":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\jeecg\\JEasyCron\\validator.js","dependencies":[{"path":"F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\jeecg\\JEasyCron\\validator.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1709701151904}],"contextDependencies":[],"result":["import CronParser from 'cron-parser';\nimport { replaceWeekName } from './tabs/const';\nexport default (function (rule, value, callback) {\n  // 没填写就不校验\n  if (!value) {\n    callback();\n    return true;\n  }\n  var values = value.split(' ').filter(function (item) {\n    return !!item;\n  });\n  if (values.length > 7) {\n    callback(new Error('Cron表达式最多7项！'));\n    return false;\n  }\n  // 检查第7项\n  var e = value;\n  if (values.length === 7) {\n    var year = replaceWeekName(values[6]);\n    if (year !== '*' && year !== '?') {\n      var yearValues = [];\n      if (year.indexOf('-') >= 0) {\n        yearValues = year.split('-');\n      } else if (year.indexOf('/')) {\n        yearValues = year.split('/');\n      } else {\n        yearValues = [year];\n      }\n      // console.info(yearValues)\n      // 判断是否都是数字\n      var checkYear = yearValues.some(function (item) {\n        return isNaN(item);\n      });\n      if (checkYear) {\n        callback(new Error('Cron表达式参数[年]错误：' + year));\n        return false;\n      }\n    }\n    // 取其中的前六项\n    e = values.slice(0, 6).join(' ');\n  }\n  // 6位 没有年\n  // 5位没有秒、年\n  var result = true;\n  try {\n    var iter = CronParser.parseExpression(e);\n    iter.next();\n    callback();\n  } catch (e) {\n    callback(new Error('Cron表达式错误：' + e));\n    result = false;\n  }\n  return result;\n});",{"version":3,"names":["CronParser","replaceWeekName","rule","value","callback","values","split","filter","item","length","Error","e","year","yearValues","indexOf","checkYear","some","isNaN","slice","join","result","iter","parseExpression","next"],"sources":["F:/workspace/3月/知识库系统/admin/src/components/jeecg/JEasyCron/validator.js"],"sourcesContent":["import CronParser from 'cron-parser'\nimport { replaceWeekName } from './tabs/const'\n\nexport default (rule, value, callback) => {\n  // 没填写就不校验\n  if (!value) {\n    callback()\n    return true\n  }\n  const values = value.split(' ').filter(item => !!item)\n  if (values.length > 7) {\n    callback(new Error('Cron表达式最多7项！'))\n    return false\n  }\n  // 检查第7项\n  let e = value\n  if (values.length === 7) {\n    const year = replaceWeekName(values[6])\n    if (year !== '*' && year !== '?') {\n      let yearValues = []\n      if (year.indexOf('-') >= 0) {\n        yearValues = year.split('-')\n      } else if (year.indexOf('/')) {\n        yearValues = year.split('/')\n      } else {\n        yearValues = [year]\n      }\n      // console.info(yearValues)\n      // 判断是否都是数字\n      const checkYear = yearValues.some(item => isNaN(item))\n      if (checkYear) {\n        callback(new Error('Cron表达式参数[年]错误：' + year))\n        return false\n      }\n    }\n    // 取其中的前六项\n    e = values.slice(0, 6).join(' ')\n  }\n  // 6位 没有年\n  // 5位没有秒、年\n  let result = true\n  try {\n    const iter = CronParser.parseExpression(e)\n    iter.next()\n    callback()\n  } catch (e) {\n    callback(new Error('Cron表达式错误：' + e))\n    result = false\n  }\n  return result\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,aAAa;AACpC,SAASC,eAAe,QAAQ,cAAc;AAE9C,gBAAe,UAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAK;EACxC;EACA,IAAI,CAACD,KAAK,EAAE;IACVC,QAAQ,CAAC,CAAC;IACV,OAAO,IAAI;EACb;EACA,IAAMC,MAAM,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,UAAAC,IAAI;IAAA,OAAI,CAAC,CAACA,IAAI;EAAA,EAAC;EACtD,IAAIH,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;IACrBL,QAAQ,CAAC,IAAIM,KAAK,CAAC,cAAc,CAAC,CAAC;IACnC,OAAO,KAAK;EACd;EACA;EACA,IAAIC,CAAC,GAAGR,KAAK;EACb,IAAIE,MAAM,CAACI,MAAM,KAAK,CAAC,EAAE;IACvB,IAAMG,IAAI,GAAGX,eAAe,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC;IACvC,IAAIO,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,GAAG,EAAE;MAChC,IAAIC,UAAU,GAAG,EAAE;MACnB,IAAID,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAC1BD,UAAU,GAAGD,IAAI,CAACN,KAAK,CAAC,GAAG,CAAC;MAC9B,CAAC,MAAM,IAAIM,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC,EAAE;QAC5BD,UAAU,GAAGD,IAAI,CAACN,KAAK,CAAC,GAAG,CAAC;MAC9B,CAAC,MAAM;QACLO,UAAU,GAAG,CAACD,IAAI,CAAC;MACrB;MACA;MACA;MACA,IAAMG,SAAS,GAAGF,UAAU,CAACG,IAAI,CAAC,UAAAR,IAAI;QAAA,OAAIS,KAAK,CAACT,IAAI,CAAC;MAAA,EAAC;MACtD,IAAIO,SAAS,EAAE;QACbX,QAAQ,CAAC,IAAIM,KAAK,CAAC,iBAAiB,GAAGE,IAAI,CAAC,CAAC;QAC7C,OAAO,KAAK;MACd;IACF;IACA;IACAD,CAAC,GAAGN,MAAM,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAClC;EACA;EACA;EACA,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAI;IACF,IAAMC,IAAI,GAAGrB,UAAU,CAACsB,eAAe,CAACX,CAAC,CAAC;IAC1CU,IAAI,CAACE,IAAI,CAAC,CAAC;IACXnB,QAAQ,CAAC,CAAC;EACZ,CAAC,CAAC,OAAOO,CAAC,EAAE;IACVP,QAAQ,CAAC,IAAIM,KAAK,CAAC,YAAY,GAAGC,CAAC,CAAC,CAAC;IACrCS,MAAM,GAAG,KAAK;EAChB;EACA,OAAOA,MAAM;AACf,CAAC","ignoreList":[]}]}