{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work-25\\知识库系统\\admin\\src\\components\\jeecg\\JPopup.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\components\\jeecg\\JPopup.vue","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport JPopupOnlReport from './modal/JPopupOnlReport';\nexport default {\n  name: 'JPopup',\n  components: {\n    JPopupOnlReport: JPopupOnlReport\n  },\n  props: {\n    code: {\n      type: String,\n      default: '',\n      required: false\n    },\n    field: {\n      type: String,\n      default: '',\n      required: false\n    },\n    orgFields: {\n      type: String,\n      default: '',\n      required: false\n    },\n    destFields: {\n      type: String,\n      default: '',\n      required: false\n    },\n    /** 排序列，指定要排序的列，使用方式：列名=desc|asc */\n    sorter: {\n      type: String,\n      default: ''\n    },\n    width: {\n      type: Number,\n      default: 1200,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    value: {\n      type: String,\n      required: false\n    },\n    triggerChange: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    multi: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    //popup动态参数 支持系统变量语法\n    param: {\n      type: Object,\n      required: false,\n      default: function _default() {}\n    },\n    spliter: {\n      type: String,\n      required: false,\n      default: ','\n    },\n    /** 分组ID，用于将多个popup的请求合并到一起，不传不分组 */\n    groupId: String\n  },\n  data: function data() {\n    return {\n      showText: '',\n      title: '',\n      avalid: true\n    };\n  },\n  computed: {\n    uniqGroupId: function uniqGroupId() {\n      if (this.groupId) {\n        var groupId = this.groupId,\n          code = this.code,\n          field = this.field,\n          orgFields = this.orgFields,\n          destFields = this.destFields;\n        return \"\".concat(groupId, \"_\").concat(code, \"_\").concat(field, \"_\").concat(orgFields, \"_\").concat(destFields);\n      }\n    }\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler: function handler(val) {\n        if (!val) {\n          this.showText = '';\n        } else {\n          this.showText = val.split(this.spliter).join(',');\n        }\n      }\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    if (!this.orgFields || !this.destFields || !this.code) {\n      this.$message.error('popup参数未正确配置!');\n      this.avalid = false;\n    }\n    if (this.destFields.split(',').length != this.orgFields.split(',').length) {\n      this.$message.error('popup参数未正确配置,原始值和目标值数量不一致!');\n      this.avalid = false;\n    }\n  },\n  methods: {\n    openModal: function openModal() {\n      if (this.disabled === false) {\n        this.$refs.jPopupOnlReport.show();\n      }\n    },\n    handleEmpty: function handleEmpty() {\n      this.showText = '';\n      var destFieldsArr = this.destFields.split(',');\n      if (destFieldsArr.length === 0) {\n        return;\n      }\n      var res = {};\n      for (var i = 0; i < destFieldsArr.length; i++) {\n        res[destFieldsArr[i]] = '';\n      }\n      if (this.triggerChange) {\n        this.$emit('callback', res);\n      } else {\n        this.$emit('input', '', res);\n      }\n    },\n    callBack: function callBack(rows) {\n      // update--begin--autor:lvdandan-----date:20200630------for：多选时未带回多个值------\n      var orgFieldsArr = this.orgFields.split(',');\n      var destFieldsArr = this.destFields.split(',');\n      var resetText = false;\n      if (this.field && this.field.length > 0) {\n        this.showText = '';\n        resetText = true;\n      }\n      var res = {};\n      if (orgFieldsArr.length > 0) {\n        for (var i = 0; i < orgFieldsArr.length; i++) {\n          var tempDestArr = [];\n          var _iterator = _createForOfIteratorHelper(rows),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var rw = _step.value;\n              var val = rw[orgFieldsArr[i]];\n              if (!val) {\n                val = \"\";\n              }\n              tempDestArr.push(val);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          res[destFieldsArr[i]] = tempDestArr.join(\",\");\n        }\n        if (resetText === true) {\n          var tempText = [];\n          var _iterator2 = _createForOfIteratorHelper(rows),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _rw = _step2.value;\n              var _val = _rw[orgFieldsArr[destFieldsArr.indexOf(this.field)]];\n              if (!_val) {\n                _val = \"\";\n              }\n              tempText.push(_val);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          this.showText = tempText.join(\",\");\n        }\n        // update--end--autor:lvdandan-----date:20200630------for：多选时未带回多个值------\n      }\n      if (this.triggerChange) {\n        //v-dec时即triggerChange为true时 将整个对象给form页面 让他自己setFieldsValue\n        this.$emit('callback', res);\n      } else {\n        //v-model时 需要传一个参数field 表示当前这个字段 从而根据这个字段的顺序找到原始值\n        // this.$emit(\"input\",row[orgFieldsArr[destFieldsArr.indexOf(this.field)]])\n        var str = '';\n        if (this.showText) {\n          str = this.showText.split(',').join(this.spliter);\n        }\n        this.$emit('input', str, res);\n      }\n    }\n  }\n};",{"version":3,"names":["JPopupOnlReport","name","components","props","code","type","String","default","required","field","orgFields","destFields","sorter","width","Number","placeholder","value","triggerChange","Boolean","disabled","multi","param","Object","spliter","groupId","data","showText","title","avalid","computed","uniqGroupId","concat","watch","immediate","handler","val","split","join","created","mounted","$message","error","length","methods","openModal","$refs","jPopupOnlReport","show","handleEmpty","destFieldsArr","res","i","$emit","callBack","rows","orgFieldsArr","resetText","tempDestArr","_iterator","_createForOfIteratorHelper","_step","s","n","done","rw","push","err","e","f","tempText","_iterator2","_step2","indexOf","str"],"sources":["src/components/jeecg/JPopup.vue"],"sourcesContent":["<template>\n  <div class=\"components-input-demo-presuffix\" v-if=\"avalid\">\n    <!---->\n    <a-input @click=\"openModal\" :placeholder=\"placeholder\" v-model=\"showText\" readOnly :disabled=\"disabled\">\n      <a-icon slot=\"prefix\" type=\"cluster\" :title=\"title\"/>\n      <a-icon v-if=\"showText\" slot=\"suffix\" type=\"close-circle\" @click=\"handleEmpty\" title=\"清空\"/>\n    </a-input>\n\n    <j-popup-onl-report\n      ref=\"jPopupOnlReport\"\n      :code=\"code\"\n      :multi=\"multi\"\n      :sorter=\"sorter\"\n      :groupId=\"uniqGroupId\"\n      :param=\"param\"\n      @ok=\"callBack\"\n    />\n\n  </div>\n</template>\n\n<script>\n  import JPopupOnlReport from './modal/JPopupOnlReport'\n\n  export default {\n    name: 'JPopup',\n    components: {\n      JPopupOnlReport\n    },\n    props: {\n      code: {\n        type: String,\n        default: '',\n        required: false\n      },\n      field: {\n        type: String,\n        default: '',\n        required: false\n      },\n      orgFields: {\n        type: String,\n        default: '',\n        required: false\n      },\n      destFields: {\n        type: String,\n        default: '',\n        required: false\n      },\n      /** 排序列，指定要排序的列，使用方式：列名=desc|asc */\n      sorter: {\n        type: String,\n        default: ''\n      },\n      width: {\n        type: Number,\n        default: 1200,\n        required: false\n      },\n      placeholder: {\n        type: String,\n        default: '请选择',\n        required: false\n      },\n      value: {\n        type: String,\n        required: false\n      },\n      triggerChange: {\n        type: Boolean,\n        required: false,\n        default: false\n      },\n      disabled: {\n        type: Boolean,\n        required: false,\n        default: false\n      },\n      multi: {\n        type: Boolean,\n        required: false,\n        default: false\n      },\n      //popup动态参数 支持系统变量语法\n      param:{\n        type: Object,\n        required: false,\n        default: ()=>{}\n      },\n      spliter:{\n        type: String,\n        required: false,\n        default: ','\n      },\n      /** 分组ID，用于将多个popup的请求合并到一起，不传不分组 */\n      groupId: String\n\n    },\n    data() {\n      return {\n        showText: '',\n        title: '',\n        avalid: true\n      }\n    },\n    computed: {\n      uniqGroupId() {\n        if (this.groupId) {\n          let { groupId, code, field, orgFields, destFields } = this\n          return `${groupId}_${code}_${field}_${orgFields}_${destFields}`\n        }\n      }\n    },\n    watch: {\n      value: {\n        immediate: true,\n        handler: function(val) {\n          if (!val) {\n            this.showText = ''\n          } else {\n            this.showText = val.split(this.spliter).join(',')\n          }\n        }\n      }\n    },\n    created() {\n    },\n    mounted() {\n      if (!this.orgFields || !this.destFields || !this.code) {\n        this.$message.error('popup参数未正确配置!')\n        this.avalid = false\n      }\n      if (this.destFields.split(',').length != this.orgFields.split(',').length) {\n        this.$message.error('popup参数未正确配置,原始值和目标值数量不一致!')\n        this.avalid = false\n      }\n    },\n    methods: {\n      openModal() {\n        if (this.disabled === false) {\n          this.$refs.jPopupOnlReport.show()\n        }\n      },\n      handleEmpty() {\n        this.showText = ''\n        let destFieldsArr = this.destFields.split(',')\n        if (destFieldsArr.length === 0) {\n          return\n        }\n        let res = {}\n        for (let i = 0; i < destFieldsArr.length; i++) {\n          res[destFieldsArr[i]] = ''\n        }\n        if (this.triggerChange) {\n          this.$emit('callback', res)\n        } else {\n          this.$emit('input', '', res)\n        }\n      },\n      callBack(rows) {\n        // update--begin--autor:lvdandan-----date:20200630------for：多选时未带回多个值------\n        let orgFieldsArr = this.orgFields.split(',')\n        let destFieldsArr = this.destFields.split(',')\n        let resetText = false\n        if (this.field && this.field.length > 0) {\n          this.showText = ''\n          resetText = true\n        }\n        let res = {}\n        if (orgFieldsArr.length > 0) {\n          for (let i = 0; i < orgFieldsArr.length; i++) {\n            let tempDestArr = []\n            for(let rw of rows){\n              let val = rw[orgFieldsArr[i]]\n              if(!val){\n                val = \"\"\n              }\n              tempDestArr.push(val)\n            }\n            res[destFieldsArr[i]] = tempDestArr.join(\",\")\n          }\n          if (resetText === true) {\n            let tempText = []\n            for(let rw of rows){\n              let val = rw[orgFieldsArr[destFieldsArr.indexOf(this.field)]]\n              if(!val){\n                val = \"\"\n              }\n              tempText.push(val)\n            }\n            this.showText = tempText.join(\",\")\n          }\n          // update--end--autor:lvdandan-----date:20200630------for：多选时未带回多个值------\n        }\n        if (this.triggerChange) {\n          //v-dec时即triggerChange为true时 将整个对象给form页面 让他自己setFieldsValue\n          this.$emit('callback', res)\n        } else {\n          //v-model时 需要传一个参数field 表示当前这个字段 从而根据这个字段的顺序找到原始值\n          // this.$emit(\"input\",row[orgFieldsArr[destFieldsArr.indexOf(this.field)]])\n          let str = ''\n          if(this.showText){\n            str = this.showText.split(',').join(this.spliter)\n          }\n          this.$emit('input', str, res)\n        }\n      }\n    }\n  }\n</script>\n<style scoped>\n  .components-input-demo-presuffix .anticon-close-circle {\n    cursor: pointer;\n    color: #ccc;\n    transition: color 0.3s;\n    font-size: 12px;\n  }\n\n  .components-input-demo-presuffix .anticon-close-circle:hover {\n    color: #f5222d;\n  }\n\n  .components-input-demo-presuffix .anticon-close-circle:active {\n    color: #666;\n  }\n</style>"],"mappings":"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","ignoreList":[]}]}