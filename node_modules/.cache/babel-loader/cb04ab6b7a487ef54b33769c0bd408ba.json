{"remainingRequest":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCodeEditor.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCodeEditor.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["// 引入全局实例\nimport _CodeMirror from 'codemirror';\n\n// 核心样式\nimport 'codemirror/lib/codemirror.css';\n// 引入主题后还需要在 options 中指定主题才会生效 darcula  gruvbox-dark hopscotch  monokai\nimport 'codemirror/theme/panda-syntax.css';\n//提示css\nimport \"codemirror/addon/hint/show-hint.css\";\n\n// 需要引入具体的语法高亮库才会有对应的语法高亮效果\n// codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\n// 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\nimport 'codemirror/mode/javascript/javascript.js';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/xml/xml.js';\nimport 'codemirror/mode/clike/clike.js';\nimport 'codemirror/mode/markdown/markdown.js';\nimport 'codemirror/mode/python/python.js';\nimport 'codemirror/mode/r/r.js';\nimport 'codemirror/mode/shell/shell.js';\nimport 'codemirror/mode/sql/sql.js';\nimport 'codemirror/mode/swift/swift.js';\nimport 'codemirror/mode/vue/vue.js';\nimport { isIE11, isIE } from '@/utils/browser';\n\n// 尝试获取全局实例\nvar CodeMirror = window.CodeMirror || _CodeMirror;\nexport default {\n  name: 'JCodeEditor',\n  props: {\n    // 外部传入的内容，用于实现双向绑定\n    value: {\n      type: String,\n      default: ''\n    },\n    // 外部传入的语法类型\n    language: {\n      type: String,\n      default: null\n    },\n    languageChange: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    // 显示行号\n    lineNumbers: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示全屏按钮\n    fullScreen: {\n      type: Boolean,\n      default: false\n    },\n    // 全屏以后的z-index\n    zIndex: {\n      type: [Number, String],\n      default: 999\n    },\n    // 是否自适应高度，可以传String或Boolean\n    // 传 String 类型只能写\"!ie\" ，\n    // 填写这个字符串，代表其他浏览器自适应高度\n    // 唯独IE下不自适应高度，因为IE下不支持min、max-height样式\n    // 如果填写的不是\"!ie\"就视为true\n    autoHeight: {\n      type: [String, Boolean],\n      default: true\n    },\n    // 不自适应高度的情况下生效的固定高度\n    height: {\n      type: [String, Number],\n      default: '240px'\n    }\n  },\n  data: function data() {\n    return {\n      // 内部真实的内容\n      code: '',\n      iconType: 'fullscreen',\n      hasCode: false,\n      // 默认的语法类型\n      mode: 'javascript',\n      // 编辑器实例\n      coder: null,\n      // 默认配置\n      options: {\n        // 缩进格式\n        tabSize: 2,\n        // 主题，对应主题库 JS 需要提前引入\n        theme: 'panda-syntax',\n        line: true,\n        // extraKeys: {'Ctrl': 'autocomplete'},//自定义快捷键\n        hintOptions: {\n          tables: {\n            users: ['name', 'score', 'birthDate'],\n            countries: ['name', 'population', 'size']\n          }\n        }\n      },\n      // 支持切换的语法高亮类型，对应 JS 已经提前引入\n      // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\n      modes: [{\n        value: 'css',\n        label: 'CSS'\n      }, {\n        value: 'javascript',\n        label: 'Javascript'\n      }, {\n        value: 'html',\n        label: 'XML/HTML'\n      }, {\n        value: 'x-java',\n        label: 'Java'\n      }, {\n        value: 'x-objectivec',\n        label: 'Objective-C'\n      }, {\n        value: 'x-python',\n        label: 'Python'\n      }, {\n        value: 'x-rsrc',\n        label: 'R'\n      }, {\n        value: 'x-sh',\n        label: 'Shell'\n      }, {\n        value: 'x-sql',\n        label: 'SQL'\n      }, {\n        value: 'x-swift',\n        label: 'Swift'\n      }, {\n        value: 'x-vue',\n        label: 'Vue'\n      }, {\n        value: 'markdown',\n        label: 'Markdown'\n      }],\n      // code 编辑器 是否全屏\n      fullCoder: false\n    };\n  },\n  watch: {\n    fullCoder: {\n      handler: function handler(value) {\n        if (value) {\n          this.iconType = \"fullscreen-exit\";\n        } else {\n          this.iconType = \"fullscreen\";\n        }\n      }\n    },\n    // value: {\n    //   immediate: false,\n    //   handler(value) {\n    //     this._getCoder().then(() => {\n    //       this.coder.setValue(value)\n    //     })\n    //   }\n    // },\n    language: {\n      immediate: true,\n      handler: function handler(language) {\n        var _this2 = this;\n        this._getCoder().then(function () {\n          // 尝试从父容器获取语法类型\n          if (language) {\n            // 获取具体的语法类型对象\n            var modeObj = _this2._getLanguage(language);\n\n            // 判断父容器传入的语法是否被支持\n            if (modeObj) {\n              _this2.mode = modeObj.label;\n              _this2.coder.setOption('mode', \"text/\".concat(modeObj.value));\n            }\n          }\n        });\n      }\n    }\n  },\n  computed: {\n    placeholderShow: function placeholderShow() {\n      if (this.placeholder == null) {\n        return \"\\u8BF7\\u5728\\u6B64\\u8F93\\u5165\".concat(this.language, \"\\u4EE3\\u7801\");\n      } else {\n        return this.placeholder;\n      }\n    },\n    nullTipStyle: function nullTipStyle() {\n      if (this.lineNumbers) {\n        return {\n          left: '36px'\n        };\n      } else {\n        return {\n          left: '12px'\n        };\n      }\n    },\n    // coder 配置\n    coderOptions: function coderOptions() {\n      return {\n        tabSize: this.options.tabSize,\n        theme: this.options.theme,\n        lineNumbers: this.lineNumbers,\n        line: true,\n        hintOptions: this.options.hintOptions\n      };\n    },\n    isAutoHeight: function isAutoHeight() {\n      var autoHeight = this.autoHeight;\n      if (typeof autoHeight === 'string' && autoHeight.toLowerCase().trim() === '!ie') {\n        autoHeight = !(isIE() || isIE11());\n      } else {\n        autoHeight = true;\n      }\n      return autoHeight;\n    },\n    fullScreenParentProps: function fullScreenParentProps() {\n      var props = {\n        class: {\n          'full-screen-parent': true,\n          'full-screen': this.fullCoder,\n          'auto-height': this.isAutoHeight\n        },\n        style: {}\n      };\n      if (isIE() || isIE11()) {\n        props.style['height'] = '240px';\n      }\n      if (this.fullCoder) {\n        props.style['z-index'] = this.zIndex;\n      }\n      if (!this.isAutoHeight) {\n        props.style['height'] = typeof this.height === 'number' ? this.height + 'px' : this.height;\n      }\n      return props;\n    }\n  },\n  mounted: function mounted() {\n    // 初始化\n    this._initialize();\n  },\n  methods: {\n    // 初始化\n    _initialize: function _initialize() {\n      var _this3 = this;\n      // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\n      this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.coderOptions);\n      // 编辑器赋值\n      if (this.value || this.code) {\n        this.hasCode = true;\n        //this.coder.setValue(this.value || this.code)\n        this.setCodeContent(this.value || this.code);\n      } else {\n        this.coder.setValue('');\n        this.hasCode = false;\n      }\n      // 支持双向绑定\n      this.coder.on('change', function (coder) {\n        _this3.code = coder.getValue();\n        if (_this3.code) {\n          _this3.hasCode = true;\n        } else {\n          _this3.hasCode = false;\n        }\n        if (_this3.$emit) {\n          _this3.$emit('input', _this3.code);\n        }\n      });\n      this.coder.on('focus', function () {\n        _this3.hasCode = true;\n      });\n      this.coder.on('blur', function () {\n        if (_this3.code) {\n          _this3.hasCode = true;\n        } else {\n          _this3.hasCode = false;\n        }\n      });\n\n      /* this.coder.on('cursorActivity',()=>{\n         this.coder.showHint()\n       })*/\n    },\n    getCodeContent: function getCodeContent() {\n      return this.code;\n    },\n    setCodeContent: function setCodeContent(val) {\n      var _this4 = this;\n      setTimeout(function () {\n        if (!val) {\n          _this4.coder.setValue('');\n        } else {\n          _this4.coder.setValue(val);\n        }\n      }, 300);\n    },\n    // 获取当前语法类型\n    _getLanguage: function _getLanguage(language) {\n      // 在支持的语法类型列表中寻找传入的语法类型\n      return this.modes.find(function (mode) {\n        // 所有的值都忽略大小写，方便比较\n        var currentLanguage = language.toLowerCase();\n        var currentLabel = mode.label.toLowerCase();\n        var currentValue = mode.value.toLowerCase();\n\n        // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\n        return currentLabel === currentLanguage || currentValue === currentLanguage;\n      });\n    },\n    _getCoder: function _getCoder() {\n      var _this = this;\n      return new Promise(function (resolve) {\n        (function get() {\n          if (_this.coder) {\n            resolve(_this.coder);\n          } else {\n            setTimeout(get, 10);\n          }\n        })();\n      });\n    },\n    // 更改模式\n    changeMode: function changeMode(val) {\n      // 修改编辑器的语法配置\n      this.coder.setOption('mode', \"text/\".concat(val));\n\n      // 获取修改后的语法\n      var label = this._getLanguage(val).label.toLowerCase();\n\n      // 允许父容器通过以下函数监听当前的语法值\n      this.$emit('language-change', label);\n    },\n    nullTipClick: function nullTipClick() {\n      this.coder.focus();\n    }\n  }\n};",{"version":3,"names":["_CodeMirror","isIE11","isIE","CodeMirror","window","name","props","value","type","String","default","language","languageChange","Boolean","required","placeholder","lineNumbers","fullScreen","zIndex","Number","autoHeight","height","data","code","iconType","hasCode","mode","coder","options","tabSize","theme","line","hintOptions","tables","users","countries","modes","label","fullCoder","watch","handler","immediate","_this2","_getCoder","then","modeObj","_getLanguage","setOption","concat","computed","placeholderShow","nullTipStyle","left","coderOptions","isAutoHeight","toLowerCase","trim","fullScreenParentProps","class","style","mounted","_initialize","methods","_this3","fromTextArea","$refs","textarea","setCodeContent","setValue","on","getValue","$emit","getCodeContent","val","_this4","setTimeout","find","currentLanguage","currentLabel","currentValue","_this","Promise","resolve","get","changeMode","nullTipClick","focus"],"sources":["src/components/jeecg/JCodeEditor.vue"],"sourcesContent":["<template>\n  <div v-bind=\"fullScreenParentProps\">\n    <a-icon v-if=\"fullScreen\" class=\"full-screen-icon\" :type=\"iconType\" @click=\"()=>fullCoder=!fullCoder\"/>\n\n    <div class=\"code-editor-cust full-screen-child\">\n      <textarea ref=\"textarea\"></textarea>\n      <span @click=\"nullTipClick\" class=\"null-tip\" :class=\"{'null-tip-hidden':hasCode}\" :style=\"nullTipStyle\">{{ placeholderShow }}</span>\n      <template v-if=\"languageChange\">\n        <a-select v-model=\"mode\" size=\"small\" class=\"code-mode-select\" @change=\"changeMode\" placeholder=\"请选择主题\">\n          <a-select-option\n            v-for=\"mode in modes\"\n            :key=\"mode.value\"\n            :value=\"mode.value\">\n            {{ mode.label }}\n          </a-select-option>\n        </a-select>\n      </template>\n\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  // 引入全局实例\n  import _CodeMirror from 'codemirror'\n\n  // 核心样式\n  import 'codemirror/lib/codemirror.css'\n  // 引入主题后还需要在 options 中指定主题才会生效 darcula  gruvbox-dark hopscotch  monokai\n  import 'codemirror/theme/panda-syntax.css'\n  //提示css\n  import \"codemirror/addon/hint/show-hint.css\";\n\n  // 需要引入具体的语法高亮库才会有对应的语法高亮效果\n  // codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\n  // 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\n  import 'codemirror/mode/javascript/javascript.js'\n  import 'codemirror/mode/css/css.js'\n  import 'codemirror/mode/xml/xml.js'\n  import 'codemirror/mode/clike/clike.js'\n  import 'codemirror/mode/markdown/markdown.js'\n  import 'codemirror/mode/python/python.js'\n  import 'codemirror/mode/r/r.js'\n  import 'codemirror/mode/shell/shell.js'\n  import 'codemirror/mode/sql/sql.js'\n  import 'codemirror/mode/swift/swift.js'\n  import 'codemirror/mode/vue/vue.js'\n\n  import { isIE11, isIE } from '@/utils/browser'\n\n  // 尝试获取全局实例\n  const CodeMirror = window.CodeMirror || _CodeMirror\n\n  export default {\n    name: 'JCodeEditor',\n    props: {\n      // 外部传入的内容，用于实现双向绑定\n      value: {\n        type: String,\n        default: ''\n      },\n      // 外部传入的语法类型\n      language: {\n        type: String,\n        default: null\n      },\n     languageChange:{\n       type: Boolean,\n       default:false,\n       required:false\n     },\n      placeholder: {\n        type: String,\n        default: null\n      },\n      // 显示行号\n      lineNumbers: {\n        type: Boolean,\n        default: true\n      },\n      // 是否显示全屏按钮\n      fullScreen: {\n        type: Boolean,\n        default: false\n      },\n      // 全屏以后的z-index\n      zIndex: {\n        type: [Number, String],\n        default: 999\n      },\n      // 是否自适应高度，可以传String或Boolean\n      // 传 String 类型只能写\"!ie\" ，\n      // 填写这个字符串，代表其他浏览器自适应高度\n      // 唯独IE下不自适应高度，因为IE下不支持min、max-height样式\n      // 如果填写的不是\"!ie\"就视为true\n      autoHeight: {\n        type: [String, Boolean],\n        default: true\n      },\n      // 不自适应高度的情况下生效的固定高度\n      height: {\n        type: [String, Number],\n        default: '240px'\n      },\n    },\n    data () {\n      return {\n        // 内部真实的内容\n        code: '',\n        iconType: 'fullscreen',\n        hasCode:false,\n        // 默认的语法类型\n        mode: 'javascript',\n        // 编辑器实例\n        coder: null,\n        // 默认配置\n        options: {\n          // 缩进格式\n          tabSize: 2,\n          // 主题，对应主题库 JS 需要提前引入\n          theme: 'panda-syntax',\n          line: true,\n         // extraKeys: {'Ctrl': 'autocomplete'},//自定义快捷键\n          hintOptions: {\n            tables: {\n              users: ['name', 'score', 'birthDate'],\n              countries: ['name', 'population', 'size']\n            }\n          },\n        },\n        // 支持切换的语法高亮类型，对应 JS 已经提前引入\n        // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\n        modes: [{\n          value: 'css',\n          label: 'CSS'\n        }, {\n          value: 'javascript',\n          label: 'Javascript'\n        }, {\n          value: 'html',\n          label: 'XML/HTML'\n        }, {\n          value: 'x-java',\n          label: 'Java'\n        }, {\n          value: 'x-objectivec',\n          label: 'Objective-C'\n        }, {\n          value: 'x-python',\n          label: 'Python'\n        }, {\n          value: 'x-rsrc',\n          label: 'R'\n        }, {\n          value: 'x-sh',\n          label: 'Shell'\n        }, {\n          value: 'x-sql',\n          label: 'SQL'\n        }, {\n          value: 'x-swift',\n          label: 'Swift'\n        }, {\n          value: 'x-vue',\n          label: 'Vue'\n        }, {\n          value: 'markdown',\n          label: 'Markdown'\n        }],\n        // code 编辑器 是否全屏\n        fullCoder: false\n      }\n    },\n    watch: {\n      fullCoder:{\n        handler(value) {\n          if(value){\n            this.iconType=\"fullscreen-exit\"\n          }else{\n            this.iconType=\"fullscreen\"\n          }\n        }\n      },\n      // value: {\n      //   immediate: false,\n      //   handler(value) {\n      //     this._getCoder().then(() => {\n      //       this.coder.setValue(value)\n      //     })\n      //   }\n      // },\n      language: {\n        immediate: true,\n        handler(language) {\n          this._getCoder().then(() => {\n            // 尝试从父容器获取语法类型\n            if (language) {\n              // 获取具体的语法类型对象\n              let modeObj = this._getLanguage(language)\n\n              // 判断父容器传入的语法是否被支持\n              if (modeObj) {\n                this.mode = modeObj.label\n                this.coder.setOption('mode', `text/${modeObj.value}`)\n              }\n            }\n          })\n        }\n      }\n    },\n    computed: {\n      placeholderShow() {\n        if (this.placeholder == null) {\n          return `请在此输入${this.language}代码`\n        } else {\n          return this.placeholder\n        }\n      },\n      nullTipStyle(){\n        if (this.lineNumbers) {\n          return { left: '36px' }\n        } else {\n          return { left: '12px' }\n        }\n      },\n      // coder 配置\n      coderOptions() {\n        return {\n          tabSize: this.options.tabSize,\n          theme: this.options.theme,\n          lineNumbers: this.lineNumbers,\n          line: true,\n          hintOptions: this.options.hintOptions\n        }\n      },\n      isAutoHeight() {\n        let {autoHeight} = this\n        if (typeof autoHeight === 'string' && autoHeight.toLowerCase().trim() === '!ie') {\n          autoHeight = !(isIE() || isIE11())\n        } else {\n          autoHeight = true\n        }\n        return autoHeight\n      },\n      fullScreenParentProps() {\n        let props = {\n          class: {\n            'full-screen-parent': true,\n            'full-screen': this.fullCoder,\n            'auto-height': this.isAutoHeight\n          },\n          style: {}\n        }\n        if(isIE() || isIE11()){\n          props.style['height'] = '240px'\n        }\n        if (this.fullCoder) {\n          props.style['z-index'] = this.zIndex\n        }\n        if (!this.isAutoHeight) {\n          props.style['height'] = (typeof this.height === 'number' ? this.height + 'px' : this.height)\n        }\n        return props\n      }\n    },\n    mounted () {\n      // 初始化\n      this._initialize()\n    },\n    methods: {\n      // 初始化\n      _initialize () {\n        // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\n        this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.coderOptions)\n        // 编辑器赋值\n        if(this.value||this.code){\n          this.hasCode=true\n          //this.coder.setValue(this.value || this.code)\n          this.setCodeContent(this.value || this.code)\n        }else{\n          this.coder.setValue('')\n          this.hasCode=false\n        }\n        // 支持双向绑定\n        this.coder.on('change', (coder) => {\n          this.code = coder.getValue()\n          if(this.code){\n            this.hasCode=true\n          }else{\n            this.hasCode=false\n          }\n          if (this.$emit) {\n            this.$emit('input', this.code)\n          }\n        })\n        this.coder.on('focus', () => {\n          this.hasCode=true\n        })\n        this.coder.on('blur', () => {\n          if(this.code){\n            this.hasCode=true\n          }else{\n            this.hasCode=false\n          }\n        })\n\n       /* this.coder.on('cursorActivity',()=>{\n          this.coder.showHint()\n        })*/\n\n      },\n      getCodeContent(){\n        return this.code\n      },\n      setCodeContent(val){\n        setTimeout(()=>{\n          if(!val){\n            this.coder.setValue('')\n          }else{\n            this.coder.setValue(val)\n          }\n        },300)\n      },\n      // 获取当前语法类型\n      _getLanguage (language) {\n        // 在支持的语法类型列表中寻找传入的语法类型\n        return this.modes.find((mode) => {\n          // 所有的值都忽略大小写，方便比较\n          let currentLanguage = language.toLowerCase()\n          let currentLabel = mode.label.toLowerCase()\n          let currentValue = mode.value.toLowerCase()\n\n          // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\n          return currentLabel === currentLanguage || currentValue === currentLanguage\n        })\n      },\n      _getCoder() {\n        let _this = this\n        return new Promise((resolve) => {\n          (function get() {\n            if (_this.coder) {\n              resolve(_this.coder)\n            } else {\n              setTimeout(get, 10)\n            }\n          })()\n        })\n      },\n      // 更改模式\n      changeMode (val) {\n        // 修改编辑器的语法配置\n        this.coder.setOption('mode', `text/${val}`)\n\n        // 获取修改后的语法\n        let label = this._getLanguage(val).label.toLowerCase()\n\n        // 允许父容器通过以下函数监听当前的语法值\n        this.$emit('language-change', label)\n      },\n      nullTipClick(){\n        this.coder.focus()\n      }\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  .code-editor-cust{\n    flex-grow:1;\n    display:flex;\n    position:relative;\n    height:100%;\n    .CodeMirror{\n      flex-grow:1;\n      z-index:1;\n      .CodeMirror-code{\n        line-height:19px;\n      }\n\n    }\n    .code-mode-select{\n      position:absolute;\n      z-index:2;\n      right:10px;\n      top:10px;\n      max-width:130px;\n    }\n    .CodeMirror{\n      height: auto;\n      min-height:100%;\n    }\n    .null-tip{\n      position: absolute;\n      top: 4px;\n      left: 36px;\n      z-index: 10;\n      color: #ffffffc9;\n      line-height: initial;\n    }\n    .null-tip-hidden{\n      display: none;\n    }\n  }\n\n  /* 全屏样式 */\n  .full-screen-parent {\n    position: relative;\n\n    .full-screen-icon {\n      opacity: 0;\n      color: black;\n      width: 20px;\n      height: 20px;\n      line-height: 24px;\n      background-color: white;\n      position: absolute;\n      top: 2px;\n      right: 2px;\n      z-index: 9;\n      cursor: pointer;\n      transition: opacity 0.3s;\n    }\n\n    &:hover {\n      .full-screen-icon {\n        opacity: 1;\n\n        &:hover {\n          background-color: rgba(255, 255, 255, 0.88);\n        }\n      }\n    }\n\n    &.full-screen {\n      position: fixed;\n      top: 10px;\n      left: 10px;\n      width: calc(100% - 20px);\n      height: calc(100% - 20px);\n      padding: 10px;\n      background-color: #f5f5f5;\n\n      .full-screen-icon {\n        top: 12px;\n        right: 12px;\n      }\n\n      .full-screen-child {\n        height: 100%;\n        max-height: 100%;\n        min-height: 100%;\n      }\n    }\n\n    .full-screen-child {\n      height: 100%;\n    }\n\n    &.auto-height {\n      .full-screen-child {\n        min-height: 120px;\n        max-height: 320px;\n        height: unset;\n        overflow: hidden;\n      }\n\n      &.full-screen .full-screen-child {\n        height: 100%;\n        max-height: 100%;\n        min-height: 100%;\n      }\n    }\n\n  }\n\n.CodeMirror-cursor{\n  height:18.4px !important;\n}\n</style>"],"mappings":"AAuBA;AACA,OAAAA,WAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAAC,MAAA,EAAAC,IAAA;;AAEA;AACA,IAAAC,UAAA,GAAAC,MAAA,CAAAD,UAAA,IAAAH,WAAA;AAEA;EACAK,IAAA;EACAC,KAAA;IACA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACA;IACAC,QAAA;MACAH,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAE,cAAA;MACAJ,IAAA,EAAAK,OAAA;MACAH,OAAA;MACAI,QAAA;IACA;IACAC,WAAA;MACAP,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACA;IACAM,WAAA;MACAR,IAAA,EAAAK,OAAA;MACAH,OAAA;IACA;IACA;IACAO,UAAA;MACAT,IAAA,EAAAK,OAAA;MACAH,OAAA;IACA;IACA;IACAQ,MAAA;MACAV,IAAA,GAAAW,MAAA,EAAAV,MAAA;MACAC,OAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACAU,UAAA;MACAZ,IAAA,GAAAC,MAAA,EAAAI,OAAA;MACAH,OAAA;IACA;IACA;IACAW,MAAA;MACAb,IAAA,GAAAC,MAAA,EAAAU,MAAA;MACAT,OAAA;IACA;EACA;EACAY,IAAA,WAAAA,KAAA;IACA;MACA;MACAC,IAAA;MACAC,QAAA;MACAC,OAAA;MACA;MACAC,IAAA;MACA;MACAC,KAAA;MACA;MACAC,OAAA;QACA;QACAC,OAAA;QACA;QACAC,KAAA;QACAC,IAAA;QACA;QACAC,WAAA;UACAC,MAAA;YACAC,KAAA;YACAC,SAAA;UACA;QACA;MACA;MACA;MACA;MACAC,KAAA;QACA7B,KAAA;QACA8B,KAAA;MACA;QACA9B,KAAA;QACA8B,KAAA;MACA;QACA9B,KAAA;QACA8B,KAAA;MACA;QACA9B,KAAA;QACA8B,KAAA;MACA;QACA9B,KAAA;QACA8B,KAAA;MACA;QACA9B,KAAA;QACA8B,KAAA;MACA;QACA9B,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","ignoreList":[]}]}