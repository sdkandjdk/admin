{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work-25\\知识库系统\\admin\\src\\views\\system\\modules\\SysCheckRuleModal.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\views\\system\\modules\\SysCheckRuleModal.vue","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nimport pick from 'lodash.pick';\nimport { httpAction } from '@/api/manage';\nimport { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util';\nimport { FormTypes } from '@/utils/JEditableTableUtil';\nimport JEditableTable from '@comp/jeecg/JEditableTable';\nexport default {\n  name: 'SysCheckRuleModal',\n  components: {\n    JEditableTable: JEditableTable,\n    'my-action-button': {\n      props: {\n        rowEvent: Object,\n        allowEmpty: Boolean\n      },\n      methods: {\n        confirmIsShow: function confirmIsShow() {\n          var _this$rowEvent = this.rowEvent,\n            index = _this$rowEvent.index,\n            inputValues = _this$rowEvent.allValues.inputValues;\n          var value = inputValues[index];\n          return value.digits || value.pattern;\n        },\n        handleLineAdd: function handleLineAdd() {\n          var target = this.rowEvent.target;\n          target.add();\n        },\n        handleLineDelete: function handleLineDelete() {\n          var _this$rowEvent2 = this.rowEvent,\n            rowId = _this$rowEvent2.rowId,\n            target = _this$rowEvent2.target;\n          target.removeRows(rowId);\n        },\n        renderDeleteButton: function renderDeleteButton() {\n          var h = this.$createElement;\n          if (this.allowEmpty || this.rowEvent.index > 0) {\n            if (this.confirmIsShow()) {\n              return h(\"a-popconfirm\", {\n                \"attrs\": {\n                  \"title\": \"确定要删除吗？\"\n                },\n                \"on\": {\n                  \"confirm\": this.handleLineDelete\n                }\n              }, [h(\"a-button\", {\n                \"attrs\": {\n                  \"icon\": \"minus\"\n                }\n              })]);\n            } else {\n              return h(\"a-button\", {\n                \"attrs\": {\n                  \"icon\": \"minus\"\n                },\n                \"on\": {\n                  \"click\": this.handleLineDelete\n                }\n              });\n            }\n          }\n          return '';\n        }\n      },\n      render: function render() {\n        var h = arguments[0];\n        return h(\"div\", [h(\"a-button\", {\n          \"on\": {\n            \"click\": this.handleLineAdd\n          },\n          \"attrs\": {\n            \"icon\": \"plus\"\n          }\n        }), \"\\xA0\", this.renderDeleteButton()]);\n      }\n    }\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      },\n      confirmLoading: false,\n      validatorRules: {\n        ruleName: [{\n          required: true,\n          message: '请输入规则名称!'\n        }],\n        ruleCode: [{\n          required: true,\n          message: '请输入规则Code!'\n        }, {\n          validator: function validator(rule, value, callback) {\n            return validateDuplicateValue('sys_check_rule', 'rule_code', value, _this.model.id, callback);\n          }\n        }]\n      },\n      tabs: {\n        activeKey: 'design',\n        global: {\n          key: 'global',\n          columns: [{\n            title: '优先级',\n            key: 'priority',\n            width: '15%',\n            type: FormTypes.select,\n            defaultValue: '1',\n            options: [{\n              title: '优先运行',\n              value: '1'\n            }, {\n              title: '最后运行',\n              value: '0'\n            }],\n            validateRules: []\n          }, {\n            title: '规则（正则表达式）',\n            key: 'pattern',\n            width: '50%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '规则不能为空'\n            }, {\n              handler: this.validatePatternHandler\n            }]\n          }, {\n            title: '提示文本',\n            key: 'message',\n            width: '20%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '${title}不能为空'\n            }]\n          }, {\n            title: '操作',\n            key: 'action',\n            width: '15%',\n            slotName: 'action',\n            type: FormTypes.slot\n          }],\n          dataSource: []\n        },\n        design: {\n          key: 'design',\n          columns: [{\n            title: '位数',\n            key: 'digits',\n            width: '15%',\n            type: FormTypes.inputNumber,\n            validateRules: [{\n              required: true,\n              message: '${title}不能为空'\n            }, {\n              pattern: /^[1-9]\\d*$/,\n              message: '请输入零以上的正整数'\n            }]\n          }, {\n            title: '规则（正则表达式）',\n            key: 'pattern',\n            width: '50%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '规则不能为空'\n            }, {\n              handler: this.validatePatternHandler\n            }]\n          }, {\n            title: '提示文本',\n            key: 'message',\n            width: '20%',\n            type: FormTypes.input,\n            validateRules: [{\n              required: true,\n              message: '${title}不能为空'\n            }]\n          }, {\n            title: '操作',\n            key: 'action',\n            width: '15%',\n            slotName: 'action',\n            type: FormTypes.slot\n          }],\n          dataSource: []\n        }\n      },\n      url: {\n        add: '/sys/checkRule/add',\n        edit: '/sys/checkRule/edit'\n      }\n    };\n  },\n  created: function created() {},\n  methods: {\n    validatePatternHandler: function validatePatternHandler(type, value, row, column, callback, target) {\n      if (type === 'blur' || type === 'getValues') {\n        try {\n          new RegExp(value);\n          callback(true);\n        } catch (e) {\n          callback(false, '请输入正确的正则表达式');\n        }\n      } else {\n        callback(true); // 不填写或者填写 null 代表不进行任何操作\n      }\n    },\n    add: function add() {\n      this.edit({});\n    },\n    edit: function edit(record) {\n      var _this2 = this;\n      this.tabs.activeKey = this.tabs.design.key;\n      this.tabs.global.dataSource = [];\n      this.tabs.design.dataSource = [{\n        digits: '',\n        pattern: '',\n        message: ''\n      }];\n      this.visible = true;\n      this.$nextTick(function () {\n        _this2.$refs.form.resetFields();\n        _this2.model = Object.assign({}, record);\n\n        // 子表数据\n        var ruleJson = _this2.model.ruleJson;\n        if (ruleJson) {\n          var ruleList = JSON.parse(ruleJson);\n          // 筛选出全局规则和局部规则\n          var global = [],\n            design = [],\n            priority = '1';\n          ruleList.forEach(function (rule) {\n            if (rule.digits === '*') {\n              global.push(Object.assign(rule, {\n                priority: priority\n              }));\n            } else {\n              priority = '0';\n              design.push(rule);\n            }\n          });\n          _this2.tabs.global.dataSource = global;\n          _this2.tabs.design.dataSource = design;\n        }\n      });\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleOk: function handleOk() {\n      var _this3 = this;\n      Promise.all([\n      // 主表单校验\n      alwaysResolve(new Promise(function (resolve, reject) {\n        _this3.$refs.form.validate(function (ok, err) {\n          return ok ? resolve(_this3.model) : reject(err);\n        });\n      })),\n      // 局部规则子表校验\n      alwaysResolve(this.$refs.designTable.getValuesPromise),\n      // 全局规则子表校验\n      alwaysResolve(this.$refs.globalTable.getValuesPromise)]).then(function (results) {\n        var _results = _slicedToArray(results, 3),\n          mainResult = _results[0],\n          designResult = _results[1],\n          globalResult = _results[2];\n        if (mainResult.type === failedSymbol) {\n          return Promise.reject('主表校验未通过');\n        } else if (designResult.type === failedSymbol) {\n          _this3.tabs.activeKey = _this3.tabs.design.key;\n          return Promise.reject('局部规则子表校验未通过');\n        } else if (globalResult.type === failedSymbol) {\n          _this3.tabs.activeKey = _this3.tabs.global.key;\n          return Promise.reject('全局规则子表校验未通过');\n        } else {\n          // 所有校验已通过，这一步是整合数据\n          var mainValues = mainResult.data,\n            globalValues = globalResult.data,\n            designValues = designResult.data;\n\n          // 整合两个子表的数据\n          var firstGlobal = [],\n            afterGlobal = [];\n          globalValues.forEach(function (v) {\n            v.digits = '*';\n            if (v.priority === '1') {\n              firstGlobal.push(v);\n            } else {\n              afterGlobal.push(v);\n            }\n          });\n          var concatValues = firstGlobal.concat(designValues).concat(afterGlobal);\n          var subValues = concatValues.map(function (i) {\n            return pick(i, 'digits', 'pattern', 'message');\n          });\n\n          // 生成 formData，用于传入后台\n          var ruleJson = JSON.stringify(subValues);\n          var formData = Object.assign(_this3.model, mainValues, {\n            ruleJson: ruleJson\n          });\n\n          // 判断请求方式和请求地址，并发送请求\n          var method = 'post',\n            httpUrl = _this3.url.add;\n          if (_this3.model.id) {\n            method = 'put';\n            httpUrl = _this3.url.edit;\n          }\n          _this3.confirmLoading = true;\n          return httpAction(httpUrl, formData, method);\n        }\n      }).then(function (res) {\n        if (res.success) {\n          _this3.$message.success(res.message);\n          _this3.$emit('ok');\n          _this3.close();\n        } else {\n          _this3.$message.warning(res.message);\n        }\n      }).catch(function (e) {\n        console.error(e);\n      }).finally(function () {\n        _this3.confirmLoading = false;\n      });\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    }\n  }\n};",{"version":3,"names":["pick","httpAction","validateDuplicateValue","alwaysResolve","failedSymbol","FormTypes","JEditableTable","name","components","props","rowEvent","Object","allowEmpty","Boolean","methods","confirmIsShow","_this$rowEvent","index","inputValues","allValues","value","digits","pattern","handleLineAdd","target","add","handleLineDelete","_this$rowEvent2","rowId","removeRows","renderDeleteButton","h","$createElement","render","arguments","data","_this","title","visible","model","labelCol","xs","span","sm","wrapperCol","confirmLoading","validatorRules","ruleName","required","message","ruleCode","validator","rule","callback","id","tabs","activeKey","global","key","columns","width","type","select","defaultValue","options","validateRules","input","handler","validatePatternHandler","slotName","slot","dataSource","design","inputNumber","url","edit","created","row","column","RegExp","e","record","_this2","$nextTick","$refs","form","resetFields","assign","ruleJson","ruleList","JSON","parse","priority","forEach","push","close","$emit","handleOk","_this3","Promise","all","resolve","reject","validate","ok","err","designTable","getValuesPromise","globalTable","then","results","_results","_slicedToArray","mainResult","designResult","globalResult","mainValues","globalValues","designValues","firstGlobal","afterGlobal","v","concatValues","concat","subValues","map","i","stringify","formData","method","httpUrl","res","success","$message","warning","catch","console","error","finally","handleCancel"],"sources":["src/views/system/modules/SysCheckRuleModal.vue"],"sourcesContent":["<template>\n  <a-modal\n    :title=\"title\"\n    :width=\"1000\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <a-spin :spinning=\"confirmLoading\">\n      <a-form-model ref=\"form\" :model=\"model\" :rules=\"validatorRules\">\n\n        <a-form-model-item :labelCol=\"labelCol\"  :wrapperCol=\"wrapperCol\" label=\"规则名称\" prop=\"ruleName\" >\n          <a-input placeholder=\"请输入规则名称\" v-model=\"model.ruleName\"/>\n        </a-form-model-item>\n        <a-form-model-item :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" label=\"规则Code\" prop=\"ruleCode\">\n          <a-input placeholder=\"请输入规则Code\" v-model=\"model.ruleCode\"/>\n        </a-form-model-item>\n        <a-form-model-item :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" label=\"规则描述\" prop=\"ruleDescription\">\n          <a-textarea placeholder=\"请输入规则描述\" v-model=\"model.ruleDescription\"/>\n        </a-form-model-item>\n\n      </a-form-model>\n      <!-- 规则设计 -->\n      <a-tabs v-model=\"tabs.activeKey\">\n        <a-tab-pane tab=\"局部规则\" :key=\"tabs.design.key\" forceRender>\n          <a-alert type=\"info\" showIcon message=\"局部规则按照你输入的位数有序的校验。\"/>\n          <j-editable-table ref=\"designTable\" dragSort rowNumber  :maxHeight=\"240\" :columns=\"tabs.design.columns\" :dataSource=\"tabs.design.dataSource\" style=\"margin-top: 8px;\">\n\n            <template #action=\"props\">\n              <my-action-button :rowEvent=\"props\"/>\n            </template>\n\n          </j-editable-table>\n        </a-tab-pane>\n\n        <a-tab-pane tab=\"全局规则\" :key=\"tabs.global.key\" forceRender>\n          <j-editable-table ref=\"globalTable\" dragSort rowNumber actionButton :maxHeight=\"240\" :columns=\"tabs.global.columns\"  :dataSource=\"tabs.global.dataSource\">\n\n            <template #actionButtonAfter>\n              <a-alert type=\"info\" showIcon message=\"全局规则可校验用户输入的所有字符；全局规则的优先级比局部规则的要高。\" style=\"margin-bottom: 8px;\"/>\n            </template>\n\n            <template #action=\"props\">\n              <my-action-button :rowEvent=\"props\" allowEmpty/>\n            </template>\n\n          </j-editable-table>\n        </a-tab-pane>\n      </a-tabs>\n    </a-spin>\n  </a-modal>\n</template>\n\n<script>\n  import pick from 'lodash.pick'\n  import { httpAction } from '@/api/manage'\n  import { validateDuplicateValue, alwaysResolve, failedSymbol } from '@/utils/util'\n  import { FormTypes } from '@/utils/JEditableTableUtil'\n  import JEditableTable from '@comp/jeecg/JEditableTable'\n\n  export default {\n    name: 'SysCheckRuleModal',\n    components: {\n      JEditableTable,\n      'my-action-button': {\n        props: { rowEvent: Object, allowEmpty: Boolean },\n        methods: {\n          confirmIsShow() {\n            const { index, allValues: { inputValues } } = this.rowEvent\n            let value = inputValues[index]\n            return value.digits || value.pattern\n          },\n          handleLineAdd() {\n            const { target } = this.rowEvent\n            target.add()\n          },\n          handleLineDelete() {\n            const { rowId, target } = this.rowEvent\n            target.removeRows(rowId)\n          },\n          renderDeleteButton() {\n            if (this.allowEmpty || this.rowEvent.index > 0) {\n              if (this.confirmIsShow()) {\n                return (\n                  <a-popconfirm title=\"确定要删除吗？\" onConfirm={this.handleLineDelete}>\n                    <a-button icon=\"minus\"/>\n                  </a-popconfirm>\n                )\n              } else {\n                return (\n                  <a-button icon=\"minus\" onClick={this.handleLineDelete}/>\n                )\n              }\n            }\n            return ''\n          },\n        },\n        render() {\n          return (\n            <div>\n              <a-button onClick={this.handleLineAdd} icon=\"plus\"/>\n              &nbsp;\n              {this.renderDeleteButton()}\n            </div>\n          )\n        }\n      }\n    },\n    data() {\n      return {\n        title: '操作',\n        visible: false,\n        model: {},\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 5 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n        confirmLoading: false,\n        validatorRules: {\n          ruleName: [{required: true, message: '请输入规则名称!'}],\n          ruleCode: [\n            {required: true, message: '请输入规则Code!'},\n            {validator: (rule, value, callback) => validateDuplicateValue('sys_check_rule', 'rule_code', value, this.model.id, callback)}\n          ],\n        },\n        tabs: {\n          activeKey: 'design',\n          global: {\n            key: 'global',\n            columns: [\n              {\n                title: '优先级',\n                key: 'priority',\n                width: '15%',\n                type: FormTypes.select,\n                defaultValue: '1',\n                options: [\n                  { title: '优先运行', value: '1' },\n                  { title: '最后运行', value: '0' },\n                ],\n                validateRules: []\n              },\n              {\n                title: '规则（正则表达式）',\n                key: 'pattern',\n                width: '50%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '规则不能为空' },\n                  { handler: this.validatePatternHandler },\n                ]\n              },\n              {\n                title: '提示文本',\n                key: 'message',\n                width: '20%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '${title}不能为空' },\n                ]\n              },\n              {\n                title: '操作',\n                key: 'action',\n                width: '15%',\n                slotName: 'action',\n                type: FormTypes.slot\n              }\n            ],\n            dataSource: [],\n          },\n          design: {\n            key: 'design',\n            columns: [\n              {\n                title: '位数',\n                key: 'digits',\n                width: '15%',\n                type: FormTypes.inputNumber,\n                validateRules: [\n                  { required: true, message: '${title}不能为空' },\n                  { pattern: /^[1-9]\\d*$/, message: '请输入零以上的正整数' },\n                ]\n              },\n              {\n                title: '规则（正则表达式）',\n                key: 'pattern',\n                width: '50%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '规则不能为空' },\n                  { handler: this.validatePatternHandler }\n                ]\n              },\n              {\n                title: '提示文本',\n                key: 'message',\n                width: '20%',\n                type: FormTypes.input,\n                validateRules: [\n                  { required: true, message: '${title}不能为空' },\n                ]\n              },\n              {\n                title: '操作',\n                key: 'action',\n                width: '15%',\n                slotName: 'action',\n                type: FormTypes.slot\n              },\n            ],\n            dataSource: [],\n          }\n        },\n        url: {\n          add: '/sys/checkRule/add',\n          edit: '/sys/checkRule/edit',\n        },\n      }\n    },\n    created() {\n    },\n    methods: {\n\n      validatePatternHandler(type, value, row, column, callback, target) {\n        if (type === 'blur' || type === 'getValues') {\n          try {\n            new RegExp(value)\n            callback(true)\n          } catch (e) {\n            callback(false, '请输入正确的正则表达式')\n          }\n        } else {\n          callback(true) // 不填写或者填写 null 代表不进行任何操作\n        }\n      },\n\n      add() {\n        this.edit({})\n      },\n      edit(record) {\n        this.tabs.activeKey = this.tabs.design.key\n        this.tabs.global.dataSource = []\n        this.tabs.design.dataSource = [{ digits: '', pattern: '', message: '' }]\n        this.visible = true\n        this.$nextTick(() => {\n          this.$refs.form.resetFields()\n          this.model = Object.assign({}, record)\n\n          // 子表数据\n          let ruleJson = this.model.ruleJson\n          if (ruleJson) {\n            let ruleList = JSON.parse(ruleJson)\n            // 筛选出全局规则和局部规则\n            let global = [], design = [], priority = '1'\n            ruleList.forEach(rule => {\n              if (rule.digits === '*') {\n                global.push(Object.assign(rule, { priority }))\n              } else {\n                priority = '0'\n                design.push(rule)\n              }\n            })\n            this.tabs.global.dataSource = global\n            this.tabs.design.dataSource = design\n          }\n        })\n      },\n      close() {\n        this.$emit('close')\n        this.visible = false\n      },\n      handleOk() {\n        Promise.all([\n          // 主表单校验\n          alwaysResolve(new Promise((resolve, reject) => {\n            this.$refs.form.validate((ok, err) => ok ? resolve(this.model) : reject(err))\n          })),\n          // 局部规则子表校验\n          alwaysResolve(this.$refs.designTable.getValuesPromise),\n          // 全局规则子表校验\n          alwaysResolve(this.$refs.globalTable.getValuesPromise),\n        ]).then(results => {\n          let [mainResult, designResult, globalResult] = results\n\n          if (mainResult.type === failedSymbol) {\n            return Promise.reject('主表校验未通过')\n          } else if (designResult.type === failedSymbol) {\n            this.tabs.activeKey = this.tabs.design.key\n            return Promise.reject('局部规则子表校验未通过')\n          } else if (globalResult.type === failedSymbol) {\n            this.tabs.activeKey = this.tabs.global.key\n            return Promise.reject('全局规则子表校验未通过')\n          } else {\n            // 所有校验已通过，这一步是整合数据\n            let mainValues = mainResult.data, globalValues = globalResult.data, designValues = designResult.data\n\n            // 整合两个子表的数据\n            let firstGlobal = [], afterGlobal = []\n            globalValues.forEach(v => {\n              v.digits = '*'\n              if (v.priority === '1') {\n                firstGlobal.push(v)\n              } else {\n                afterGlobal.push(v)\n              }\n            })\n            let concatValues = firstGlobal.concat(designValues).concat(afterGlobal)\n            let subValues = concatValues.map(i => pick(i, 'digits', 'pattern', 'message'))\n\n            // 生成 formData，用于传入后台\n            let ruleJson = JSON.stringify(subValues)\n            let formData = Object.assign(this.model, mainValues, { ruleJson })\n\n            // 判断请求方式和请求地址，并发送请求\n            let method = 'post', httpUrl = this.url.add\n            if (this.model.id) {\n              method = 'put'\n              httpUrl = this.url.edit\n            }\n            this.confirmLoading = true\n            return httpAction(httpUrl, formData, method)\n          }\n        }).then((res) => {\n          if (res.success) {\n            this.$message.success(res.message)\n            this.$emit('ok')\n            this.close()\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).catch(e => {\n          console.error(e)\n        }).finally(() => {\n          this.confirmLoading = false\n        })\n      },\n      handleCancel() {\n        this.close()\n      },\n\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped></style>"],"mappings":"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","ignoreList":[]}]}