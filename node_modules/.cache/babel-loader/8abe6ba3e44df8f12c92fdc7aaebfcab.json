{"remainingRequest":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\jeecg\\modal\\JPopupOnlReport.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { getAction } from '@/api/manage';\nimport { filterObj } from '@/utils/util';\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil';\nimport { httpGroupRequest } from '@/api/GroupRequest.js';\nvar MODAL_WIDTH = 1200;\nexport default {\n  name: 'JPopupOnlReport',\n  props: ['multi', 'code', 'sorter', 'groupId', 'param'],\n  components: {},\n  data: function data() {\n    return {\n      visible: false,\n      title: \"\",\n      confirmLoading: false,\n      queryInfo: [],\n      toggleSearchStatus: false,\n      queryParam: {},\n      dictOptions: {},\n      url: {\n        getColumns: '/online/cgreport/api/getRpColumns/',\n        getData: '/online/cgreport/api/getData/',\n        getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: function showTotal(total, range) {\n            return range[0] + '-' + range[1] + ' 共' + total + '条';\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgRpConfigId: \"\",\n      modalWidth: MODAL_WIDTH,\n      tableScroll: {\n        x: true\n      },\n      dynamicParam: {},\n      // 排序字段，默认无排序\n      iSorter: null\n    };\n  },\n  mounted: function mounted() {\n    //this.loadColumnsInfo()\n  },\n  watch: {\n    code: function code() {\n      this.loadColumnsInfo();\n    },\n    param: {\n      deep: true,\n      handler: function handler() {\n        this.dynamicParamHandler();\n        this.loadData();\n      }\n    },\n    sorter: {\n      immediate: true,\n      handler: function handler() {\n        var _this = this;\n        if (this.sorter) {\n          var arr = this.sorter.split('=');\n          if (arr.length === 2 && ['asc', 'desc'].includes(arr[1].toLowerCase())) {\n            this.iSorter = {\n              column: arr[0],\n              order: arr[1].toLowerCase()\n            };\n            // 排序字段受控\n            this.table.columns.forEach(function (col) {\n              if (col.dataIndex === _this.iSorter.column) {\n                _this.$set(col, 'sortOrder', _this.iSorter.order === 'asc' ? 'ascend' : 'descend');\n              } else {\n                _this.$set(col, 'sortOrder', false);\n              }\n            });\n          } else {\n            console.warn('【JPopup】sorter参数不合法');\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    showSearchFlag: function showSearchFlag() {\n      return this.queryInfo && this.queryInfo.length > 0;\n    }\n  },\n  methods: {\n    loadColumnsInfo: function loadColumnsInfo() {\n      var _this2 = this;\n      var url = \"\".concat(this.url.getColumns).concat(this.code);\n      //缓存key\n      var groupIdKey;\n      if (this.groupId) {\n        groupIdKey = this.groupId + url;\n      }\n      httpGroupRequest(function () {\n        return getAction(url);\n      }, groupIdKey).then(function (res) {\n        if (res.success) {\n          _this2.initDictOptionData(res.result.dictOptions);\n          _this2.cgRpConfigId = res.result.cgRpConfigId;\n          _this2.title = res.result.cgRpConfigName;\n          var currColumns = res.result.columns;\n          var _loop = function _loop() {\n            if (currColumns[a].customRender) {\n              var dictCode = currColumns[a].customRender;\n              currColumns[a].customRender = function (text) {\n                return filterMultiDictText(_this2.dictOptions[dictCode], text + \"\");\n              };\n            }\n            // 排序字段受控\n            if (_this2.iSorter && currColumns[a].dataIndex === _this2.iSorter.column) {\n              currColumns[a].sortOrder = _this2.iSorter.order === 'asc' ? 'ascend' : 'descend';\n            }\n          };\n          for (var a = 0; a < currColumns.length; a++) {\n            _loop();\n          }\n          _this2.table.columns = _toConsumableArray(currColumns);\n          _this2.initQueryInfo();\n        }\n      });\n    },\n    initQueryInfo: function initQueryInfo() {\n      var _this3 = this;\n      var url = \"\".concat(this.url.getQueryInfo).concat(this.cgRpConfigId);\n      //缓存key\n      var groupIdKey;\n      if (this.groupId) {\n        groupIdKey = this.groupId + url;\n      }\n      httpGroupRequest(function () {\n        return getAction(url);\n      }, groupIdKey).then(function (res) {\n        // console.log(\"获取查询条件\", res);\n        if (res.success) {\n          _this3.dynamicParamHandler(res.result);\n          _this3.queryInfo = res.result;\n          //查询条件加载后再请求数据\n          _this3.loadData(1);\n        } else {\n          _this3.$message.warning(res.message);\n        }\n      });\n    },\n    //处理动态参数\n    dynamicParamHandler: function dynamicParamHandler(arr) {\n      var _this4 = this;\n      if (arr && arr.length > 0) {\n        //第一次加载查询条件前 初始化queryParam为空对象\n        var queryTemp = {};\n        var _iterator = _createForOfIteratorHelper(arr),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            if (item.mode === 'single') {\n              queryTemp[item.field] = '';\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        this.queryParam = _objectSpread({}, queryTemp);\n      }\n      var dynamicTemp = {};\n      if (this.param) {\n        Object.keys(this.param).map(function (key) {\n          var str = _this4.param[key];\n          if (key in _this4.queryParam) {\n            if (str && str.startsWith(\"'\") && str.endsWith(\"'\")) {\n              str = str.substring(1, str.length - 1);\n            }\n            //如果查询条件包含参数 设置值\n            _this4.queryParam[key] = str;\n          }\n          dynamicTemp[key] = _this4.param[key];\n        });\n      }\n      this.dynamicParam = _objectSpread({}, dynamicTemp);\n    },\n    loadData: function loadData(arg) {\n      var _this5 = this;\n      if (arg == 1) {\n        this.table.pagination.current = 1;\n      }\n      var params = this.getQueryParams(); //查询条件\n      this.table.loading = true;\n      var url = \"\".concat(this.url.getData).concat(this.cgRpConfigId);\n      //缓存key\n      var groupIdKey;\n      if (this.groupId) {\n        groupIdKey = this.groupId + url + JSON.stringify(params);\n      }\n      httpGroupRequest(function () {\n        return getAction(url, params);\n      }, groupIdKey).then(function (res) {\n        _this5.table.loading = false;\n        // console.log(\"daa\",res)\n        var data = res.result;\n        if (data) {\n          _this5.table.pagination.total = Number(data.total);\n          _this5.table.dataSource = data.records;\n        } else {\n          _this5.table.pagination.total = 0;\n          _this5.table.dataSource = [];\n        }\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      var _this6 = this;\n      var paramTarget = {};\n      if (this.dynamicParam) {\n        //处理自定义参数\n        Object.keys(this.dynamicParam).map(function (key) {\n          paramTarget['self_' + key] = _this6.dynamicParam[key];\n        });\n      }\n      var param = Object.assign(paramTarget, this.queryParam, this.iSorter);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    handleChangeInTableSelect: function handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      var _this7 = this;\n      //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n      if (!selectedRowKeys || selectedRowKeys.length == 0) {\n        this.table.selectionRows = [];\n      } else if (selectedRowKeys.length == selectionRows.length) {\n        this.table.selectionRows = selectionRows;\n      } else {\n        //当两者长度不一的时候 需要判断\n        var keys = this.table.selectedRowKeys;\n        var rows = this.table.selectionRows;\n        //这个循环 添加新的记录\n        for (var i = 0; i < selectionRows.length; i++) {\n          var combineKey = this.combineRowKey(selectionRows[i]);\n          if (keys.indexOf(combineKey) < 0) {\n            //如果 原来的key 不包含当前记录 push\n            rows.push(selectionRows[i]);\n          }\n        }\n        //这个循环 移除取消选中的数据\n        this.table.selectionRows = rows.filter(function (item) {\n          var combineKey = _this7.combineRowKey(item);\n          return selectedRowKeys.indexOf(combineKey) >= 0;\n        });\n      }\n      //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n      this.table.selectedRowKeys = selectedRowKeys;\n    },\n    handleChangeInTable: function handleChangeInTable(pagination, filters, sorter) {\n      var _this8 = this;\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.iSorter = {\n          column: sorter.field,\n          order: 'ascend' === sorter.order ? 'asc' : 'desc'\n        };\n        // 排序字段受控\n        this.table.columns.forEach(function (col) {\n          if (col.dataIndex === sorter.field) {\n            _this8.$set(col, 'sortOrder', sorter.order);\n          } else {\n            _this8.$set(col, 'sortOrder', false);\n          }\n        });\n      }\n      this.table.pagination = pagination;\n      this.loadData();\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    handleSubmit: function handleSubmit() {\n      if (!this.multi) {\n        if (this.table.selectionRows && this.table.selectionRows.length > 1) {\n          this.$message.warning(\"请选择一条记录\");\n          return false;\n        }\n      }\n      if (!this.table.selectionRows || this.table.selectionRows.length == 0) {\n        this.$message.warning(\"请选择一条记录\");\n        return false;\n      }\n      this.$emit('ok', this.table.selectionRows);\n      this.close();\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n      this.onClearSelected();\n    },\n    show: function show() {\n      this.visible = true;\n      this.loadColumnsInfo();\n    },\n    handleToggleSearch: function handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    searchByquery: function searchByquery() {\n      this.loadData(1);\n    },\n    onlyReload: function onlyReload() {\n      this.loadData();\n    },\n    searchReset: function searchReset() {\n      var _this9 = this;\n      Object.keys(this.queryParam).forEach(function (key) {\n        _this9.queryParam[key] = \"\";\n      });\n      this.loadData(1);\n    },\n    onClearSelected: function onClearSelected() {\n      this.table.selectedRowKeys = [];\n      this.table.selectionRows = [];\n    },\n    combineRowKey: function combineRowKey(record) {\n      var res = '';\n      Object.keys(record).forEach(function (key) {\n        //update-begin---author:liusq   Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\n        if (key == 'id') {\n          res = record[key] + res;\n        } else {\n          res += record[key];\n        }\n        //update-end---author:liusq     Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\n      });\n      if (res.length > 50) {\n        res = res.substring(0, 50);\n      }\n      return res;\n    },\n    clickThenCheck: function clickThenCheck(record) {\n      var _this10 = this;\n      return {\n        on: {\n          click: function click() {\n            var rowKey = _this10.combineRowKey(record);\n            if (!_this10.table.selectedRowKeys || _this10.table.selectedRowKeys.length == 0) {\n              var arr1 = [],\n                arr2 = [];\n              arr1.push(record);\n              arr2.push(rowKey);\n              _this10.table.selectedRowKeys = arr2;\n              _this10.table.selectionRows = arr1;\n            } else {\n              if (_this10.table.selectedRowKeys.indexOf(rowKey) < 0) {\n                _this10.table.selectedRowKeys.push(rowKey);\n                _this10.table.selectionRows.push(record);\n              } else {\n                var rowKey_index = _this10.table.selectedRowKeys.indexOf(rowKey);\n                _this10.table.selectedRowKeys.splice(rowKey_index, 1);\n                _this10.table.selectionRows.splice(rowKey_index, 1);\n              }\n            }\n          }\n        }\n      };\n    },\n    //防止字典中有垃圾数据\n    initDictOptionData: function initDictOptionData(dictOptions) {\n      var obj = {};\n      Object.keys(dictOptions).map(function (k) {\n        obj[k] = dictOptions[k].filter(function (item) {\n          return item != null;\n        });\n      });\n      this.dictOptions = obj;\n    }\n  }\n};",{"version":3,"names":["getAction","filterObj","filterMultiDictText","httpGroupRequest","MODAL_WIDTH","name","props","components","data","visible","title","confirmLoading","queryInfo","toggleSearchStatus","queryParam","dictOptions","url","getColumns","getData","getQueryInfo","table","loading","columns","dataSource","selectedRowKeys","selectionRows","pagination","current","pageSize","pageSizeOptions","showTotal","total","range","showQuickJumper","showSizeChanger","cgRpConfigId","modalWidth","tableScroll","x","dynamicParam","iSorter","mounted","watch","code","loadColumnsInfo","param","deep","handler","dynamicParamHandler","loadData","sorter","immediate","_this","arr","split","length","includes","toLowerCase","column","order","forEach","col","dataIndex","$set","console","warn","computed","showSearchFlag","methods","_this2","concat","groupIdKey","groupId","then","res","success","initDictOptionData","result","cgRpConfigName","currColumns","_loop","a","customRender","dictCode","text","sortOrder","_toConsumableArray","initQueryInfo","_this3","$message","warning","message","_this4","queryTemp","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","value","mode","field","err","e","f","_objectSpread","dynamicTemp","Object","keys","map","key","str","startsWith","endsWith","substring","arg","_this5","params","getQueryParams","JSON","stringify","Number","records","_this6","paramTarget","assign","pageNo","handleChangeInTableSelect","_this7","rows","i","combineKey","combineRowKey","indexOf","push","filter","handleChangeInTable","filters","_this8","handleCancel","close","handleSubmit","multi","$emit","onClearSelected","show","handleToggleSearch","searchByquery","onlyReload","searchReset","_this9","record","clickThenCheck","_this10","on","click","rowKey","arr1","arr2","rowKey_index","splice","obj","k"],"sources":["src/components/jeecg/modal/JPopupOnlReport.vue"],"sourcesContent":["<template>\n  <j-modal\n    :title=\"title\"\n    :width=\"modalWidth\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    switchFullscreen\n    wrapClassName=\"j-popup-modal\"\n    @ok=\"handleSubmit\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <div class=\"table-page-search-wrapper\">\n      <a-form layout=\"inline\" @keyup.enter.native=\"searchByquery\">\n        <a-row :gutter=\"24\" v-if=\"showSearchFlag\">\n          <template v-for=\"(item,index) in queryInfo\">\n            <template v-if=\" item.hidden==='1' \">\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \" v-show=\"toggleSearchStatus\">\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\n              </a-col>\n            </template>\n            <template v-else>\n              <a-col :md=\"8\" :sm=\"24\" :key=\" 'query'+index \">\n                <online-query-form-item :queryParam=\"queryParam\" :item=\"item\" :dictOptions=\"dictOptions\"></online-query-form-item>\n              </a-col>\n            </template>\n          </template>\n\n          <a-col :md=\"8\" :sm=\"8\">\n            <span style=\"float: left;overflow: hidden;\" class=\"table-page-search-submitButtons\">\n              <a-button type=\"primary\" @click=\"searchByquery\" icon=\"search\">查询</a-button>\n              <a-button  @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\n              <a @click=\"handleToggleSearch\" style=\"margin-left: 8px\">\n                {{ toggleSearchStatus ? '收起' : '展开' }}\n                <a-icon :type=\"toggleSearchStatus ? 'up' : 'down'\"/>\n              </a>\n            </span>\n          </a-col>\n\n        </a-row>\n      </a-form>\n    </div>\n\n    <div class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 16px;\">\n      <i class=\"anticon anticon-info-circle ant-alert-icon\"></i>\n      已选择&nbsp;<a style=\"font-weight: 600\">{{ table.selectedRowKeys.length }}</a>项&nbsp;&nbsp;\n      <a style=\"margin-left: 24px\" @click=\"onClearSelected\">清空</a>\n\n      <a v-if=\"!showSearchFlag\" style=\"margin-left: 24px\" @click=\"onlyReload\">刷新</a>\n    </div>\n\n    <a-table\n      ref=\"table\"\n      size=\"middle\"\n      bordered\n      :rowKey=\"combineRowKey\"\n      :columns=\"table.columns\"\n      :dataSource=\"table.dataSource\"\n      :pagination=\"table.pagination\"\n      :loading=\"table.loading\"\n      :rowSelection=\"{fixed:true,selectedRowKeys: table.selectedRowKeys, onChange: handleChangeInTableSelect}\"\n      @change=\"handleChangeInTable\"\n      style=\"min-height: 300px\"\n      :scroll=\"tableScroll\"\n      :customRow=\"clickThenCheck\">\n    </a-table>\n\n\n  </j-modal>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n  import {filterObj} from '@/utils/util'\n  import { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\n  import { httpGroupRequest } from '@/api/GroupRequest.js'\n\n  const MODAL_WIDTH = 1200;\n  export default {\n    name: 'JPopupOnlReport',\n    props: ['multi', 'code', 'sorter', 'groupId', 'param'],\n    components:{\n    },\n    data(){\n      return {\n        visible:false,\n        title:\"\",\n        confirmLoading:false,\n        queryInfo:[],\n        toggleSearchStatus:false,\n        queryParam:{\n\n        },\n        dictOptions: {},\n        url: {\n          getColumns: '/online/cgreport/api/getRpColumns/',\n          getData: '/online/cgreport/api/getData/',\n          getQueryInfo: '/online/cgreport/api/getQueryInfo/'\n        },\n        table: {\n          loading: true,\n          // 表头\n          columns: [],\n          //数据集\n          dataSource: [],\n          // 选择器\n          selectedRowKeys: [],\n          selectionRows: [],\n          // 分页参数\n          pagination: {\n            current: 1,\n            pageSize: 10,\n            pageSizeOptions: ['10', '20', '30'],\n            showTotal: (total, range) => {\n              return range[0] + '-' + range[1] + ' 共' + total + '条'\n            },\n            showQuickJumper: true,\n            showSizeChanger: true,\n            total: 0\n          }\n        },\n        cgRpConfigId:\"\",\n        modalWidth:MODAL_WIDTH,\n        tableScroll:{x:true},\n        dynamicParam:{},\n        // 排序字段，默认无排序\n        iSorter: null,\n      }\n    },\n    mounted() {\n      //this.loadColumnsInfo()\n    },\n    watch: {\n      code() {\n        this.loadColumnsInfo()\n      },\n      param:{\n        deep:true,\n        handler(){\n          this.dynamicParamHandler()\n          this.loadData();\n        },\n      },\n      sorter: {\n        immediate: true,\n        handler() {\n          if (this.sorter) {\n            let arr = this.sorter.split('=')\n            if (arr.length === 2 && ['asc', 'desc'].includes(arr[1].toLowerCase())) {\n              this.iSorter = {column: arr[0], order: arr[1].toLowerCase()}\n              // 排序字段受控\n              this.table.columns.forEach(col => {\n                if (col.dataIndex === this.iSorter.column) {\n                  this.$set(col, 'sortOrder', this.iSorter.order === 'asc' ? 'ascend' : 'descend')\n                } else {\n                  this.$set(col, 'sortOrder', false)\n                }\n              })\n            } else {\n              console.warn('【JPopup】sorter参数不合法')\n            }\n          }\n        },\n      },\n    },\n    computed:{\n      showSearchFlag(){\n        return this.queryInfo && this.queryInfo.length>0\n      }\n    },\n    methods:{\n      loadColumnsInfo(){\n        let url = `${this.url.getColumns}${this.code}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url\n        }\n        httpGroupRequest(() => getAction(url), groupIdKey).then(res => {\n          if(res.success){\n            this.initDictOptionData(res.result.dictOptions);\n            this.cgRpConfigId = res.result.cgRpConfigId\n            this.title = res.result.cgRpConfigName\n            let currColumns = res.result.columns\n            for(let a=0;a<currColumns.length;a++){\n              if(currColumns[a].customRender){\n                let dictCode = currColumns[a].customRender;\n                currColumns[a].customRender=(text)=>{\n                  return filterMultiDictText(this.dictOptions[dictCode], text+\"\");\n                }\n              }\n              // 排序字段受控\n              if (this.iSorter && currColumns[a].dataIndex === this.iSorter.column) {\n                currColumns[a].sortOrder = this.iSorter.order === 'asc' ? 'ascend' : 'descend'\n              }\n            }\n            this.table.columns = [...currColumns]\n            this.initQueryInfo()\n          }\n        })\n      },\n      initQueryInfo() {\n        let url = `${this.url.getQueryInfo}${this.cgRpConfigId}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url\n        }\n        httpGroupRequest(() => getAction(url), groupIdKey).then((res) => {\n          // console.log(\"获取查询条件\", res);\n          if (res.success) {\n            this.dynamicParamHandler(res.result)\n            this.queryInfo = res.result\n            //查询条件加载后再请求数据\n            this.loadData(1)\n          } else {\n            this.$message.warning(res.message)\n          }\n        })\n      },\n      //处理动态参数\n      dynamicParamHandler(arr){\n        if(arr && arr.length>0){\n          //第一次加载查询条件前 初始化queryParam为空对象\n          let queryTemp = {}\n          for(let item of arr){\n            if(item.mode==='single'){\n              queryTemp[item.field] = ''\n            }\n          }\n          this.queryParam = {...queryTemp}\n        }\n        let dynamicTemp = {}\n        if(this.param){\n          Object.keys(this.param).map(key=>{\n            let str = this.param[key]\n            if(key in this.queryParam){\n              if(str && str.startsWith(\"'\") && str.endsWith(\"'\")){\n                str = str.substring(1,str.length-1)\n              }\n              //如果查询条件包含参数 设置值\n              this.queryParam[key]=str\n            }\n            dynamicTemp[key] = this.param[key]\n          })\n        }\n        this.dynamicParam = {...dynamicTemp}\n      },\n      loadData(arg) {\n        if (arg == 1) {\n          this.table.pagination.current = 1\n        }\n        let params = this.getQueryParams();//查询条件\n        this.table.loading = true\n        let url = `${this.url.getData}${this.cgRpConfigId}`\n        //缓存key\n        let groupIdKey\n        if (this.groupId) {\n          groupIdKey = this.groupId + url + JSON.stringify(params)\n        }\n        httpGroupRequest(() => getAction(url, params), groupIdKey).then(res => {\n          this.table.loading = false\n          // console.log(\"daa\",res)\n          let data = res.result\n          if (data) {\n            this.table.pagination.total = Number(data.total)\n            this.table.dataSource = data.records\n          } else {\n            this.table.pagination.total = 0\n            this.table.dataSource = []\n          }\n        })\n      },\n      getQueryParams() {\n        let paramTarget = {}\n        if(this.dynamicParam){\n          //处理自定义参数\n         Object.keys(this.dynamicParam).map(key=>{\n           paramTarget['self_'+key] = this.dynamicParam[key]\n         })\n        }\n        let param = Object.assign(paramTarget, this.queryParam, this.iSorter);\n        param.pageNo = this.table.pagination.current;\n        param.pageSize = this.table.pagination.pageSize;\n        return filterObj(param);\n      },\n      handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n        //update-begin-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n        if(!selectedRowKeys || selectedRowKeys.length==0){\n          this.table.selectionRows = []\n        }else if(selectedRowKeys.length == selectionRows.length){\n          this.table.selectionRows = selectionRows\n        }else{\n          //当两者长度不一的时候 需要判断\n          let keys = this.table.selectedRowKeys\n          let rows = this.table.selectionRows;\n          //这个循环 添加新的记录\n          for(let i=0;i<selectionRows.length;i++){\n            let combineKey = this.combineRowKey(selectionRows[i])\n            if(keys.indexOf(combineKey)<0){\n              //如果 原来的key 不包含当前记录 push\n              rows.push(selectionRows[i])\n            }\n          }\n          //这个循环 移除取消选中的数据\n          this.table.selectionRows = rows.filter(item=>{\n            let combineKey = this.combineRowKey(item)\n            return selectedRowKeys.indexOf(combineKey)>=0\n          })\n        }\n        //update-end-author:taoyan date:2020902 for:【issue】开源online的几个问题 LOWCOD-844\n        this.table.selectedRowKeys = selectedRowKeys\n      },\n      handleChangeInTable(pagination, filters, sorter) {\n        //分页、排序、筛选变化时触发\n        if (Object.keys(sorter).length > 0) {\n          this.iSorter = {\n            column: sorter.field,\n            order: 'ascend' === sorter.order ? 'asc' : 'desc'\n          }\n          // 排序字段受控\n          this.table.columns.forEach(col => {\n            if (col.dataIndex === sorter.field) {\n              this.$set(col, 'sortOrder',sorter.order)\n            } else {\n              this.$set(col, 'sortOrder', false)\n            }\n          })\n        }\n        this.table.pagination = pagination\n        this.loadData()\n      },\n      handleCancel() {\n        this.close()\n      },\n      handleSubmit() {\n        if(!this.multi){\n          if(this.table.selectionRows && this.table.selectionRows.length>1){\n            this.$message.warning(\"请选择一条记录\")\n            return false\n          }\n        }\n        if(!this.table.selectionRows || this.table.selectionRows.length==0){\n          this.$message.warning(\"请选择一条记录\")\n          return false\n        }\n        this.$emit('ok', this.table.selectionRows);\n        this.close()\n      },\n      close() {\n        this.$emit('close');\n        this.visible = false;\n        this.onClearSelected()\n      },\n      show(){\n        this.visible = true\n        this.loadColumnsInfo()\n      },\n      handleToggleSearch(){\n        this.toggleSearchStatus = !this.toggleSearchStatus;\n      },\n      searchByquery(){\n        this.loadData(1);\n      },\n      onlyReload(){\n        this.loadData();\n      },\n      searchReset(){\n        Object.keys(this.queryParam).forEach(key=>{\n          this.queryParam[key]=\"\"\n        })\n        this.loadData(1);\n      },\n      onClearSelected(){\n        this.table.selectedRowKeys = []\n        this.table.selectionRows = []\n      },\n      combineRowKey(record){\n        let res = ''\n         Object.keys(record).forEach(key=>{\n           //update-begin---author:liusq   Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\n           if(key=='id'){\n             res=record[key]+res\n           }else{\n             res+=record[key]\n           }\n           //update-end---author:liusq     Date:20210203  for：pop选择器列主键问题 issues/I29P9Q------------\n         })\n        if(res.length>50){\n          res = res.substring(0,50)\n        }\n        return res\n      },\n\n      clickThenCheck(record){\n        return {\n          on: {\n            click: () => {\n              let rowKey = this.combineRowKey(record)\n              if(!this.table.selectedRowKeys || this.table.selectedRowKeys.length==0){\n                let arr1=[],arr2=[]\n                arr1.push(record)\n                arr2.push(rowKey)\n                this.table.selectedRowKeys=arr2\n                this.table.selectionRows=arr1\n              }else{\n                if(this.table.selectedRowKeys.indexOf(rowKey)<0){\n                  this.table.selectedRowKeys.push(rowKey)\n                  this.table.selectionRows.push(record)\n                }else{\n                  let rowKey_index = this.table.selectedRowKeys.indexOf(rowKey)\n                  this.table.selectedRowKeys.splice(rowKey_index,1);\n                  this.table.selectionRows.splice(rowKey_index,1);\n                }\n              }\n            }\n          }\n        }\n      },\n      //防止字典中有垃圾数据\n      initDictOptionData(dictOptions){\n        let obj = { }\n        Object.keys(dictOptions).map(k=>{\n          obj[k] = dictOptions[k].filter(item=>{\n            return item!=null\n          });\n        });\n        this.dictOptions  = obj\n      }\n\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"mappings":";;;;;;;;;;;;;AAwEA,SAAAA,SAAA;AACA,SAAAC,SAAA;AACA,SAAAC,mBAAA;AACA,SAAAC,gBAAA;AAEA,IAAAC,WAAA;AACA;EACAC,IAAA;EACAC,KAAA;EACAC,UAAA,GACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,OAAA;MACAC,KAAA;MACAC,cAAA;MACAC,SAAA;MACAC,kBAAA;MACAC,UAAA,GAEA;MACAC,WAAA;MACAC,GAAA;QACAC,UAAA;QACAC,OAAA;QACAC,YAAA;MACA;MACAC,KAAA;QACAC,OAAA;QACA;QACAC,OAAA;QACA;QACAC,UAAA;QACA;QACAC,eAAA;QACAC,aAAA;QACA;QACAC,UAAA;UACAC,OAAA;UACAC,QAAA;UACAC,eAAA;UACAC,SAAA,WAAAA,UAAAC,KAAA,EAAAC,KAAA;YACA,OAAAA,KAAA,YAAAA,KAAA,aAAAD,KAAA;UACA;UACAE,eAAA;UACAC,eAAA;UACAH,KAAA;QACA;MACA;MACAI,YAAA;MACAC,UAAA,EAAAhC,WAAA;MACAiC,WAAA;QAAAC,CAAA;MAAA;MACAC,YAAA;MACA;MACAC,OAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA;EAAA,CACA;EACAC,KAAA;IACAC,IAAA,WAAAA,KAAA;MACA,KAAAC,eAAA;IACA;IACAC,KAAA;MACAC,IAAA;MACAC,OAAA,WAAAA,QAAA;QACA,KAAAC,mBAAA;QACA,KAAAC,QAAA;MACA;IACA;IACAC,MAAA;MACAC,SAAA;MACAJ,OAAA,WAAAA,QAAA;QAAA,IAAAK,KAAA;QACA,SAAAF,MAAA;UACA,IAAAG,GAAA,QAAAH,MAAA,CAAAI,KAAA;UACA,IAAAD,GAAA,CAAAE,MAAA,0BAAAC,QAAA,CAAAH,GAAA,IAAAI,WAAA;YACA,KAAAjB,OAAA;cAAAkB,MAAA,EAAAL,GAAA;cAAAM,KAAA,EAAAN,GAAA,IAAAI,WAAA;YAAA;YACA;YACA,KAAArC,KAAA,CAAAE,OAAA,CAAAsC,OAAA,WAAAC,GAAA;cACA,IAAAA,GAAA,CAAAC,SAAA,KAAAV,KAAA,CAAAZ,OAAA,CAAAkB,MAAA;gBACAN,KAAA,CAAAW,IAAA,CAAAF,GAAA,eAAAT,KAAA,CAAAZ,OAAA,CAAAmB,KAAA;cACA;gBACAP,KAAA,CAAAW,IAAA,CAAAF,GAAA;cACA;YACA;UACA;YACAG,OAAA,CAAAC,IAAA;UACA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACAC,cAAA,WAAAA,eAAA;MACA,YAAAvD,SAAA,SAAAA,SAAA,CAAA2C,MAAA;IACA;EACA;EACAa,OAAA;IACAxB,eAAA,WAAAA,gBAAA;MAAA,IAAAyB,MAAA;MACA,IAAArD,GAAA,MAAAsD,MAAA,MAAAtD,GAAA,CAAAC,UAAA,EAAAqD,MAAA,MAAA3B,IAAA;MACA;MACA,IAAA4B,UAAA;MACA,SAAAC,OAAA;QACAD,UAAA,QAAAC,OAAA,GAAAxD,GAAA;MACA;MACAb,gBAAA;QAAA,OAAAH,SAAA,CAAAgB,GAAA;MAAA,GAAAuD,UAAA,EAAAE,IAAA,WAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,OAAA;UACAN,MAAA,CAAAO,kBAAA,CAAAF,GAAA,CAAAG,MAAA,CAAA9D,WAAA;UACAsD,MAAA,CAAAlC,YAAA,GAAAuC,GAAA,CAAAG,MAAA,CAAA1C,YAAA;UACAkC,MAAA,CAAA3D,KAAA,GAAAgE,GAAA,CAAAG,MAAA,CAAAC,cAAA;UACA,IAAAC,WAAA,GAAAL,GAAA,CAAAG,MAAA,CAAAvD,OAAA;UAAA,IAAA0D,KAAA,YAAAA,MAAA,EACA;YACA,IAAAD,WAAA,CAAAE,CAAA,EAAAC,YAAA;cACA,IAAAC,QAAA,GAAAJ,WAAA,CAAAE,CAAA,EAAAC,YAAA;cACAH,WAAA,CAAAE,CAAA,EAAAC,YAAA,aAAAE,IAAA;gBACA,OAAAlF,mBAAA,CAAAmE,MAAA,CAAAtD,WAAA,CAAAoE,QAAA,GAAAC,IAAA;cACA;YACA;YACA;YACA,IAAAf,MAAA,CAAA7B,OAAA,IAAAuC,WAAA,CAAAE,CAAA,EAAAnB,SAAA,KAAAO,MAAA,CAAA7B,OAAA,CAAAkB,MAAA;cACAqB,WAAA,CAAAE,CAAA,EAAAI,SAAA,GAAAhB,MAAA,CAAA7B,OAAA,CAAAmB,KAAA;YACA;UACA;UAXA,SAAAsB,CAAA,MAAAA,CAAA,GAAAF,WAAA,CAAAxB,MAAA,EAAA0B,CAAA;YAAAD,KAAA;UAAA;UAYAX,MAAA,CAAAjD,KAAA,CAAAE,OAAA,GAAAgE,kBAAA,CAAAP,WAAA;UACAV,MAAA,CAAAkB,aAAA;QACA;MACA;IACA;IACAA,aAAA,WAAAA,cAAA;MAAA,IAAAC,MAAA;MACA,IAAAxE,GAAA,MAAAsD,MAAA,MAAAtD,GAAA,CAAAG,YAAA,EAAAmD,MAAA,MAAAnC,YAAA;MACA;MACA,IAAAoC,UAAA;MACA,SAAAC,OAAA;QACAD,UAAA,QAAAC,OAAA,GAAAxD,GAAA;MACA;MACAb,gBAAA;QAAA,OAAAH,SAAA,CAAAgB,GAAA;MAAA,GAAAuD,UAAA,EAAAE,IAAA,WAAAC,GAAA;QACA;QACA,IAAAA,GAAA,CAAAC,OAAA;UACAa,MAAA,CAAAxC,mBAAA,CAAA0B,GAAA,CAAAG,MAAA;UACAW,MAAA,CAAA5E,SAAA,GAAA8D,GAAA,CAAAG,MAAA;UACA;UACAW,MAAA,CAAAvC,QAAA;QACA;UACAuC,MAAA,CAAAC,QAAA,CAAAC,OAAA,CAAAhB,GAAA,CAAAiB,OAAA;QACA;MACA;IACA;IACA;IACA3C,mBAAA,WAAAA,oBAAAK,GAAA;MAAA,IAAAuC,MAAA;MACA,IAAAvC,GAAA,IAAAA,GAAA,CAAAE,MAAA;QACA;QACA,IAAAsC,SAAA;QAAA,IAAAC,SAAA,GAAAC,0BAAA,CACA1C,GAAA;UAAA2C,KAAA;QAAA;UAAA,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA;YAAA,IAAAC,IAAA,GAAAJ,KAAA,CAAAK,KAAA;YACA,IAAAD,IAAA,CAAAE,IAAA;cACAT,SAAA,CAAAO,IAAA,CAAAG,KAAA;YACA;UACA;QAAA,SAAAC,GAAA;UAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;QAAA;UAAAV,SAAA,CAAAY,CAAA;QAAA;QACA,KAAA5F,UAAA,GAAA6F,aAAA,KAAAd,SAAA;MACA;MACA,IAAAe,WAAA;MACA,SAAA/D,KAAA;QACAgE,MAAA,CAAAC,IAAA,MAAAjE,KAAA,EAAAkE,GAAA,WAAAC,GAAA;UACA,IAAAC,GAAA,GAAArB,MAAA,CAAA/C,KAAA,CAAAmE,GAAA;UACA,IAAAA,GAAA,IAAApB,MAAA,CAAA9E,UAAA;YACA,IAAAmG,GAAA,IAAAA,GAAA,CAAAC,UAAA,SAAAD,GAAA,CAAAE,QAAA;cACAF,GAAA,GAAAA,GAAA,CAAAG,SAAA,IAAAH,GAAA,CAAA1D,MAAA;YACA;YACA;YACAqC,MAAA,CAAA9E,UAAA,CAAAkG,GAAA,IAAAC,GAAA;UACA;UACAL,WAAA,CAAAI,GAAA,IAAApB,MAAA,CAAA/C,KAAA,CAAAmE,GAAA;QACA;MACA;MACA,KAAAzE,YAAA,GAAAoE,aAAA,KAAAC,WAAA;IACA;IACA3D,QAAA,WAAAA,SAAAoE,GAAA;MAAA,IAAAC,MAAA;MACA,IAAAD,GAAA;QACA,KAAAjG,KAAA,CAAAM,UAAA,CAAAC,OAAA;MACA;MACA,IAAA4F,MAAA,QAAAC,cAAA;MACA,KAAApG,KAAA,CAAAC,OAAA;MACA,IAAAL,GAAA,MAAAsD,MAAA,MAAAtD,GAAA,CAAAE,OAAA,EAAAoD,MAAA,MAAAnC,YAAA;MACA;MACA,IAAAoC,UAAA;MACA,SAAAC,OAAA;QACAD,UAAA,QAAAC,OAAA,GAAAxD,GAAA,GAAAyG,IAAA,CAAAC,SAAA,CAAAH,MAAA;MACA;MACApH,gBAAA;QAAA,OAAAH,SAAA,CAAAgB,GAAA,EAAAuG,MAAA;MAAA,GAAAhD,UAAA,EAAAE,IAAA,WAAAC,GAAA;QACA4C,MAAA,CAAAlG,KAAA,CAAAC,OAAA;QACA;QACA,IAAAb,IAAA,GAAAkE,GAAA,CAAAG,MAAA;QACA,IAAArE,IAAA;UACA8G,MAAA,CAAAlG,KAAA,CAAAM,UAAA,CAAAK,KAAA,GAAA4F,MAAA,CAAAnH,IAAA,CAAAuB,KAAA;UACAuF,MAAA,CAAAlG,KAAA,CAAAG,UAAA,GAAAf,IAAA,CAAAoH,OAAA;QACA;UACAN,MAAA,CAAAlG,KAAA,CAAAM,UAAA,CAAAK,KAAA;UACAuF,MAAA,CAAAlG,KAAA,CAAAG,UAAA;QACA;MACA;IACA;IACAiG,cAAA,WAAAA,eAAA;MAAA,IAAAK,MAAA;MACA,IAAAC,WAAA;MACA,SAAAvF,YAAA;QACA;QACAsE,MAAA,CAAAC,IAAA,MAAAvE,YAAA,EAAAwE,GAAA,WAAAC,GAAA;UACAc,WAAA,WAAAd,GAAA,IAAAa,MAAA,CAAAtF,YAAA,CAAAyE,GAAA;QACA;MACA;MACA,IAAAnE,KAAA,GAAAgE,MAAA,CAAAkB,MAAA,CAAAD,WAAA,OAAAhH,UAAA,OAAA0B,OAAA;MACAK,KAAA,CAAAmF,MAAA,QAAA5G,KAAA,CAAAM,UAAA,CAAAC,OAAA;MACAkB,KAAA,CAAAjB,QAAA,QAAAR,KAAA,CAAAM,UAAA,CAAAE,QAAA;MACA,OAAA3B,SAAA,CAAA4C,KAAA;IACA;IACAoF,yBAAA,WAAAA,0BAAAzG,eAAA,EAAAC,aAAA;MAAA,IAAAyG,MAAA;MACA;MACA,KAAA1G,eAAA,IAAAA,eAAA,CAAA+B,MAAA;QACA,KAAAnC,KAAA,CAAAK,aAAA;MACA,WAAAD,eAAA,CAAA+B,MAAA,IAAA9B,aAAA,CAAA8B,MAAA;QACA,KAAAnC,KAAA,CAAAK,aAAA,GAAAA,aAAA;MACA;QACA;QACA,IAAAqF,IAAA,QAAA1F,KAAA,CAAAI,eAAA;QACA,IAAA2G,IAAA,QAAA/G,KAAA,CAAAK,aAAA;QACA;QACA,SAAA2G,CAAA,MAAAA,CAAA,GAAA3G,aAAA,CAAA8B,MAAA,EAAA6E,CAAA;UACA,IAAAC,UAAA,QAAAC,aAAA,CAAA7G,aAAA,CAAA2G,CAAA;UACA,IAAAtB,IAAA,CAAAyB,OAAA,CAAAF,UAAA;YACA;YACAF,IAAA,CAAAK,IAAA,CAAA/G,aAAA,CAAA2G,CAAA;UACA;QACA;QACA;QACA,KAAAhH,KAAA,CAAAK,aAAA,GAAA0G,IAAA,CAAAM,MAAA,WAAArC,IAAA;UACA,IAAAiC,UAAA,GAAAH,MAAA,CAAAI,aAAA,CAAAlC,IAAA;UACA,OAAA5E,eAAA,CAAA+G,OAAA,CAAAF,UAAA;QACA;MACA;MACA;MACA,KAAAjH,KAAA,CAAAI,eAAA,GAAAA,eAAA;IACA;IACAkH,mBAAA,WAAAA,oBAAAhH,UAAA,EAAAiH,OAAA,EAAAzF,MAAA;MAAA,IAAA0F,MAAA;MACA;MACA,IAAA/B,MAAA,CAAAC,IAAA,CAAA5D,MAAA,EAAAK,MAAA;QACA,KAAAf,OAAA;UACAkB,MAAA,EAAAR,MAAA,CAAAqD,KAAA;UACA5C,KAAA,eAAAT,MAAA,CAAAS,KAAA;QACA;QACA;QACA,KAAAvC,KAAA,CAAAE,OAAA,CAAAsC,OAAA,WAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,SAAA,KAAAZ,MAAA,CAAAqD,KAAA;YACAqC,MAAA,CAAA7E,IAAA,CAAAF,GAAA,eAAAX,MAAA,CAAAS,KAAA;UACA;YACAiF,MAAA,CAAA7E,IAAA,CAAAF,GAAA;UACA;QACA;MACA;MACA,KAAAzC,KAAA,CAAAM,UAAA,GAAAA,UAAA;MACA,KAAAuB,QAAA;IACA;IACA4F,YAAA,WAAAA,aAAA;MACA,KAAAC,KAAA;IACA;IACAC,YAAA,WAAAA,aAAA;MACA,UAAAC,KAAA;QACA,SAAA5H,KAAA,CAAAK,aAAA,SAAAL,KAAA,CAAAK,aAAA,CAAA8B,MAAA;UACA,KAAAkC,QAAA,CAAAC,OAAA;UACA;QACA;MACA;MACA,UAAAtE,KAAA,CAAAK,aAAA,SAAAL,KAAA,CAAAK,aAAA,CAAA8B,MAAA;QACA,KAAAkC,QAAA,CAAAC,OAAA;QACA;MACA;MACA,KAAAuD,KAAA,YAAA7H,KAAA,CAAAK,aAAA;MACA,KAAAqH,KAAA;IACA;IACAA,KAAA,WAAAA,MAAA;MACA,KAAAG,KAAA;MACA,KAAAxI,OAAA;MACA,KAAAyI,eAAA;IACA;IACAC,IAAA,WAAAA,KAAA;MACA,KAAA1I,OAAA;MACA,KAAAmC,eAAA;IACA;IACAwG,kBAAA,WAAAA,mBAAA;MACA,KAAAvI,kBAAA,SAAAA,kBAAA;IACA;IACAwI,aAAA,WAAAA,cAAA;MACA,KAAApG,QAAA;IACA;IACAqG,UAAA,WAAAA,WAAA;MACA,KAAArG,QAAA;IACA;IACAsG,WAAA,WAAAA,YAAA;MAAA,IAAAC,MAAA;MACA3C,MAAA,CAAAC,IAAA,MAAAhG,UAAA,EAAA8C,OAAA,WAAAoD,GAAA;QACAwC,MAAA,CAAA1I,UAAA,CAAAkG,GAAA;MACA;MACA,KAAA/D,QAAA;IACA;IACAiG,eAAA,WAAAA,gBAAA;MACA,KAAA9H,KAAA,CAAAI,eAAA;MACA,KAAAJ,KAAA,CAAAK,aAAA;IACA;IACA6G,aAAA,WAAAA,cAAAmB,MAAA;MACA,IAAA/E,GAAA;MACAmC,MAAA,CAAAC,IAAA,CAAA2C,MAAA,EAAA7F,OAAA,WAAAoD,GAAA;QACA;QACA,IAAAA,GAAA;UACAtC,GAAA,GAAA+E,MAAA,CAAAzC,GAAA,IAAAtC,GAAA;QACA;UACAA,GAAA,IAAA+E,MAAA,CAAAzC,GAAA;QACA;QACA;MACA;MACA,IAAAtC,GAAA,CAAAnB,MAAA;QACAmB,GAAA,GAAAA,GAAA,CAAA0C,SAAA;MACA;MACA,OAAA1C,GAAA;IACA;IAEAgF,cAAA,WAAAA,eAAAD,MAAA;MAAA,IAAAE,OAAA;MACA;QACAC,EAAA;UACAC,KAAA,WAAAA,MAAA;YACA,IAAAC,MAAA,GAAAH,OAAA,CAAArB,aAAA,CAAAmB,MAAA;YACA,KAAAE,OAAA,CAAAvI,KAAA,CAAAI,eAAA,IAAAmI,OAAA,CAAAvI,KAAA,CAAAI,eAAA,CAAA+B,MAAA;cACA,IAAAwG,IAAA;gBAAAC,IAAA;cACAD,IAAA,CAAAvB,IAAA,CAAAiB,MAAA;cACAO,IAAA,CAAAxB,IAAA,CAAAsB,MAAA;cACAH,OAAA,CAAAvI,KAAA,CAAAI,eAAA,GAAAwI,IAAA;cACAL,OAAA,CAAAvI,KAAA,CAAAK,aAAA,GAAAsI,IAAA;YACA;cACA,IAAAJ,OAAA,CAAAvI,KAAA,CAAAI,eAAA,CAAA+G,OAAA,CAAAuB,MAAA;gBACAH,OAAA,CAAAvI,KAAA,CAAAI,eAAA,CAAAgH,IAAA,CAAAsB,MAAA;gBACAH,OAAA,CAAAvI,KAAA,CAAAK,aAAA,CAAA+G,IAAA,CAAAiB,MAAA;cACA;gBACA,IAAAQ,YAAA,GAAAN,OAAA,CAAAvI,KAAA,CAAAI,eAAA,CAAA+G,OAAA,CAAAuB,MAAA;gBACAH,OAAA,CAAAvI,KAAA,CAAAI,eAAA,CAAA0I,MAAA,CAAAD,YAAA;gBACAN,OAAA,CAAAvI,KAAA,CAAAK,aAAA,CAAAyI,MAAA,CAAAD,YAAA;cACA;YACA;UACA;QACA;MACA;IACA;IACA;IACArF,kBAAA,WAAAA,mBAAA7D,WAAA;MACA,IAAAoJ,GAAA;MACAtD,MAAA,CAAAC,IAAA,CAAA/F,WAAA,EAAAgG,GAAA,WAAAqD,CAAA;QACAD,GAAA,CAAAC,CAAA,IAAArJ,WAAA,CAAAqJ,CAAA,EAAA3B,MAAA,WAAArC,IAAA;UACA,OAAAA,IAAA;QACA;MACA;MACA,KAAArF,WAAA,GAAAoJ,GAAA;IACA;EAEA;AACA","ignoreList":[]}]}