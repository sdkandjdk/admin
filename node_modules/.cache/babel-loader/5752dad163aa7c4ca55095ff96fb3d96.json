{"remainingRequest":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport Vue from 'vue';\nimport Draggable from 'vuedraggable';\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\nimport { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil';\nimport { cloneObject, getEventPath, randomNumber, randomString } from '@/utils/util';\nimport JDate from '@/components/jeecg/JDate';\nimport { filterDictText, initDictOptions } from '@/components/dict/JDictSelectUtil';\nimport { getFileAccessHttpUrl } from '@/api/manage';\nimport JInputPop from '@/components/jeecg/minipop/JInputPop';\nimport JFilePop from '@/components/jeecg/minipop/JFilePop';\nimport { getNoAuthCols } from '@/utils/authFilter';\n\n// 行高，需要在实例加载完成前用到\nvar rowHeight = 61;\nexport default {\n  name: 'JEditableTable',\n  components: {\n    JDate: JDate,\n    Draggable: Draggable,\n    JInputPop: JInputPop,\n    JFilePop: JFilePop\n  },\n  provide: function provide() {\n    var _this = this;\n    return {\n      parentIsJEditableTable: true,\n      getDestroyCleanGroupRequest: function getDestroyCleanGroupRequest() {\n        return _this.destroyCleanGroupRequest;\n      }\n    };\n  },\n  props: {\n    // 列信息\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 数据源\n    dataSource: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 是否显示操作按钮\n    actionButton: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示行号\n    rowNumber: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可选择行\n    rowSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 表格内容区域最大高度\n    maxHeight: {\n      type: Number,\n      default: 400\n    },\n    // 要禁用的行\n    disabledRows: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 是否禁用全部组件\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可拖拽排序\n    dragSort: {\n      type: Boolean,\n      default: false\n    },\n    dragSortKey: {\n      type: String,\n      default: 'orderNum'\n    },\n    // 是否一直显示编辑框，如果为false则只有点击的时候才出现输入框\n    alwaysEdit: {\n      type: Boolean,\n      default: true\n    },\n    authPre: {\n      type: String,\n      required: false,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      // 是否首次运行\n      isFirst: true,\n      // 当前实例是否是行编辑\n      isJEditableTable: true,\n      // caseId，用于防止有多个实例的时候会冲突\n      caseId: \"_jet-\".concat(randomString(6), \"-\"),\n      // 临时ID标识，凡是以该标识结尾的ID都是临时ID，不添加到数据库中\n      tempId: \"_tid-\".concat(randomString(6)),\n      // 存储document element 对象\n      el: {\n        inputTable: null,\n        tbody: null\n      },\n      // 存储各个div的style\n      style: {\n        // 'max-height': '400px'\n        tbody: {\n          left: '0px'\n        },\n        // 左侧固定td的style\n        tdLeft: {}\n      },\n      // 表单的类型\n      formTypes: FormTypes,\n      // 行数据\n      rows: [],\n      // 行高，height + padding + border\n      rowHeight: rowHeight,\n      // 滚动条顶部距离\n      scrollTop: 0,\n      // 绑定 select 的值\n      selectValues: {},\n      // 绑定 checkbox 的值\n      checkboxValues: {},\n      // 绑定 jdate 的值\n      jdateValues: {},\n      // 绑定jinputpop\n      jInputPopValues: {},\n      // 绑定插槽数据\n      slotValues: {},\n      // file 信息\n      uploadValues: {},\n      //popup信息\n      popupValues: {},\n      //部门组件信息\n      departCompValues: {},\n      //用户组件信息\n      userCompValues: {},\n      radioValues: {},\n      metaCheckboxValues: {},\n      multiSelectValues: {},\n      searchSelectValues: {},\n      searchSelectAsyncValues: {},\n      // 绑定左侧选择框已选择的id\n      selectedRowIds: [],\n      // 存储被删除行的id\n      deleteIds: [],\n      // 存储显示tooltip的信息\n      tooltips: {},\n      // 存储没有通过验证的inputId\n      notPassedIds: [],\n      // 当前是否正在拖拽排序\n      dragging: false,\n      // 是否有统计列\n      hasStatisticsColumn: false,\n      statisticsColumns: {},\n      // 只有在行编辑被销毁时才主动清空GroupRequest的内存\n      destroyCleanGroupRequest: false,\n      // 当前正在编辑的行的id\n      currentEditRows: {},\n      // 上次push数据的事件，用于判断是否点击过快\n      lastPushTimeMap: new Map(),\n      number: 0,\n      //不显示的按钮编码\n      excludeCode: []\n    };\n  },\n  created: function created() {\n    var _this2 = this;\n    this.inputValues = [];\n    // 当前显示的tr\n    this.visibleTrEls = [];\n    this.disabledRowIds = this.disabledRowIds || [];\n    // 解决火狐浏览器下拖拽会打开新的Tab的问题\n    document.body.ondrop = function (event) {\n      if (_this2.dragging) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n  },\n  // 计算属性\n  computed: {\n    // expandHeight = rows.length * rowHeight\n    getExpandHeight: function getExpandHeight() {\n      var length = this.rows.length * this.rowHeight;\n      if (this.showStatisticsRow) {\n        length += 34;\n      }\n      return length;\n    },\n    // 是否显示统计行\n    showStatisticsRow: function showStatisticsRow() {\n      return this.hasStatisticsColumn && this.rows.length > 0;\n    },\n    // 获取是否选择了部分\n    getSelectIndeterminate: function getSelectIndeterminate() {\n      return this.selectedRowIds.length > 0 && this.selectedRowIds.length < this.rows.length;\n    },\n    // 获取是否选择了全部\n    getSelectAll: function getSelectAll() {\n      return this.selectedRowIds.length === this.rows.length && this.rows.length > 0;\n    },\n    tbodyStyle: function tbodyStyle() {\n      var style = Object.assign({}, this.style.tbody);\n      // style['max-height'] = `${this.maxHeight}px`\n      style['width'] = this.realTrWidth;\n      return style;\n    },\n    showClearSelectButton: function showClearSelectButton() {\n      var count = 0;\n      for (var key in this.disabledRows) {\n        if (this.disabledRows.hasOwnProperty(key)) count++;\n      }\n      return count > 0;\n    },\n    accessToken: function accessToken() {\n      return Vue.ls.get(ACCESS_TOKEN);\n    },\n    realTrWidth: function realTrWidth() {\n      var splice = ' + ';\n      var calcWidth = 'calc(';\n      this.columns.forEach(function (column, i) {\n        var type = column.type,\n          width = column.width;\n        // 隐藏字段不参与计算\n        if (type !== FormTypes.hidden) {\n          if (typeof width === 'number') {\n            calcWidth += width + 'px';\n          } else if (typeof width === 'string') {\n            calcWidth += width;\n          } else {\n            calcWidth += '120px';\n          }\n          calcWidth += splice;\n        }\n      });\n      if (calcWidth.endsWith(splice)) {\n        calcWidth = calcWidth.substring(0, calcWidth.length - splice.length);\n      }\n      calcWidth += ')';\n      // console.log('calcWidth: ', calcWidth)\n      return calcWidth;\n    }\n  },\n  // 侦听器\n  watch: {\n    rows: {\n      immediate: true,\n      handler: function handler(val, old) {\n        // val.forEach(item => {\n        //   for (let inputValue of  this.inputValues) {\n        //     if (inputValue.id === item.id) {\n        //       item['dbFieldName'] = inputValue['dbFieldName']\n        //       break\n        //     }\n        //   }\n        // })\n        // console.log('watch.rows:', cloneObject({ val, old }))\n      }\n    },\n    dataSource: {\n      immediate: true,\n      handler: function handler(newValue) {\n        var _this3 = this;\n        // 兼容IE\n        this.getElementPromise('tbody').then(function () {\n          _this3.initialize();\n          _this3._pushByDataSource(newValue);\n        });\n      }\n    },\n    columns: {\n      immediate: true,\n      handler: function handler(columns) {\n        var _this4 = this;\n        //列改变的时候重新设置按钮权限信息\n        this.loadExcludeCode();\n        // 兼容IE\n        this.getElementPromise('tbody').then(function () {\n          columns.forEach(function (column) {\n            if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n              // 兼容 旧版本 options\n              if (column.options instanceof Array) {\n                column.options = column.options.map(function (item) {\n                  if (item) {\n                    return _objectSpread(_objectSpread({}, item), {}, {\n                      text: item.text || item.title,\n                      title: item.text || item.title\n                    });\n                  }\n                  return {};\n                });\n              }\n              if (column.dictCode) {\n                _this4._loadDictConcatToOptions(column);\n              }\n            }\n          });\n        });\n      }\n    },\n    // 当selectRowIds改变时触发事件\n    selectedRowIds: function selectedRowIds(newValue) {\n      var _this5 = this;\n      this.$emit('selectRowChange', cloneObject(newValue).map(function (i) {\n        return _this5.getCleanId(i);\n      }));\n    }\n  },\n  mounted: function mounted() {\n    var vm = this;\n    /** 监听滚动条事件 */\n    this.getElement('inputTable').onscroll = function (event) {\n      vm.syncScrollBar(event.target.scrollLeft);\n    };\n    this.getElement('tbody').onscroll = function (event) {\n      // vm.recalcTrHiddenItem(event.target.scrollTop)\n    };\n    var _this$$refs = this.$refs,\n      thead = _this$$refs.thead,\n      scrollView = _this$$refs.scrollView;\n    scrollView.onscroll = function (event) {\n      // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n\n      thead.scrollLeft = event.target.scrollLeft;\n      vm.recalcTrHiddenItem(event.target.scrollTop);\n    };\n\n    // 添加事件监听\n    this.addEventListener();\n  },\n  methods: {\n    getElement: function getElement(id) {\n      var noCaseId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!this.el[id]) {\n        this.el[id] = document.getElementById((noCaseId ? '' : this.caseId) + id);\n      }\n      return this.el[id];\n    },\n    getElementPromise: function getElementPromise(id) {\n      var _this6 = this;\n      var noCaseId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new Promise(function (resolve) {\n        var timer = setInterval(function () {\n          var element = _this6.getElement(id, noCaseId);\n          if (element) {\n            clearInterval(timer);\n            resolve(element);\n          }\n        }, 10);\n      });\n    },\n    /** 初始化列表 */initialize: function initialize() {\n      this.visibleTrEls = [];\n      // 判断是否是首次进入该方法，如果是就不清空行，防止删除了预添加的数据\n      if (!this.isFirst) {\n        this.clearRow();\n      } else {\n        this.isFirst = false;\n      }\n    },\n    /**清空行*/clearRow: function clearRow() {\n      var _this7 = this;\n      // inputValues：用来存储input表单的值\n      // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n      // 示例：\n      // [{\n      //    id: \"_jet-4sp0iu-15541771111770\"\n      //    dbDefaultVal: \"aaa\",\n      //    dbFieldName: \"bbb\",\n      //    dbFieldTxt: \"ccc\",\n      //    dbLength: 32\n      // }]\n      this.inputValues = [];\n      this.rows = [];\n      this.deleteIds = [];\n      this.selectedRowIds = [];\n      this.tooltips = {};\n      this.notPassedIds = [];\n      // 重置values\n      this.selectValues = {};\n      this.checkboxValues = {};\n      this.jdateValues = {};\n      this.jInputPopValues = {};\n      this.departCompValues = {};\n      this.userCompValues = {};\n      this.slotValues = {};\n      //update-begin-author:shunjlei date:20210415 for:类型赋值错误\n      this.uploadValues = {};\n      this.popupValues = {};\n      this.radioValues = {};\n      this.multiSelectValues = {};\n      this.searchSelectValues = {};\n      this.searchSelectAsyncValues = {};\n      //update-end-author:shunjlei date:20210415 for:类型赋值错误\n\n      // 重置滚动条\n      this.scrollTop = 0;\n      this.$nextTick(function () {\n        _this7.getElement('tbody').scrollTop = 0;\n      });\n    },\n    /** 同步滚动条状态 */syncScrollBar: function syncScrollBar(scrollLeft) {\n      // this.style.tbody.left = `${scrollLeft}px`\n      // this.getElement('tbody').scrollLeft = scrollLeft\n    },\n    /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */resetScrollTop: function resetScrollTop(top) {\n      var scrollView = this.$refs.scrollView;\n      if (top != null && typeof top === 'number') {\n        scrollView.scrollTop = top;\n      } else {\n        scrollView.scrollTop = this.scrollTop;\n      }\n    },\n    /** 重新计算需要隐藏或显示的tr */recalcTrHiddenItem: function recalcTrHiddenItem(top) {\n      var _this8 = this;\n      var diff = top - this.scrollTop;\n      if (diff < 0) {\n        diff = this.scrollTop - top;\n      }\n      // 只有在滚动了百分之三十的行高的距离时才进行更新\n      if (diff >= this.rowHeight * 0.3) {\n        this.scrollTop = top;\n        // 更新form表单的值\n        this.$nextTick(function () {\n          _this8.updateFormValues();\n        });\n      }\n    },\n    /** 生成id */generateId: function generateId(rows) {\n      if (!(rows instanceof Array)) {\n        rows = this.rows || [];\n      }\n      var timestamp = new Date().getTime();\n      return \"\".concat(this.caseId).concat(timestamp).concat(rows.length).concat(randomNumber(6)).concat(this.tempId);\n    },\n    /** push 一条数据 */push: function push(record) {\n      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rows = arguments.length > 2 ? arguments[2] : undefined;\n      var insertIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var setDefaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      return this._pushByDataSource([record], [insertIndex], update, rows, setDefaultValue);\n    },\n    /**\n     * push 数据\n     *\n     * @param dataSource 数据源\n     * @param insertIndexes 行插入位置，和dataSource的下标一一对应\n     * @param update 是否更新\n     * @param rows 若不传就使用 this.rows\n     * @param setDefaultValue 是否填充默认值\n     *\n     */\n    _pushByDataSource: function _pushByDataSource(dataSource) {\n      var _this9 = this;\n      var insertIndexes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var setDefaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (!(rows instanceof Array)) {\n        rows = _toConsumableArray(this.rows) || [];\n      }\n      var checkboxValues = _objectSpread({}, this.checkboxValues);\n      var selectValues = _objectSpread({}, this.selectValues);\n      var jdateValues = _objectSpread({}, this.jdateValues);\n      var departCompValues = _objectSpread({}, this.departCompValues);\n      var userCompValues = _objectSpread({}, this.userCompValues);\n      var jInputPopValues = _objectSpread({}, this.jInputPopValues);\n      var slotValues = _objectSpread({}, this.slotValues);\n      var uploadValues = _objectSpread({}, this.uploadValues);\n      var popupValues = _objectSpread({}, this.popupValues);\n      var radioValues = _objectSpread({}, this.radioValues);\n      var multiSelectValues = _objectSpread({}, this.multiSelectValues);\n      var searchSelectValues = _objectSpread({}, this.searchSelectValues);\n      var searchSelectAsyncValues = _objectSpread({}, this.searchSelectAsyncValues);\n      // 禁用行的id\n      var disabledRowIds = this.disabledRowIds || [];\n      dataSource.forEach(function (data, newValueIndex) {\n        // 不能直接更改数据源的id\n        var dataId = data.id;\n        // 判断源数据是否带有id\n        if (dataId == null || dataId === '') {\n          dataId = _this9.generateId(rows);\n        } else if (!_this9.hasCaseId(dataId)) {\n          dataId = _this9.caseId + dataId;\n        }\n        var row = {\n          id: dataId\n        };\n        var value = {\n          id: dataId\n        };\n        var disabled = false;\n        _this9.columns.forEach(function (column) {\n          var inputId = column.key + value.id;\n          var sourceValue = (data[column.key] == null ? '' : data[column.key]).toString();\n          var defaultValue = null;\n          if (setDefaultValue) {\n            defaultValue = column.defaultValue || (column.defaultValue === 0 ? 0 : '');\n            if (defaultValue instanceof Array) {\n              defaultValue = defaultValue.join(',');\n            }\n            sourceValue = typeof sourceValue === 'number' || sourceValue ? sourceValue : defaultValue;\n          }\n          var sourceValueIsEmpty = sourceValue == null || sourceValue === '';\n          if (column.type === FormTypes.inputNumber) {\n            // 判断是否是排序字段，如果是就赋最大值\n            if (column.isOrder === true) {\n              value[column.key] = _this9.getInputNumberMaxValue(column) + 1;\n            } else {\n              value[column.key] = sourceValue;\n            }\n            // 判断是否是统计列\n            if (column.statistics) {\n              _this9.hasStatisticsColumn = true;\n              if (!_this9.statisticsColumns[column.key]) {\n                _this9.$set(_this9.statisticsColumns, column.key, 0);\n              }\n            }\n          } else if (column.type === FormTypes.checkbox) {\n            // 判断是否设定了customValue（自定义值）\n            if (column.customValue instanceof Array) {\n              var customValue = (column.customValue[0] || '').toString();\n              if (sourceValueIsEmpty && setDefaultValue) {\n                sourceValue = column.defaultChecked ? customValue : sourceValue;\n              }\n              checkboxValues[inputId] = sourceValue === customValue;\n            } else {\n              if (sourceValueIsEmpty && setDefaultValue) {\n                checkboxValues[inputId] = !!column.defaultChecked;\n              } else {\n                checkboxValues[inputId] = sourceValue;\n              }\n            }\n          } else if (column.type === FormTypes.select) {\n            if (!sourceValueIsEmpty) {\n              // 判断是否是多选\n              if (typeof sourceValue === 'string' && (column.props || {})['mode'] === 'multiple') {\n                sourceValue = sourceValue === '' ? [] : sourceValue.split(',');\n              }\n              selectValues[inputId] = sourceValue;\n            } else {\n              selectValues[inputId] = undefined;\n            }\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            jdateValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.slot) {\n            slotValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.popup) {\n            popupValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_depart) {\n            departCompValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_user) {\n            userCompValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.input_pop) {\n            jInputPopValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.radio) {\n            radioValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_search) {\n            searchSelectValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_search_async) {\n            searchSelectAsyncValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.list_multi) {\n            if (typeof sourceValue === 'string' && sourceValue.length > 0) {\n              multiSelectValues[inputId] = sourceValue.split(',');\n            } else {\n              multiSelectValues[inputId] = [];\n            }\n          } else if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n            if (sourceValue) {\n              var fileName = '';\n              if (sourceValue.indexOf(',') > 0) {\n                var sourceValue2 = sourceValue.split(',')[0];\n                fileName = sourceValue2.substring(sourceValue2.lastIndexOf('/') + 1);\n              } else {\n                fileName = sourceValue.substring(sourceValue.lastIndexOf('/') + 1);\n              }\n              uploadValues[inputId] = {\n                name: fileName,\n                status: 'done',\n                path: sourceValue\n              };\n            } else {\n              uploadValues[inputId] = null;\n            }\n          } else {\n            value[column.key] = sourceValue;\n          }\n\n          // 解析disabledRows\n          for (var columnKey in _this9.disabledRows) {\n            // 判断是否有该属性\n            if (_this9.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n              if (disabled !== true) {\n                var temp = _this9.disabledRows[columnKey];\n                // 禁用规则可以是一个数组\n                if (temp instanceof Array) {\n                  disabled = temp.includes(data[columnKey]);\n                } else {\n                  disabled = temp === data[columnKey];\n                }\n                if (disabled) {\n                  disabledRowIds.push(row.id);\n                }\n              }\n            }\n          }\n        });\n        // 插入行而不是添加到最后\n        var added = false;\n        if (insertIndexes instanceof Array) {\n          var insertIndex = insertIndexes[newValueIndex];\n          if (typeof insertIndex === 'number') {\n            added = true;\n            rows.splice(insertIndex, 0, row);\n            _this9.inputValues.splice(insertIndex, 0, value);\n          }\n        }\n        //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n        if (-1 !== rows.findIndex(function (item) {\n          return item.id === row.id;\n        })) {\n          added = true;\n          _this9.inputValues = _this9.inputValues.map(function (item) {\n            return item.id === row.id ? value : item;\n          });\n        }\n        //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n        if (!added) {\n          rows.push(row);\n          _this9.inputValues.push(value);\n        }\n      });\n      // 启用了拖动排序，就重新计算排序编号\n      if (this.dragSort) {\n        this.inputValues.forEach(function (item, index) {\n          item[_this9.dragSortKey] = index + 1;\n        });\n      }\n      this.disabledRowIds = disabledRowIds;\n      this.checkboxValues = checkboxValues;\n      this.selectValues = selectValues;\n      this.jdateValues = jdateValues;\n      this.departCompValues = departCompValues;\n      this.userCompValues = userCompValues;\n      this.jInputPopValues = jInputPopValues;\n      this.slotValues = slotValues;\n      this.uploadValues = uploadValues;\n      this.popupValues = popupValues;\n      this.radioValues = radioValues;\n      this.multiSelectValues = multiSelectValues;\n      this.searchSelectValues = searchSelectValues;\n      this.searchSelectAsyncValues = searchSelectAsyncValues;\n      // 重新计算所有统计列\n      this.recalcAllStatisticsColumns();\n      // 更新到 dom\n      if (update) {\n        this.rows = rows;\n\n        // 更新form表单的值\n        this.$nextTick(function () {\n          _this9.forceUpdateFormValues();\n        });\n      }\n      return rows;\n    },\n    /** 获取某一数字输入框列中的最大的值 */getInputNumberMaxValue: function getInputNumberMaxValue(column) {\n      var maxNum = 0;\n      this.inputValues.forEach(function (item, index) {\n        var val = item[column.key],\n          num;\n        try {\n          num = parseInt(val);\n        } catch (_unused) {\n          num = 0;\n        }\n        // 把首次循环的结果当成最大值\n        if (index === 0) {\n          maxNum = num;\n        } else {\n          maxNum = num > maxNum ? num : maxNum;\n        }\n      });\n      return maxNum;\n    },\n    /** 添加一行 */add: function add() {\n      var _this10 = this;\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var forceScrollToBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (num < 1) return;\n      // let timestamp = new Date().getTime()\n      var rows = this.rows;\n      var row;\n      for (var i = 0; i < num; i++) {\n        rows = this.push({}, false, rows);\n        row = rows[rows.length - 1];\n      }\n      this.rows = rows;\n      this.$nextTick(function () {\n        _this10.updateFormValues();\n      });\n      // 触发add事件\n      this.$emit('added', {\n        row: function () {\n          var r = Object.assign({}, row);\n          r.id = _this10.getCleanId(r.id);\n          return r;\n        }(),\n        target: this\n      });\n      // 设置滚动条位置\n      var tbody = this.getElement('tbody');\n      var offsetHeight = tbody.offsetHeight;\n      var realScrollTop = tbody.scrollTop + offsetHeight;\n      if (forceScrollToBottom === false) {\n        // 只有滚动条在底部的时候才自动滚动\n        if (!(tbody.scrollHeight - realScrollTop <= 10)) {\n          return;\n        }\n      }\n      this.$nextTick(function () {\n        tbody.scrollTop = tbody.scrollHeight;\n      });\n    },\n    /**\n     * 在指定位置添加一行\n     * @param insertIndex 添加位置下标\n     * @param num 添加的行数，默认1\n     */\n    insert: function insert(insertIndex) {\n      var _this11 = this;\n      var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (this.checkTooFastClick('insert', 1500)) {\n        return;\n      }\n      if (!insertIndex && num < 1) return;\n      var rows = this.rows;\n      var newRows = [];\n      for (var i = 0; i < num; i++) {\n        var row = {\n          id: this.generateId(rows)\n        };\n        rows = this.push(row, false, rows, insertIndex);\n        newRows.push(row);\n      }\n      // 同步更改\n      this.rows = rows;\n      this.$nextTick(function () {\n        _this11.recalcSortNumber();\n        _this11.forceUpdateFormValues();\n      });\n      // 触发 insert 事件\n      this.$emit('inserted', {\n        rows: newRows.map(function (row) {\n          var r = cloneObject(row);\n          r.id = _this11.getCleanId(r.id);\n          return r;\n        }),\n        num: num,\n        insertIndex: insertIndex,\n        target: this\n      });\n    },\n    /** 删除被选中的行 */removeSelectedRows: function removeSelectedRows() {\n      this.removeRows(this.selectedRowIds);\n      this.selectedRowIds = [];\n    },\n    /** 删除一行或多行 */removeRows: function removeRows(id) {\n      var _this12 = this;\n      var ids = id;\n      if (!(id instanceof Array)) {\n        if (typeof id === 'string') {\n          ids = [id];\n        } else {\n          throw \"JEditableTable.removeRows() \\u51FD\\u6570\\u9700\\u8981\\u7684\\u53C2\\u6570\\u53EF\\u4EE5\\u662Fstring\\u6216Array\\u7C7B\\u578B\\uFF0C\\u4F46\\u63D0\\u4F9B\\u7684\\u5374\\u662F\".concat(_typeof(id));\n        }\n      }\n      var rows = cloneObject(this.rows);\n      ids.forEach(function (removeId) {\n        removeId = _this12.getCleanId(removeId);\n        // 找到每个id对应的真实index并删除\n        var findAndDelete = function findAndDelete(arr) {\n          for (var i = 0; i < arr.length; i++) {\n            var currentId = _this12.getCleanId(arr[i].id);\n            if (currentId === removeId) {\n              arr.splice(i, 1);\n              return true;\n            }\n          }\n        };\n        // 找到rows对应的index，并删除\n        if (findAndDelete(rows)) {\n          // 找到values对应的index，并删除\n          findAndDelete(_this12.inputValues);\n          // 将caseId去除\n          var _id = _this12.getCleanId(removeId);\n          _this12.deleteIds.push(_id);\n        }\n      });\n      this.rows = rows;\n      this.$emit('deleted', this.getDeleteIds(), this);\n      this.$nextTick(function () {\n        // 更新formValues\n        _this12.updateFormValues();\n        // 重新计算统计\n        _this12.recalcAllStatisticsColumns();\n      });\n      return true;\n    },\n    /** 获取表格表单里的值（异步版） */getValuesAsync: function getValuesAsync() {\n      var _this13 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var validate = options.validate,\n        rowIds = options.rowIds,\n        deleteTempId = options.deleteTempId;\n      if (typeof validate !== 'boolean') validate = true;\n      if (!(rowIds instanceof Array)) rowIds = null;\n      // 是否删除临时ID，默认为 false\n      if (typeof deleteTempId !== 'boolean') deleteTempId = false;\n      // console.log('options:', { validate, rowIds })\n\n      var asyncCount = 0;\n      var error = 0;\n      var inputValues = cloneObject(this.inputValues);\n      var tooltips = Object.assign({}, this.tooltips);\n      var notPassedIds = cloneObject(this.notPassedIds);\n      // 用于存储合并后的值\n      var values = [];\n      // 遍历inputValues来获取每行的值\n      var _iterator = _createForOfIteratorHelper(inputValues),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var value = _step.value;\n          var rowIdsFlag = false;\n          // 如果带有rowIds，那么就只存这几行的数据\n          if (rowIds == null) {\n            rowIdsFlag = true;\n          } else {\n            var _iterator2 = _createForOfIteratorHelper(rowIds),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var rowId = _step2.value;\n                if (_this13.getCleanId(rowId) === _this13.getCleanId(value.id)) {\n                  rowIdsFlag = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n          if (!rowIdsFlag) return 1; // continue\n          _this13.columns.forEach(function (column) {\n            var inputId = column.key + value.id;\n            if (column.type === FormTypes.checkbox) {\n              var checked = _this13.checkboxValues[inputId];\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1];\n              } else {\n                value[column.key] = checked;\n              }\n            } else if (column.type === FormTypes.select) {\n              var selected = _this13.selectValues[inputId];\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected);\n              } else {\n                value[column.key] = selected;\n              }\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              value[column.key] = _this13.jdateValues[inputId];\n            } else if (column.type === FormTypes.sel_depart) {\n              value[column.key] = _this13.departCompValues[inputId];\n            } else if (column.type === FormTypes.sel_user) {\n              value[column.key] = _this13.userCompValues[inputId];\n            } else if (column.type === FormTypes.input_pop) {\n              value[column.key] = _this13.jInputPopValues[inputId];\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(_this13.uploadValues[inputId] || null);\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n              var currUploadObj = cloneObject(_this13.uploadValues[inputId] || null);\n              if (currUploadObj) {\n                value[column.key] = currUploadObj['path'] || null;\n              }\n            } else if (column.type === FormTypes.popup) {\n              if (!value[column.key]) {\n                value[column.key] = _this13.popupValues[inputId] || null;\n              }\n            } else if (column.type === FormTypes.radio) {\n              value[column.key] = _this13.radioValues[inputId];\n            } else if (column.type === FormTypes.sel_search) {\n              value[column.key] = _this13.searchSelectValues[inputId];\n            } else if (column.type === FormTypes.sel_search_async) {\n              value[column.key] = _this13.searchSelectAsyncValues[inputId];\n            } else if (column.type === FormTypes.list_multi) {\n              if (!_this13.multiSelectValues[inputId] || _this13.multiSelectValues[inputId].length === 0) {\n                value[column.key] = '';\n              } else {\n                value[column.key] = _this13.multiSelectValues[inputId].join(',');\n              }\n            } else if (column.type === FormTypes.slot) {\n              value[column.key] = _this13.slotValues[inputId];\n            }\n\n            // 检查表单验证\n            if (validate === true) {\n              var handleValidateOneInput = function handleValidateOneInput(results) {\n                tooltips[inputId] = results[0];\n                if (tooltips[inputId].passed === false) {\n                  error++;\n                  // if (error++ === 0) {\n                  // let element = document.getElementById(inputId)\n                  // while (element.className !== 'tr') {\n                  //   element = element.parentElement\n                  // }\n                  // this.jumpToId(inputId, element)\n                  // }\n                }\n                tooltips[inputId].visible = false;\n                notPassedIds = results[1];\n              };\n              asyncCount++;\n              var results = _this13.validateOneInputAsync(value[column.key], value, column, notPassedIds, false, 'getValues', function (results) {\n                handleValidateOneInput(results);\n                asyncCount--;\n              });\n              handleValidateOneInput(results);\n            }\n          });\n          // 删除 tempId\n          if (deleteTempId && _this13.isTempId(value.id)) {\n            delete value.id;\n          } else {\n            value.id = _this13.getCleanId(value.id);\n          }\n          values.push(value);\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          if (_loop()) continue;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (validate === true) {\n        this.tooltips = tooltips;\n        this.notPassedIds = notPassedIds;\n      }\n      var timer = setInterval(function () {\n        if (asyncCount === 0) {\n          clearInterval(timer);\n          if (typeof callback === 'function') {\n            callback({\n              error: error,\n              values: values\n            });\n          }\n        }\n      }, 10);\n      return {\n        error: error,\n        values: values\n      };\n    },\n    /** 获取表格表单里的值（同步版） */getValuesSync: function getValuesSync() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.getValuesAsync(options);\n    },\n    /** 获取表格表单里的值 */getValues: function getValues(callback) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rowIds = arguments.length > 2 ? arguments[2] : undefined;\n      this.getValuesAsync({\n        validate: validate,\n        rowIds: rowIds\n      }, function (_ref) {\n        var error = _ref.error,\n          values = _ref.values;\n        if (typeof callback === 'function') {\n          callback(error, values);\n        }\n      });\n    },\n    /** getValues的Promise版 */getValuesPromise: function getValuesPromise() {\n      var _this14 = this;\n      var validate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var rowIds = arguments.length > 1 ? arguments[1] : undefined;\n      var deleteTempId = arguments.length > 2 ? arguments[2] : undefined;\n      return new Promise(function (resolve, reject) {\n        _this14.getValuesAsync({\n          validate: validate,\n          rowIds: rowIds,\n          deleteTempId: deleteTempId\n        }, function (_ref2) {\n          var error = _ref2.error,\n            values = _ref2.values;\n          if (error === 0) {\n            resolve(values);\n          } else {\n            reject(VALIDATE_NO_PASSED);\n          }\n        });\n      });\n    },\n    /** 获取被删除项的id */getDeleteIds: function getDeleteIds() {\n      return cloneObject(this.deleteIds);\n    },\n    /** 获取所有的数据，包括values、deleteIds */getAll: function getAll(validate, deleteTempId) {\n      var _this15 = this;\n      return new Promise(function (resolve, reject) {\n        var deleteIds = _this15.getDeleteIds();\n        _this15.getValuesPromise(validate, null, deleteTempId).then(function (values) {\n          resolve({\n            values: values,\n            deleteIds: deleteIds\n          });\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    /** Sync 获取所有的数据，包括values、deleteIds */getAllSync: function getAllSync(validate, rowIds, deleteTempId) {\n      var result = this.getValuesSync({\n        validate: validate,\n        rowIds: rowIds,\n        deleteTempId: deleteTempId\n      });\n      result.deleteIds = this.getDeleteIds();\n      return result;\n    },\n    // slot 获取值\n    _getValueForSlot: function _getValueForSlot(rowId) {\n      return this.getValuesSync({\n        rowIds: [rowId]\n      }).values[0];\n    },\n    _getAllValuesForSlot: function _getAllValuesForSlot() {\n      return cloneObject({\n        inputValues: this.inputValues,\n        selectValues: this.selectValues,\n        checkboxValues: this.checkboxValues,\n        jdateValues: this.jdateValues,\n        departCompValues: this.departCompValues,\n        userCompValues: this.userCompValues,\n        jInputPopValues: this.jInputPopValues,\n        slotValues: this.slotValues,\n        uploadValues: this.uploadValues,\n        popupValues: this.popupValues,\n        radioValues: this.radioValues,\n        multiSelectValues: this.multiSelectValues,\n        searchSelectValues: this.searchSelectValues,\n        searchSelectAsyncValues: this.searchSelectAsyncValues\n      });\n    },\n    /** 设置某行某列的值 */setValues: function setValues(values) {\n      var _this16 = this;\n      values.forEach(function (item) {\n        var rowKey = item.rowKey,\n          newValues = item.values;\n        rowKey = _this16.getCleanId(rowKey);\n        var _loop2 = function _loop2(newValueKey) {\n          if (newValues.hasOwnProperty(newValueKey)) {\n            var edited = false; // 已被修改\n            var _iterator3 = _createForOfIteratorHelper(_this16.columns),\n              _step3;\n            try {\n              var _loop3 = function _loop3() {\n                var column = _step3.value;\n                if (column.key === newValueKey) {\n                  var newValue = newValues[newValueKey];\n                  _this16.inputValues.forEach(function (value) {\n                    // 在inputValues中找到了该字段\n                    if (rowKey === _this16.getCleanId(value.id)) {\n                      if (value.hasOwnProperty(newValueKey)) {\n                        edited = true;\n                        value[newValueKey] = newValue;\n                      }\n                    }\n                  });\n                  if (!edited) {\n                    var modelKey = \"\".concat(newValueKey).concat(_this16.caseId).concat(rowKey);\n                    if (column.type === FormTypes.select) {\n                      if (newValue !== 0 && !newValue) {\n                        edited = _this16.setOneValue(_this16.selectValues, modelKey, undefined);\n                      } else {\n                        edited = _this16.setOneValue(_this16.selectValues, modelKey, newValue);\n                      }\n                    } else if (column.type === FormTypes.checkbox) {\n                      // checkbox 特殊处理 CustomValue\n                      var key = _this16.valuesHasOwnProperty(_this16.checkboxValues, modelKey);\n                      // 找到对应的column\n                      var sourceValue;\n                      // 判断是否设定了customValue（自定义值）\n                      if (column.customValue instanceof Array) {\n                        var customValue = (column.customValue[0] || '').toString();\n                        sourceValue = newValue === customValue;\n                      } else {\n                        sourceValue = !!newValue;\n                      }\n                      _this16.$set(_this16.checkboxValues, key, sourceValue);\n                      edited = true;\n                    } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n                      edited = _this16.setOneValue(_this16.jdateValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.sel_depart) {\n                      edited = _this16.setOneValue(_this16.departCompValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.sel_user) {\n                      edited = _this16.setOneValue(_this16.userCompValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.input_pop) {\n                      edited = _this16.setOneValue(_this16.jInputPopValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.slot) {\n                      edited = _this16.setOneValue(_this16.slotValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.upload || column.type === FormTypes.image || column.type === FormTypes.file) {\n                      edited = _this16.setOneValue(_this16.uploadValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.popup) {\n                      edited = _this16.setOneValue(_this16.popupValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.radio) {\n                      edited = _this16.setOneValue(_this16.radioValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.list_multi) {\n                      edited = _this16.setOneValue(_this16.multiSelectValues, modelKey, newValue, true);\n                    } else if (column.type === FormTypes.sel_search) {\n                      edited = _this16.setOneValue(_this16.searchSelectValues, modelKey, newValue);\n                    } else if (column.type === FormTypes.sel_search_async) {\n                      edited = _this16.setOneValue(_this16.searchSelectAsyncValues, modelKey, newValue);\n                    } else {\n                      edited = false;\n                    }\n                  }\n                  if (edited) {\n                    _this16.elemValueChange(column.type, _defineProperty({}, newValueKey, newValue), column, newValue);\n                  }\n                }\n              };\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                _loop3();\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n            if (!edited) {\n              console.warn(\"JEditableTable.setValues\\uFF1A\\u6CA1\\u6709\\u627E\\u5230\\\"\".concat(newValueKey, \"\\\"\\u5217\"));\n            }\n          }\n        };\n        for (var newValueKey in newValues) {\n          _loop2(newValueKey);\n        }\n      });\n      // 强制更新formValues\n      this.forceUpdateFormValues();\n    },\n    /**\n     * 设置单个组件的值\n     * @param valuesObject 组件存储值的对象\n     * @param modelKey 组件存储值的对象里的key\n     * @param value 新值\n     * @param isMultiple 是否多选，如果是就会对 value 进行一个 split(',') 的操作\n     */\n    setOneValue: function setOneValue(valuesObject, modelKey, value) {\n      var isMultiple = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var key = this.valuesHasOwnProperty(valuesObject, modelKey);\n      if (key) {\n        // 处理多选数组\n        if (isMultiple && !Array.isArray(value)) {\n          value = (value || '').toString().trim();\n          value = value === '' ? [] : value.split(',');\n        }\n        this.$set(valuesObject, key, value);\n        return true;\n      }\n      return false;\n    },\n    valuesHasOwnProperty: function valuesHasOwnProperty(values, ownProperty) {\n      var key = ownProperty;\n      if (values.hasOwnProperty(key)) {\n        return key;\n      }\n      if (values.hasOwnProperty(key + this.tempId)) {\n        return key + this.tempId;\n      }\n      return null;\n    },\n    /** 跳转到指定位置 */\n    // jumpToId(id, element) {\n    //   if (element == null) {\n    //     element = document.getElementById(id)\n    //   }\n    //   if (element != null) {\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //     this.getElement('tbody').scrollTop = element.offsetTop\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //   }\n    // },\n    /**\n     * 验证单个表单，异步版\n     *\n     * @param value 校验的值\n     * @param row 校验的行\n     * @param column 校验的列\n     * @param notPassedIds 没有通过校验的 id\n     * @param update 是否更新到vue中\n     * @param validType 校验触发的方式（input、blur等）\n     * @param callback\n     */\n    validateOneInputAsync: function validateOneInputAsync(value, row, column, notPassedIds) {\n      var _this17 = this;\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'input';\n      var callback = arguments.length > 6 ? arguments[6] : undefined;\n      var tooltips = Object.assign({}, this.tooltips);\n      // let notPassedIds = cloneObject(this.notPassedIds)\n      var inputId = column.key + row.id;\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {};\n      var _this$validateValue = this.validateValue(column, value),\n        _this$validateValue2 = _slicedToArray(_this$validateValue, 2),\n        passed = _this$validateValue2[0],\n        message = _this$validateValue2[1];\n      var nextThen = function nextThen(res) {\n        var _res = _slicedToArray(res, 2),\n          passed = _res[0],\n          message = _res[1];\n        // !(passed == null && tooltips[inputId].visible != null)\n        if (passed != null) {\n          tooltips[inputId].visible = !passed;\n          tooltips[inputId].passed = passed;\n          var index = notPassedIds.indexOf(inputId);\n          if (!passed) {\n            tooltips[inputId].title = _this17.replaceProps(column, message);\n            if (index === -1) notPassedIds.push(inputId);\n          } else {\n            if (index !== -1) notPassedIds.splice(index, 1);\n          }\n        }\n        // 是否更新到data\n        if (update) {\n          _this17.tooltips = tooltips;\n          _this17.notPassedIds = notPassedIds;\n        }\n        if (typeof callback === 'function') {\n          callback([tooltips[inputId], notPassedIds]);\n        }\n      };\n      if (typeof passed === 'function') {\n        var executed = false;\n        passed(validType, value, {\n          id: this.getCleanId(row.id)\n        }, _objectSpread({}, column), function (flag, msg) {\n          if (executed) return;\n          executed = true;\n          if (typeof msg === 'string') {\n            message = msg;\n          }\n          if (flag == null) {\n            nextThen([true, message]);\n          } else {\n            nextThen([!!flag, message]);\n          }\n        }, this);\n      } else {\n        nextThen([passed, message]);\n      }\n      return [tooltips[inputId], notPassedIds];\n    },\n    /** 验证单个表单 */validateOneInput: function validateOneInput(value, row, column, notPassedIds) {\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'input';\n      return this.validateOneInputAsync(value, row, column, notPassedIds, update, validType);\n    },\n    /** 通过规则验证值是否正确 */validateValue: function validateValue(column, value) {\n      var rules = column.validateRules;\n      var passed = true,\n        message = '';\n      // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n      if (rules instanceof Array) {\n        var _iterator4 = _createForOfIteratorHelper(rules),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var rule = _step4.value;\n            // 当前值是否为空\n            var isNull = value == null || value === '';\n            // 验证规则：非空\n            if (rule.required === true && isNull) {\n              passed = false;\n            } else\n              // 使用 else-if 是为了防止一个 rule 中出现两个规则\n              // 验证规则：唯一校验\n              if (rule.unique === true || rule.pattern === 'only') {\n                var _this$getValuesSync = this.getValuesSync({\n                    validate: false\n                  }),\n                  values = _this$getValuesSync.values;\n                var findCount = 0;\n                var _iterator5 = _createForOfIteratorHelper(values),\n                  _step5;\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var val = _step5.value;\n                    if (val[column.key] === value) {\n                      if (++findCount >= 2) {\n                        passed = false;\n                        break;\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              } else\n                // 验证规则：正则表达式\n                if (!!rule.pattern && !isNull) {\n                  // 兼容 online 的规则\n                  var foo = [{\n                    title: '6到16位数字',\n                    value: 'n6-16',\n                    pattern: /^\\d{6,16}$/\n                  }, {\n                    title: '6到16位任意字符',\n                    value: '*6-16',\n                    pattern: /^.{6,16}$/\n                  }, {\n                    title: '6到18位字母',\n                    value: 's6-18',\n                    pattern: /^[a-z|A-Z]{6,18}$/\n                  }, {\n                    title: '网址',\n                    value: 'url',\n                    pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/\n                  }, {\n                    title: '电子邮件',\n                    value: 'e',\n                    pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/\n                  }, {\n                    title: '手机号码',\n                    value: 'm',\n                    pattern: /^1[3456789]\\d{9}$/\n                  }, {\n                    title: '邮政编码',\n                    value: 'p',\n                    pattern: /^[1-9]\\d{5}$/\n                  }, {\n                    title: '字母',\n                    value: 's',\n                    pattern: /^[A-Z|a-z]+$/\n                  }, {\n                    title: '数字',\n                    value: 'n',\n                    pattern: /^-?\\d+(\\.?\\d+|\\d?)$/\n                  }, {\n                    title: '整数',\n                    value: 'z',\n                    pattern: /^-?\\d+$/\n                  }, {\n                    title: '非空',\n                    value: '*',\n                    pattern: /^.+$/\n                  }, {\n                    title: '金额',\n                    value: 'money',\n                    pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/\n                  }];\n                  var flag = false;\n                  for (var _i = 0, _foo = foo; _i < _foo.length; _i++) {\n                    var item = _foo[_i];\n                    if (rule.pattern === item.value && item.pattern) {\n                      passed = new RegExp(item.pattern).test(value);\n                      flag = true;\n                      break;\n                    }\n                  }\n                  if (!flag) passed = new RegExp(rule.pattern).test(value);\n                } else\n                  // 校验规则：自定义函数校验\n                  if (typeof rule.handler === 'function') {\n                    return [rule.handler, rule.message];\n                  }\n            // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n            if (!passed) {\n              message = rule.message;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n      return [passed, message];\n    },\n    /** 动态更新表单的值 */updateFormValues: function updateFormValues() {\n      var _this18 = this;\n      var trs = this.getElement('tbody').getElementsByClassName('tr');\n      var trEls = [];\n      var _iterator6 = _createForOfIteratorHelper(trs),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _tr = _step6.value;\n          trEls.push(_tr);\n        }\n        // 获取新增的 tr\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var newTrEls = trEls;\n      if (this.visibleTrEls.length > 0) {\n        newTrEls = [];\n        var _iterator7 = _createForOfIteratorHelper(trEls),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var tr = _step7.value;\n            var isNewest = true;\n            var _iterator8 = _createForOfIteratorHelper(this.visibleTrEls),\n              _step8;\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var vtr = _step8.value;\n                if (vtr.id === tr.id) {\n                  isNewest = false;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n            if (isNewest) {\n              newTrEls.push(tr);\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n      this.visibleTrEls = trEls;\n      // 向新增的tr中赋值\n      newTrEls.forEach(function (tr) {\n        var idx = tr.dataset.idx;\n        var value = _this18.inputValues[idx];\n        for (var key in value) {\n          if (value.hasOwnProperty(key)) {\n            var elid = \"\".concat(key).concat(value.id);\n            var el = document.getElementById(elid);\n            if (el) {\n              el.value = value[key];\n            }\n          }\n        }\n      });\n    },\n    /** 强制更新FormValues */forceUpdateFormValues: function forceUpdateFormValues() {\n      var _this19 = this;\n      this.visibleTrEls = [];\n      this.$forceUpdate();\n      this.$nextTick(function () {\n        return _this19.updateFormValues();\n      });\n    },\n    // 重新计算所有统计列\n    recalcAllStatisticsColumns: function recalcAllStatisticsColumns() {\n      var _this20 = this;\n      if (this.hasStatisticsColumn) {\n        Object.keys(this.statisticsColumns).forEach(function (key) {\n          return _this20.recalcOneStatisticsColumn(key);\n        });\n      }\n    },\n    // 重新计算单个统计列\n    recalcOneStatisticsColumn: function recalcOneStatisticsColumn(key) {\n      if (this.hasStatisticsColumn) {\n        if (this.statisticsColumns.hasOwnProperty(key)) {\n          // 计算合计值\n          var count = 0;\n          this.inputValues.forEach(function (item) {\n            var value = item[key];\n            if (value && count !== '-') {\n              try {\n                count += Number.parseInt(value);\n              } catch (e) {\n                count = '-';\n              }\n            }\n          });\n          this.statisticsColumns[key] = count;\n        }\n      }\n    },\n    /** 获取某个统计字段的值 */getStatisticsValue: function getStatisticsValue(key) {\n      if (this.hasStatisticsColumn) {\n        if (this.statisticsColumns.hasOwnProperty(key)) {\n          return this.statisticsColumns[key];\n        }\n      }\n      return null;\n    },\n    /** 全选或取消全选 */handleChangeCheckedAll: function handleChangeCheckedAll() {\n      var _this21 = this;\n      var selectedRowIds = [];\n      if (!this.getSelectAll) {\n        this.rows.forEach(function (row) {\n          if ((_this21.disabledRowIds || []).indexOf(row.id) === -1) {\n            selectedRowIds.push(row.id);\n          }\n        });\n      }\n      this.selectedRowIds = selectedRowIds;\n    },\n    /** 左侧行选择框change事件 */handleChangeLeftCheckbox: function handleChangeLeftCheckbox(event) {\n      var id = event.target.id;\n      if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n        return;\n      }\n      var index = this.selectedRowIds.indexOf(id);\n      if (index !== -1) {\n        this.selectedRowIds.splice(index, 1);\n      } else {\n        this.selectedRowIds.push(id);\n      }\n    },\n    handleClickAdd: function handleClickAdd() {\n      this.add();\n    },\n    handleConfirmDelete: function handleConfirmDelete() {\n      this.removeSelectedRows();\n    },\n    handleClickClearSelection: function handleClickClearSelection() {\n      this.clearSelection();\n    },\n    clearSelection: function clearSelection() {\n      this.selectedRowIds = [];\n    },\n    /** 用于搜索下拉框中的内容 */handleSelectFilterOption: function handleSelectFilterOption(input, option, column) {\n      if (column.allowSearch === true || column.allowInput === true) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      }\n      return true;\n    },\n    /** select 搜索时的事件，用于动态添加options */handleSearchSelect: function handleSearchSelect(value, id, row, col) {\n      if (col.allowSearch !== true && col.allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        var flag = false;\n        var _iterator9 = _createForOfIteratorHelper(col.options),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var option = _step9.value;\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true;\n              break;\n            }\n          }\n          // !!value ：不添加空值\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          col.options.push({\n            title: value,\n            value: value,\n            searchAdd: true\n          });\n        }\n      }\n    },\n    // blur 失去焦点\n    handleBlurSearch: function handleBlurSearch(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          var indexs = [];\n          col.options.forEach(function (option, index) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd;\n            } else if (option.searchAdd === true) {\n              indexs.push(index);\n            }\n          });\n          // 翻转删除数组中的项\n          var _iterator10 = _createForOfIteratorHelper(indexs.reverse()),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var index = _step10.value;\n              col.options.splice(index, 1);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        }\n      }\n      // 做单个表单验证\n      this.validateOneInput(value, row, col, this.notPassedIds, true, 'blur');\n    },\n    /** 触发已拖动事件 */emitDragged: function emitDragged(oldIndex, newIndex) {\n      this.$emit('dragged', {\n        oldIndex: oldIndex,\n        newIndex: newIndex,\n        target: this\n      });\n    },\n    handleDragMoveStart: function handleDragMoveStart(event) {\n      this.dragging = true;\n      this.$refs.scrollView.style.overflow = 'hidden';\n    },\n    /** 拖动结束，交换inputValue中的值 */handleDragMoveEnd: function handleDragMoveEnd(event) {\n      this.dragging = false;\n      this.$refs.scrollView.style.overflow = 'auto';\n      var oldIndex = event.oldIndex,\n        newIndex = event.newIndex,\n        dataIdx = event.item.dataset.idx;\n\n      // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n      var diff = Number.parseInt(dataIdx) - oldIndex;\n      oldIndex += diff;\n      newIndex += diff;\n      this.rowResort(oldIndex, newIndex);\n      this.emitDragged(oldIndex, newIndex);\n    },\n    /** 行重新排序 */rowResort: function rowResort(oldIndex, newIndex) {\n      var sort = function sort(array) {\n        // 存储旧数据，并删除旧项目\n        var temp = array[oldIndex];\n        array.splice(oldIndex, 1);\n        // 向新项目里添加旧数据\n        array.splice(newIndex, 0, temp);\n      };\n      sort(this.rows);\n      sort(this.inputValues);\n      this.recalcSortNumber();\n      this.forceUpdateFormValues();\n    },\n    /** 重新计算排序字段的数值 */recalcSortNumber: function recalcSortNumber() {\n      var _this22 = this;\n      if (this.dragSort) {\n        // 重置排序字段\n        this.inputValues.forEach(function (val, idx) {\n          return val[_this22.dragSortKey] = idx + 1;\n        });\n      }\n    },\n    /** 当前行向上移一位 */_handleRowMoveUp: function _handleRowMoveUp(rowIndex) {\n      if (rowIndex > 0) {\n        var newIndex = rowIndex - 1;\n        this.rowResort(rowIndex, newIndex);\n        this.emitDragged(rowIndex, newIndex);\n      }\n    },\n    /** 当前行向下移一位 */_handleRowMoveDown: function _handleRowMoveDown(rowIndex) {\n      if (rowIndex < this.rows.length - 1) {\n        var newIndex = rowIndex + 1;\n        this.rowResort(rowIndex, newIndex);\n        this.emitDragged(rowIndex, newIndex);\n      }\n    },\n    /** 在当前行下面插入一行 */_handleRowInsertDown: function _handleRowInsertDown(rowIndex) {\n      var insertIndex = rowIndex + 1;\n      this.insert(insertIndex);\n    },\n    /* --- common function begin --- */\n    /** input事件 */\n    handleInputCommono: function handleInputCommono(target, index, row, column) {\n      var oldValue = this.inputValues[index][column.key] || '';\n      var value = target.value,\n        dataset = target.dataset,\n        selectionStart = target.selectionStart;\n      var type = FormTypes.input;\n      var change = true;\n      if (\"\".concat(dataset.inputNumber) === 'true') {\n        type = FormTypes.inputNumber;\n        // 判断输入的值是否匹配数字正则表达式，不匹配就还原\n        if (!/^-?\\d+\\.?\\d*$/.test(value) && value !== '' && value !== '-') {\n          change = false;\n          value = oldValue;\n          target.value = value;\n          if (typeof selectionStart === 'number') {\n            target.selectionStart = selectionStart - 1;\n            target.selectionEnd = selectionStart - 1;\n          }\n        }\n      }\n      // 存储输入的值\n      this.inputValues[index][column.key] = value;\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'input');\n      if (type === FormTypes.inputNumber) {\n        this.recalcOneStatisticsColumn(column.key);\n      }\n\n      // 触发valueChange 事件\n      if (change) {\n        this.elemValueChange(type, row, column, value);\n      }\n    },\n    /** slot Change */handleChangeSlotCommon: function handleChangeSlotCommon(value, id, row, column) {\n      this.slotValues = this.bindValuesChange(value, id, 'slotValues');\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.slot, row, column, value);\n    },\n    handleBlurCommono: function handleBlurCommono(target, index, row, column) {\n      var _this23 = this;\n      var value = target.value,\n        dataset = target.dataset;\n      if (dataset && \"\".concat(dataset.inputNumber) === 'true') {\n        // 判断输入的值是否匹配数字正则表达式，不匹配就置空\n        if (!/^-?\\d+\\.?\\d*$/.test(value)) {\n          value = '';\n        } else {\n          value = Number.parseFloat(value);\n        }\n        target.value = value;\n      }\n      //update--begin--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n      setTimeout(function () {\n        // 做单个表单验证\n        _this23.validateOneInput(value, row, column, _this23.notPassedIds, true, 'blur');\n      }, 100);\n      //update--end--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n    },\n    handleChangeCheckboxCommon: function handleChangeCheckboxCommon(event, row, column) {\n      var _event$target = event.target,\n        id = _event$target.id,\n        checked = _event$target.checked;\n      this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues');\n\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.checkbox, row, column, checked);\n    },\n    handleChangeSelectCommon: function handleChangeSelectCommon(value, id, row, column) {\n      this.selectValues = this.bindValuesChange(value, id, 'selectValues');\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.select, row, column, value);\n    },\n    handleChangeJDateCommon: function handleChangeJDateCommon(value, id, row, column, showTime) {\n      this.jdateValues = this.bindValuesChange(value, id, 'jdateValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n\n      // 触发valueChange 事件\n      if (showTime) {\n        this.elemValueChange(FormTypes.datetime, row, column, value);\n      } else {\n        this.elemValueChange(FormTypes.date, row, column, value);\n      }\n    },\n    //部门组件值改变\n    handleChangeDepartCommon: function handleChangeDepartCommon(value, id, row, column) {\n      this.departCompValues = this.bindValuesChange(value, id, 'departCompValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.sel_depart, row, column, value);\n    },\n    //用户组件值改变\n    handleChangeUserCommon: function handleChangeUserCommon(value, id, row, column) {\n      this.userCompValues = this.bindValuesChange(value, id, 'userCompValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.sel_user, row, column, value);\n    },\n    handleChangeJInputPopCommon: function handleChangeJInputPopCommon(value, id, row, column) {\n      this.jInputPopValues = this.bindValuesChange(value, id, 'jInputPopValues');\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.input_pop, row, column, value);\n    },\n    handleChangeUpload: function handleChangeUpload(info, id, row, column) {\n      var file = info.file;\n      var value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      };\n      if (column.responseName && file.response) {\n        value['responseName'] = file.response[column.responseName];\n      }\n      if (file.status === 'done') {\n        value['path'] = file.response[column.responseName];\n      } else if (file.status === 'error') {\n        value['message'] = file.response.message || '未知错误';\n      }\n      this.uploadValues = this.bindValuesChange(value, id, 'uploadValues');\n\n      // 触发valueChange 事件\n      this.elemValueChange(column.type, row, column, value);\n    },\n    handleMoreOperation: function handleMoreOperation(id, flag, column) {\n      //update-begin-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n      if (column.number) {\n        this.number = column.number;\n      } else {\n        this.number = 0;\n      }\n      //update-end-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n      if (column && column.fieldExtendJson) {\n        var json = JSON.parse(column.fieldExtendJson);\n        this.number = json.uploadnum ? json.uploadnum : 0;\n      }\n      //console.log(\"this.uploadValues[id]\",this.uploadValues[id])\n      var path = '';\n      if (this.uploadValues && this.uploadValues[id]) {\n        path = this.uploadValues[id].path;\n      }\n      this.$refs.filePop.show(id, path, flag);\n    },\n    handleFileSuccess: function handleFileSuccess(obj) {\n      if (obj.id) {\n        this.uploadValues = this.bindValuesChange(obj, obj.id, 'uploadValues');\n      }\n    },\n    handleClickTableRow: function handleClickTableRow(event) {\n      var target = event.target;\n      if (target.className === 'td' || target.className === 'tr') {\n        // 清空编辑状态\n        this.currentEditRows = {};\n      }\n    },\n    // 点击后编辑当前行\n    handleEditRow: function handleEditRow(row, col) {\n      var _this24 = this;\n      if (this.alwaysEdit) {\n        return;\n      }\n      // 将点击的组件置为可编辑并还原其他组件的编辑状态\n      this.currentEditRows = _defineProperty({}, row.id, _defineProperty({}, col.key, true));\n      if (col.type === FormTypes.input || col.type === FormTypes.inputNumber) {\n        this.$nextTick(function () {\n          _this24.forceUpdateFormValues();\n          // 自动获取焦点\n          var el = document.getElementById(\"\".concat(col.key).concat(row.id));\n          if (el) {\n            el.focus();\n          }\n        });\n      }\n    },\n    /** 记录用到数据绑定的组件的值 */bindValuesChange: function bindValuesChange(value, id, key) {\n      this.$set(this[key], id, value);\n      return this[key];\n    },\n    /** value 触发valueChange事件 */elemValueChange: function elemValueChange(type, rowSource, columnSource, value) {\n      var column = Object.assign({}, columnSource);\n      // 将caseId去除\n      var row = Object.assign({}, rowSource);\n      row.id = this.getCleanId(row.id);\n      // 获取整行的数据\n      var _this$getValuesSync2 = this.getValuesSync({\n          validate: false,\n          rowIds: [row.id]\n        }),\n        values = _this$getValuesSync2.values;\n      if (values.length > 0) {\n        Object.assign(row, values[0]);\n      }\n      this.$emit('valueChange', {\n        type: type,\n        row: row,\n        column: column,\n        value: value,\n        target: this\n      });\n    },\n    /** 获取干净的ID（不包含任何杂质的ID） */getCleanId: function getCleanId(id) {\n      id = this.removeCaseId(id);\n      id = this.removeTempId(id);\n      return id;\n    },\n    /** 判断某个ID是否包含了caseId */hasCaseId: function hasCaseId(id) {\n      return id && id.startsWith(this.caseId);\n    },\n    /** 将caseId去除 */removeCaseId: function removeCaseId(id) {\n      if (this.hasCaseId(id)) {\n        return id.substring(this.caseId.length, id.length);\n      }\n      return id;\n    },\n    // 判断 id 是否是临时Id\n    isTempId: function isTempId(id) {\n      return (id || '').endsWith(this.tempId);\n    },\n    /** 将tempId去除 */removeTempId: function removeTempId(id) {\n      if (this.isTempId(id)) {\n        return id.substring(0, id.length - this.tempId.length);\n      }\n      return id;\n    },\n    handleClickDelFile: function handleClickDelFile(id) {\n      this.uploadValues[id] = null;\n    },\n    handleClickDownloadFile: function handleClickDownloadFile(id) {\n      var _ref3 = this.uploadValues[id] || {},\n        path = _ref3.path;\n      if (path) {\n        var url = getFileAccessHttpUrl(path);\n        window.open(url);\n      }\n    },\n    handleClickDownFileByUrl: function handleClickDownFileByUrl(id) {\n      var _ref4 = this.uploadValues[id] || {},\n        url = _ref4.url,\n        path = _ref4.path;\n      if (!url || url.length === 0) {\n        if (path && path.length > 0) {\n          url = getFileAccessHttpUrl(path.split(',')[0]);\n        }\n      }\n      if (url) {\n        window.open(url);\n      }\n    },\n    handleClickShowImageError: function handleClickShowImageError(id) {\n      var currUploadObj = this.uploadValues[id] || null;\n      if (currUploadObj && currUploadObj['message']) {\n        this.$error({\n          title: '上传出错',\n          content: '错误信息：' + currUploadObj['message'],\n          maskClosable: true\n        });\n      }\n    },\n    /** 加载数据字典并合并到 options */_loadDictConcatToOptions: function _loadDictConcatToOptions(column) {\n      var _this25 = this;\n      initDictOptions(column.dictCode).then(function (res) {\n        if (res.success) {\n          var newOptions = column.options || []; // .concat(res.result)\n          res.result.forEach(function (item) {\n            // 过滤重复数据\n            var _iterator11 = _createForOfIteratorHelper(newOptions),\n              _step11;\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var option = _step11.value;\n                if (option.value === item.value) return;\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n            newOptions.push(item);\n          });\n          _this25.$set(column, 'options', newOptions);\n        } else {\n          console.group(\"JEditableTable \\u67E5\\u8BE2\\u5B57\\u5178(\".concat(column.dictCode, \")\\u53D1\\u751F\\u5F02\\u5E38\"));\n          console.log(res.message);\n          console.groupEnd();\n        }\n      });\n    },\n    /* --- common function end --- */\n    /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n    /** 辅助方法：打印日志 */\n    log: function log() {\n      if (this.$attrs.logger) {\n        console.log.apply(null, arguments);\n      }\n    },\n    getVM: function getVM() {\n      return this;\n    },\n    /** 辅助方法：动态构造Tooltip的Props，防止出现不消失的情况 */buildTooltipProps: function buildTooltipProps(row, col, id) {\n      var notPassedIds = this.notPassedIds,\n        tooltips = this.tooltips;\n      var props = {\n        title: (tooltips[id] || {}).title,\n        placement: 'top',\n        autoAdjustOverflow: true,\n        getPopupContainer: this.getParentContainer,\n        class: {\n          'j-check-failed': false\n        }\n      };\n      var isCheckFailed = notPassedIds.includes(id);\n      if (isCheckFailed) {\n        props.class['j-check-failed'] = true;\n      } else {\n        props['visible'] = false;\n      }\n      return props;\n    },\n    /** 辅助方法：指定a-select 和 j-data 的父容器 */getParentContainer: function getParentContainer(node) {\n      var _this26 = this;\n      var element = function () {\n        // nodeType 8\t: Comment\t: 注释\n        if (_this26.$el && _this26.$el.nodeType !== 8) {\n          return _this26.$el;\n        }\n        var doc = document.getElementById(_this26.caseId + 'inputTable');\n        if (doc != null) {\n          return doc;\n        }\n        return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;\n      }();\n\n      // 递归判断是否带有 overflow: hidden；的父元素\n      var ifParent = function ifParent(child) {\n        var currentOverflow = null;\n        if (child['currentStyle']) {\n          currentOverflow = child['currentStyle']['overflow'];\n        } else if (window.getComputedStyle) {\n          currentOverflow = window.getComputedStyle(child)['overflow'];\n        }\n        if (currentOverflow != null) {\n          if (currentOverflow === 'hidden') {\n            // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n            var _temp = ifParent(child.parentNode);\n            return _temp != null ? _temp : child.parentNode;\n          } else\n            // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode);\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null;\n            }\n        } else {\n          return child;\n        }\n      };\n      var temp = ifParent(element);\n      return temp != null ? temp : element;\n    },\n    /** 辅助方法：替换${...}变量 */replaceProps: function replaceProps(col, value) {\n      if (value && typeof value === 'string') {\n        value = value.replace(/\\${title}/g, col.title);\n        value = value.replace(/\\${key}/g, col.key);\n        value = value.replace(/\\${defaultValue}/g, col.defaultValue);\n      }\n      return value;\n    },\n    /** view辅助方法：构建 tr style */buildTrStyle: function buildTrStyle(index) {\n      return {\n        'top': \"\".concat(rowHeight * index, \"px\")\n      };\n    },\n    /** view辅助方法：构建 td style */buildTdStyle: function buildTdStyle(col) {\n      var isEmptyWidth = function isEmptyWidth(column) {\n        return column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0;\n      };\n      var style = {};\n      // 计算宽度\n      if (col.width) {\n        style['width'] = col.width;\n      } else if (this.columns) {\n        style['width'] = \"\".concat((100 - 4 * 2) / this.columns.filter(function (column) {\n          return !isEmptyWidth(column);\n        }).length, \"%\");\n      } else {\n        style['width'] = '120px';\n      }\n      //update-begin-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n      //如果是时间控件设为200px\n      if (col.type === FormTypes.datetime) {\n        style['width'] = '200px';\n      }\n      if (col.type === FormTypes.sel_user && !col.width) {\n        style['width'] = '220px';\n      }\n      if (col.type === FormTypes.sel_depart && !col.width) {\n        style['width'] = '160px';\n      }\n      //update-end-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n\n      // checkbox 居中显示\n      var isCheckbox = col.type === FormTypes.checkbox;\n      if (isCheckbox) {\n        style['align-items'] = 'center';\n        style['text-align'] = 'center';\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n      if (isEmptyWidth(col)) {\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n      return style;\n    },\n    /** view辅助方法：构造props */buildProps: function buildProps(row, col) {\n      var props = {};\n      // 解析props\n      if (_typeof(col.props) === 'object') {\n        for (var prop in col.props) {\n          if (col.props.hasOwnProperty(prop)) {\n            props[prop] = this.replaceProps(col, col.props[prop]);\n          }\n        }\n      }\n      // 判断select是否允许输入\n      if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n        props['showSearch'] = true;\n      }\n\n      // 判断是否是禁用的列\n      props['disabled'] = typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled'];\n\n      // 判断是否为禁用的行\n      if (props['disabled'] !== true) {\n        props['disabled'] = (this.disabledRowIds || []).indexOf(row.id) !== -1;\n      }\n\n      // 判断是否禁用全部组件\n      if (this.disabled === true) {\n        props['disabled'] = true;\n      }\n      return props;\n    },\n    /** 辅助方法：防止过快点击，如果点击过快的话就返回 true */checkTooFastClick: function checkTooFastClick() {\n      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n      var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n      var nowTime = Date.now();\n      var lastTime = this.lastPushTimeMap.get(key);\n      if (!lastTime) {\n        lastTime = nowTime;\n        this.lastPushTimeMap.set(key, nowTime);\n        return false;\n      }\n      var diffTime = nowTime - lastTime;\n      if (diffTime <= ms) {\n        this.$message.warn('你点击的太快了，请慢点点击!');\n        return true;\n      }\n      this.lastPushTimeMap.set(key, nowTime);\n      return false;\n    },\n    /** upload 辅助方法：获取 headers */uploadGetHeaders: function uploadGetHeaders(row, column) {\n      var headers = {};\n      if (column.token === true) {\n        headers['X-Access-Token'] = this.accessToken;\n      }\n      return headers;\n    },\n    /** 上传请求地址 */getUploadAction: function getUploadAction(value) {\n      if (!value) {\n        return window._CONFIG['domianURL'] + '/sys/common/upload';\n      } else {\n        return value;\n      }\n    },\n    /** 预览图片地址 */getCellImageView: function getCellImageView(id) {\n      var currUploadObj = this.uploadValues[id] || null;\n      if (currUploadObj) {\n        if (currUploadObj['url']) {\n          return currUploadObj['url'];\n        } else if (currUploadObj['path']) {\n          var readpath = currUploadObj['path'].split(',')[0];\n          return getFileAccessHttpUrl(readpath);\n        }\n      }\n      return '';\n    },\n    /** popup回调 */popupCallback: function popupCallback(value, others, id, row, column, index) {\n      // 存储输入的值\n      var popupValue = value;\n      if (others) {\n        var rowKey = this.getCleanId(row.id);\n        var setValueItem = {\n          rowKey: rowKey,\n          values: {}\n        };\n        Object.keys(others).forEach(function (key) {\n          // 当前列直接赋值，其他列通过setValues赋值\n          if (key === column.key) {\n            popupValue = others[key];\n          } else {\n            setValueItem.values[key] = others[key];\n          }\n        });\n        if (Object.keys(setValueItem).length > 0) {\n          this.setValues([setValueItem]);\n        }\n      }\n      this.setOneValue(this.popupValues, id, popupValue);\n      // 做单个表单验证\n      this.validateOneInput(popupValue, row, column, this.notPassedIds, true, 'change');\n      // 触发valueChange 事件\n      this.elemValueChange('input', row, column, value);\n    },\n    /** popup输入框回显 */getPopupValue: function getPopupValue(id) {\n      return this.popupValues[id];\n    },\n    handleRadioChange: function handleRadioChange(value, id, row, column) {\n      this.radioValues = this.bindValuesChange(value, id, 'radioValues');\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.radio, row, column, value);\n    },\n    handleMultiSelectChange: function handleMultiSelectChange(value, id, row, column) {\n      this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues');\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.list_multi, row, column, value);\n    },\n    handleSearchSelectChange: function handleSearchSelectChange(value, id, row, column) {\n      this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      this.elemValueChange(FormTypes.sel_search, row, column, value);\n    },\n    handleSearchSelectAsyncChange: function handleSearchSelectAsyncChange(value, id, row, column) {\n      this.searchSelectAsyncValues = this.bindValuesChange(value, id, 'searchSelectAsyncValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      this.elemValueChange(FormTypes.sel_search_async, row, column, value);\n    },\n    filterOption: function filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    },\n    getEllipsisWord: function getEllipsisWord(content, len) {\n      if (!content || content.length === 0) {\n        return '';\n      }\n      if (content.length > len) {\n        return content.substr(0, len);\n      }\n      return content;\n    },\n    /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n    /** 获取Select等组件翻译后的文本 */\n    getSelectTranslateText: function getSelectTranslateText(value, row, col) {\n      // 翻译支持单选和多选（数组、逗号分割）\n      return filterDictText(col.options, value);\n    },\n    // 判定当前行是否是正在编辑的\n    isEditRow: function isEditRow(row, col) {\n      if (this.alwaysEdit) {\n        return true;\n      }\n      var current = this.currentEditRows[row.id];\n      return !!(current && current[col.key] === true);\n    },\n    /* ---- 事件监听 ---- */\n    // 鼠标弹起事件，用于清空输入状态\n    handleMouseup: function handleMouseup(event) {\n      if (this.alwaysEdit || Object.keys(this.currentEditRows).length === 0) {\n        return;\n      }\n      // console.log(this.caseId + 'handleMouseup: ', event)\n      var target = event.target;\n      if (!target) {\n        return;\n      }\n      var className = target.className || '';\n      if (typeof className === 'string') {\n        // 点击的标签是span\n        if (className.includes('j-td-span') && className.includes('no-edit')) {\n          return;\n        }\n        // 点击的标签是下拉\n        if (className.includes('ant-select-dropdown-menu-item')) {\n          return;\n        }\n      }\n\n      // 事件冒泡路径\n      var path = getEventPath(event);\n      var _iterator12 = _createForOfIteratorHelper(path),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var p = _step12.value;\n          // 如果点击的是 tr 就不处理（tr单独处理）\n          if ((p.id || '').startsWith(\"\".concat(this.caseId, \"tbody-tr\"))) {\n            return;\n          }\n          var pClassName = p.className || '';\n          pClassName = typeof pClassName === 'string' ? pClassName : pClassName.toString();\n\n          /* --- 特殊处理以下组件，点击以下标签时不清空编辑状态 --- */\n\n          // 点击的标签是JInputPop\n          if (pClassName.includes('j-input-pop')) {\n            return;\n          }\n          // 点击的标签是JPopup的弹出层\n          if (pClassName.includes('j-popup-modal')) {\n            return;\n          }\n          // 点击的标签是日期选择器的弹出层\n          if (pClassName.includes('j-date-picker') || pClassName.includes('ant-calendar-picker-container')) {\n            return;\n          }\n        }\n        // 清空编辑状态\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      this.currentEditRows = {};\n    },\n    // 添加事件监听\n    addEventListener: function addEventListener() {\n      window.addEventListener('mouseup', this.handleMouseup);\n    },\n    // 移除事件监听\n    removeEventListener: function removeEventListener() {\n      window.removeEventListener('mouseup', this.handleMouseup);\n    },\n    /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n    //获取没有授权的按钮编码\n    loadExcludeCode: function loadExcludeCode() {\n      if (!this.authPre || this.authPre.length == 0) {\n        this.excludeCode = [];\n      } else {\n        var pre = this.authPre;\n        if (!pre.endsWith(':')) {\n          pre += ':';\n        }\n        this.excludeCode = getNoAuthCols(pre);\n      }\n    },\n    //判断button是否显示\n    buttonPermission: function buttonPermission(code) {\n      if (!this.excludeCode || this.excludeCode.length == 0) {\n        return true;\n      } else {\n        return this.excludeCode.indexOf(code) < 0;\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeEventListener();\n    this.destroyCleanGroupRequest = true;\n  }\n};",{"version":3,"names":["Vue","Draggable","ACCESS_TOKEN","FormTypes","VALIDATE_NO_PASSED","cloneObject","getEventPath","randomNumber","randomString","JDate","filterDictText","initDictOptions","getFileAccessHttpUrl","JInputPop","JFilePop","getNoAuthCols","rowHeight","name","components","provide","_this","parentIsJEditableTable","getDestroyCleanGroupRequest","destroyCleanGroupRequest","props","columns","type","Array","required","dataSource","default","_default","actionButton","Boolean","rowNumber","rowSelection","loading","maxHeight","Number","disabledRows","Object","disabled","dragSort","dragSortKey","String","alwaysEdit","authPre","data","isFirst","isJEditableTable","caseId","concat","tempId","el","inputTable","tbody","style","left","tdLeft","formTypes","rows","scrollTop","selectValues","checkboxValues","jdateValues","jInputPopValues","slotValues","uploadValues","popupValues","departCompValues","userCompValues","radioValues","metaCheckboxValues","multiSelectValues","searchSelectValues","searchSelectAsyncValues","selectedRowIds","deleteIds","tooltips","notPassedIds","dragging","hasStatisticsColumn","statisticsColumns","currentEditRows","lastPushTimeMap","Map","number","excludeCode","created","_this2","inputValues","visibleTrEls","disabledRowIds","document","body","ondrop","event","preventDefault","stopPropagation","computed","getExpandHeight","length","showStatisticsRow","getSelectIndeterminate","getSelectAll","tbodyStyle","assign","realTrWidth","showClearSelectButton","count","key","hasOwnProperty","accessToken","ls","get","splice","calcWidth","forEach","column","i","width","hidden","endsWith","substring","watch","immediate","handler","val","old","newValue","_this3","getElementPromise","then","initialize","_pushByDataSource","_this4","loadExcludeCode","select","list_multi","sel_search","options","map","item","_objectSpread","text","title","dictCode","_loadDictConcatToOptions","_this5","$emit","getCleanId","mounted","vm","getElement","onscroll","syncScrollBar","target","scrollLeft","_this$$refs","$refs","thead","scrollView","recalcTrHiddenItem","addEventListener","methods","id","noCaseId","arguments","undefined","getElementById","_this6","Promise","resolve","timer","setInterval","element","clearInterval","clearRow","_this7","$nextTick","resetScrollTop","top","_this8","diff","updateFormValues","generateId","timestamp","Date","getTime","push","record","update","insertIndex","setDefaultValue","_this9","insertIndexes","_toConsumableArray","newValueIndex","dataId","hasCaseId","row","value","inputId","sourceValue","toString","defaultValue","join","sourceValueIsEmpty","inputNumber","isOrder","getInputNumberMaxValue","statistics","$set","checkbox","customValue","defaultChecked","split","date","datetime","slot","popup","sel_depart","sel_user","input_pop","radio","sel_search_async","upload","file","image","fileName","indexOf","sourceValue2","lastIndexOf","status","path","columnKey","temp","includes","added","findIndex","index","recalcAllStatisticsColumns","forceUpdateFormValues","maxNum","num","parseInt","_unused","add","_this10","forceScrollToBottom","r","offsetHeight","realScrollTop","scrollHeight","insert","_this11","checkTooFastClick","newRows","recalcSortNumber","removeSelectedRows","removeRows","_this12","ids","_typeof","removeId","findAndDelete","arr","currentId","getDeleteIds","getValuesAsync","_this13","callback","validate","rowIds","deleteTempId","asyncCount","error","values","_iterator","_createForOfIteratorHelper","_step","_loop","rowIdsFlag","_iterator2","_step2","s","n","done","rowId","err","e","f","checked","selected","currUploadObj","handleValidateOneInput","results","passed","visible","validateOneInputAsync","isTempId","getValuesSync","getValues","_ref","getValuesPromise","_this14","reject","_ref2","getAll","_this15","catch","getAllSync","result","_getValueForSlot","_getAllValuesForSlot","setValues","_this16","rowKey","newValues","_loop2","newValueKey","edited","_iterator3","_step3","_loop3","modelKey","setOneValue","valuesHasOwnProperty","elemValueChange","_defineProperty","console","warn","valuesObject","isMultiple","isArray","trim","ownProperty","_this17","validType","_this$validateValue","validateValue","_this$validateValue2","_slicedToArray","message","nextThen","res","_res","replaceProps","executed","flag","msg","validateOneInput","rules","validateRules","_iterator4","_step4","rule","isNull","unique","pattern","_this$getValuesSync","findCount","_iterator5","_step5","foo","_i","_foo","RegExp","test","_this18","trs","getElementsByClassName","trEls","_iterator6","_step6","tr","newTrEls","_iterator7","_step7","isNewest","_iterator8","_step8","vtr","idx","dataset","elid","_this19","$forceUpdate","_this20","keys","recalcOneStatisticsColumn","getStatisticsValue","handleChangeCheckedAll","_this21","handleChangeLeftCheckbox","handleClickAdd","handleConfirmDelete","handleClickClearSelection","clearSelection","handleSelectFilterOption","input","option","allowSearch","allowInput","componentOptions","children","toLowerCase","handleSearchSelect","col","_iterator9","_step9","toLocaleString","searchAdd","handleBlurSearch","indexs","_iterator10","reverse","_step10","emitDragged","oldIndex","newIndex","handleDragMoveStart","overflow","handleDragMoveEnd","dataIdx","rowResort","sort","array","_this22","_handleRowMoveUp","rowIndex","_handleRowMoveDown","_handleRowInsertDown","handleInputCommono","oldValue","selectionStart","change","selectionEnd","handleChangeSlotCommon","bindValuesChange","handleBlurCommono","_this23","parseFloat","setTimeout","handleChangeCheckboxCommon","_event$target","handleChangeSelectCommon","handleChangeJDateCommon","showTime","handleChangeDepartCommon","handleChangeUserCommon","handleChangeJInputPopCommon","handleChangeUpload","info","size","percent","responseName","response","handleMoreOperation","fieldExtendJson","json","JSON","parse","uploadnum","filePop","show","handleFileSuccess","obj","handleClickTableRow","className","handleEditRow","_this24","focus","rowSource","columnSource","_this$getValuesSync2","removeCaseId","removeTempId","startsWith","handleClickDelFile","handleClickDownloadFile","_ref3","url","window","open","handleClickDownFileByUrl","_ref4","handleClickShowImageError","$error","content","maskClosable","_this25","success","newOptions","_iterator11","_step11","group","log","groupEnd","$attrs","logger","apply","getVM","buildTooltipProps","placement","autoAdjustOverflow","getPopupContainer","getParentContainer","class","isCheckFailed","node","_this26","$el","nodeType","doc","parentNode","ifParent","child","currentOverflow","getComputedStyle","tagName","toLocaleLowerCase","replace","buildTrStyle","buildTdStyle","isEmptyWidth","filter","isCheckbox","buildProps","prop","ms","nowTime","now","lastTime","set","diffTime","$message","uploadGetHeaders","headers","token","getUploadAction","_CONFIG","getCellImageView","readpath","popupCallback","others","popupValue","setValueItem","getPopupValue","handleRadioChange","handleMultiSelectChange","handleSearchSelectChange","handleSearchSelectAsyncChange","filterOption","getEllipsisWord","len","substr","getSelectTranslateText","isEditRow","current","handleMouseup","_iterator12","_step12","p","pClassName","removeEventListener","pre","buttonPermission","code","beforeDestroy"],"sources":["src/components/jeecg/JEditableTable.vue"],"sourcesContent":["<!-- JEditableTable -->\n<!-- @version 1.6.1 -->\n<!-- @author sjlei -->\n<template>\n  <a-spin :spinning=\"loading\">\n\n    <a-row type=\"flex\">\n      <a-col>\n        <slot name=\"buttonBefore\" :target=\"getVM()\"/>\n      </a-col>\n      <a-col>\n        <!-- 操作按钮 -->\n        <div v-if=\"actionButton\" class=\"action-button\">\n          <a-button v-if=\"buttonPermission('add')\" type=\"primary\" icon=\"plus\" @click=\"handleClickAdd\" :disabled=\"disabled\">新增</a-button>\n          <span class=\"gap\"></span>\n          <template v-if=\"selectedRowIds.length>0\">\n            <a-popconfirm\n              :title=\"`确定要删除这 ${selectedRowIds.length} 项吗?`\"\n              @confirm=\"handleConfirmDelete\">\n              <a-button v-if=\"buttonPermission('batch_delete')\" type=\"primary\" icon=\"minus\" :disabled=\"disabled\">删除</a-button>\n              <span class=\"gap\"></span>\n            </a-popconfirm>\n            <template v-if=\"showClearSelectButton\">\n              <a-button icon=\"delete\" @click=\"handleClickClearSelection\">清空选择</a-button>\n              <span class=\"gap\"></span>\n            </template>\n          </template>\n        </div>\n      </a-col>\n      <a-col>\n        <slot name=\"buttonAfter\" :target=\"getVM()\"/>\n      </a-col>\n    </a-row>\n\n    <slot name=\"actionButtonAfter\" :target=\"getVM()\"/>\n\n    <div :id=\"`${caseId}inputTable`\" class=\"input-table\">\n      <!-- 渲染表头 -->\n      <div class=\"thead\" ref=\"thead\">\n        <div class=\"tr\" :style=\"{width: this.realTrWidth}\">\n          <!-- 左侧固定td  -->\n          <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\">\n            <span></span>\n          </div>\n          <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n            <!--:indeterminate=\"true\"-->\n            <a-checkbox\n              :checked=\"getSelectAll\"\n              :indeterminate=\"getSelectIndeterminate\"\n              @change=\"handleChangeCheckedAll\"\n            />\n          </div>\n          <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n            <span>#</span>\n          </div>\n          <!-- 右侧动态生成td -->\n          <template v-for=\"col in columns\">\n            <div\n              v-show=\"col.type !== formTypes.hidden\"\n              class=\"td\"\n              :key=\"col.key\"\n              :style=\"buildTdStyle(col)\">\n\n              <span>{{ col.title }}</span>\n            </div>\n          </template>\n        </div>\n      </div>\n\n      <div class=\"scroll-view\" ref=\"scrollView\" :style=\"{'max-height':maxHeight+'px'}\">\n\n\n        <!-- 渲染主体 body -->\n        <div :id=\"`${caseId}tbody`\" class=\"tbody\" :style=\"tbodyStyle\">\n          <!-- 扩展高度 -->\n          <div class=\"tr-expand\" :style=\"`height:${getExpandHeight}px; z-index:${loading?'11':'9'};`\"></div>\n          <!-- 无数据时显示 -->\n          <div v-if=\"rows.length===0\" class=\"tr-nodata\">\n            <span>暂无数据</span>\n          </div>\n          <!-- v-model=\"rows\"-->\n          <draggable\n            :value=\"rows\"\n            handle=\".td-ds-icons\"\n            @start=\"handleDragMoveStart\"\n            @end=\"handleDragMoveEnd\"\n          >\n\n            <!-- 动态生成tr -->\n            <template v-for=\"(row,rowIndex) in rows\">\n              <!-- tr 只加载可见的和预加载的总共十条数据 -->\n              <div\n                v-if=\"\n                rowIndex >= parseInt(`${(scrollTop-rowHeight) / rowHeight}`) &&\n                  (parseInt(`${scrollTop / rowHeight}`) + 9) > rowIndex\n              \"\n                :id=\"`${caseId}tbody-tr-${rowIndex}`\"\n                :data-idx=\"rowIndex\"\n                class=\"tr\"\n                :class=\"selectedRowIds.indexOf(row.id) !== -1 ? 'tr-checked' : ''\"\n                :style=\"buildTrStyle(rowIndex)\"\n                :key=\"row.id\"\n                @click=\"handleClickTableRow\"\n              >\n                <!-- 左侧固定td  -->\n\n                <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\" @dblclick=\"_handleRowInsertDown(rowIndex)\" >\n                  <a-dropdown :trigger=\"['click']\" :getPopupContainer=\"getParentContainer\">\n                    <div class=\"td-ds-icons\">\n                      <a-icon type=\"align-left\"/>\n                      <a-icon type=\"align-right\"/>\n                    </div>\n\n                    <a-menu slot=\"overlay\">\n                      <a-menu-item key=\"0\" :disabled=\"rowIndex===0\" @click=\"_handleRowMoveUp(rowIndex)\">向上移</a-menu-item>\n                      <a-menu-item key=\"1\" :disabled=\"rowIndex===(rows.length-1)\" @click=\"_handleRowMoveDown(rowIndex)\">向下移</a-menu-item>\n                      <a-menu-divider/>\n                      <a-menu-item key=\"3\" @click=\"_handleRowInsertDown(rowIndex)\">插入一行</a-menu-item>\n                    </a-menu>\n                  </a-dropdown>\n                </div>\n\n                <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${row.id}`]\">\n                    <a-checkbox\n                      :id=\"id\"\n                      :key=\"i\"\n                      :checked=\"selectedRowIds.indexOf(id) !== -1\"\n                      @change=\"handleChangeLeftCheckbox\"/>\n                  </template>\n                </div>\n                <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n                  <span>{{ rowIndex+1 }}</span>\n                </div>\n                <!-- 右侧动态生成td -->\n                <div\n                  class=\"td\"\n                  v-for=\"col in columns\"\n                  v-show=\"col.type !== formTypes.hidden\"\n                  :key=\"col.key\"\n                  :style=\"buildTdStyle(col)\">\n\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${col.key}${row.id}`]\">\n\n                    <!-- native input -->\n                    <label :key=\"i\" v-if=\"col.type === formTypes.input || col.type === formTypes.inputNumber\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <input\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          v-bind=\"buildProps(row,col)\"\n                          :data-input-number=\"col.type === formTypes.inputNumber\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @blur=\"(e)=>{handleBlurCommono(e.target,rowIndex,row,col)}\"\n                          @input=\"(e)=>{handleInputCommono(e.target,rowIndex,row,col)}\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ inputValues[rowIndex][col.key] }}</span>\n                      </a-tooltip>\n                    </label>\n                    <!-- checkbox -->\n                    <template v-else-if=\"col.type === formTypes.checkbox\">\n                      <a-checkbox\n                        :key=\"i\"\n                        :id=\"id\"\n                        v-bind=\"buildProps(row,col)\"\n                        :checked=\"checkboxValues[id]\"\n                        @change=\"(e)=>handleChangeCheckboxCommon(e,row,col)\"\n                      />\n                    </template>\n                    <!-- select -->\n                    <template v-else-if=\"col.type === formTypes.select\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"selectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :filterOption=\"(i,o)=>handleSelectFilterOption(i,o,col)\"\n                          :maxTagCount=\"1\"\n                          @change=\"(v)=>handleChangeSelectCommon(v,id,row,col)\"\n                          @search=\"(v)=>handleSearchSelect(v,id,row,col)\"\n                          @blur=\"(v)=>handleBlurSearch(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click.stop=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(selectValues[id], row, col) }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- 部门选择 -->\n                    <template v-else-if=\"col.type === formTypes.sel_depart\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-select-depart\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"departCompValues[id]\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :multi=\"true\"\n                          @change=\"(v)=>handleChangeDepartCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ departCompValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- 用户选择 -->\n                    <template v-else-if=\"col.type === formTypes.sel_user\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-select-user-by-dep\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"userCompValues[id]\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :multi=\"true\"\n                          @change=\"(v)=>handleChangeUserCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ userCompValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- date -->\n                    <template v-else-if=\"col.type === formTypes.date || col.type === formTypes.datetime\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-date\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jdateValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :showTime=\"col.type === formTypes.datetime\"\n                          :dateFormat=\"col.type === formTypes.date? 'YYYY-MM-DD':'YYYY-MM-DD HH:mm:ss'\"\n                          allowClear\n                          @change=\"(v)=>handleChangeJDateCommon(v,id,row,col,col.type === formTypes.datetime)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ jdateValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- input_pop -->\n                    <template v-else-if=\"col.type === formTypes.input_pop\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-input-pop\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          :width=\"300\"\n                          :height=\"210\"\n                          :pop-container=\"`${caseId}tbody`\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jInputPopValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleChangeJInputPopCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ jInputPopValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- upload -->\n                    <div v-else-if=\"col.type === formTypes.upload\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <a-input\n                          :key=\"fileKey\"\n                          :readOnly=\"true\"\n                          :value=\"file.name\"\n                        >\n\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                              <a-icon type=\"loading\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else title=\"上传失败\">\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                            </a-tooltip>\n                          </template>\n\n                          <template v-if=\"col.allowDownload!==false || col.allowRemove!==false\" slot=\"addonAfter\" style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon\n                                  v-if=\"file.status!=='uploading'\"\n                                  type=\"setting\"\n                                  style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownloadFile(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item v-if=\"col.allowRemove!==false\" @click=\"handleClickDelFile(id)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n\n                        </a-input>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1, ...(col.data||{})}\"\n                            :multiple=\"false\"\n                            :action=\"col.action\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">{{ col.placeholder }}</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n\n                    <!-- update-begin-author:taoyan date:0827 for：popup -->\n                    <template v-else-if=\"col.type === formTypes.popup\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-popup\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          style=\"width: 100%;\"\n                          :value=\"getPopupValue(id)\"\n                          :field=\"col.field || col.key\"\n                          :org-fields=\"col.orgFields\"\n                          :dest-fields=\"col.destFields\"\n                          :code=\"col.popupCode\"\n                          :groupId=\"caseId\"\n                          :param=\"col.param\"\n                          :sorter=\"col.sorter\"\n                          @input=\"(value,others)=>popupCallback(value,others,id,row,col,rowIndex)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getPopupValue(id) }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- update-end-author:taoyan date:0827 for：popup -->\n\n                    <!-- update-beign-author:taoyan date:0827 for：文件/图片逻辑新增 -->\n                    <div v-else-if=\"col.type === formTypes.file\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <div :key=\"fileKey\" style=\"position: relative;\">\n                          <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                            <a-icon type=\"loading\" style=\"color:red;\"/>\n                            <span style=\"color:red;margin-left:5px\">{{  file.status }}</span>\n                          </a-tooltip>\n\n                          <a-tooltip v-else-if=\"file.status==='done'\" :title=\"file.name\">\n                            <a-icon type=\"paper-clip\" />\n                            <span style=\"margin-left:5px\">{{ getEllipsisWord(file.name,5) }}</span>\n                          </a-tooltip>\n\n                          <a-tooltip v-else :title=\"file.name\">\n                            <a-icon type=\"paper-clip\" style=\"color:red;\"/>\n                            <span style=\"color:red;margin-left:5px\">{{ getEllipsisWord(file.name,5) }}</span>\n                          </a-tooltip>\n\n                          <template style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\" style=\"margin-left: 10px;\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon v-if=\"file.status!=='uploading'\" type=\"setting\" style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownFileByUrl(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleClickDelFile(id)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleMoreOperation(id,col,col)\">\n                                  <span><a-icon type=\"bars\" /> 更多</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n                        </div>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1}\"\n                            :multiple=\"false\"\n                            :action=\"getUploadAction(col.action)\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">上传文件</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n\n                    <div v-else-if=\"col.type === formTypes.image\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <div :key=\"fileKey\" style=\"position: relative;\">\n                          <template v-if=\"!uploadValues[id] || !(uploadValues[id]['url'] || uploadValues[id]['path'] || uploadValues[id]['message'])\">\n                            <a-icon type=\"loading\"/>\n                          </template>\n                          <template v-else-if=\"uploadValues[id]['path']\">\n                            <img class=\"j-editable-image\" :src=\"getCellImageView(id)\" alt=\"无图片\" @click=\"handleMoreOperation(id,'img',col)\"/>\n                          </template>\n                          <template v-else>\n                            <a-icon type=\"exclamation-circle\" style=\"color: red;\" @click=\"handleClickShowImageError(id)\"/>\n                          </template>\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                              <a-icon type=\"loading\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else title=\"上传失败\">\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                            </a-tooltip>\n                          </template>\n\n                          <template style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\" style=\"margin-left: 10px;\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon\n                                  v-if=\"file.status!=='uploading'\"\n                                  type=\"setting\"\n                                  style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownFileByUrl(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleClickDelFile(id)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleMoreOperation(id,'img',col)\">\n                                  <span><a-icon type=\"bars\" /> 更多</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n\n                        </div>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1}\"\n                            :multiple=\"false\"\n                            :action=\"getUploadAction(col.action)\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">上传图片</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n                    <!-- update-end-author:taoyan date:0827 for：图片逻辑新增 -->\n\n                    <!-- radio-begin -->\n                    <template v-else-if=\"col.type === formTypes.radio\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-radio-group\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          :value=\"radioValues[id]\"\n                          @change=\"(e)=>handleRadioChange(e.target.value,id,row,col)\">\n                          <a-radio v-for=\"(item, key) in col.options\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio>\n                        </a-radio-group>\n                      </a-tooltip>\n                    </template>\n                    <!-- radio-end -->\n\n                    <!-- select多选 -begin -->\n                    <template v-else-if=\"col.type === formTypes.list_multi\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          mode=\"multiple\"\n                          :maxTagCount=\"1\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"multiSelectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleMultiSelectChange(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(multiSelectValues[id], row, col) }} </span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select多选 -end -->\n\n                    <!-- select搜索 -begin -->\n                    <template v-else-if=\"col.type === formTypes.sel_search\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          showSearch\n                          optionFilterProp=\"children\"\n                          :filterOption=\"filterOption\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"searchSelectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleSearchSelectChange(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(searchSelectValues[id], row, col) }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select搜索 -end -->\n\n                    <!-- select异步搜索 -begin -->\n                    <template v-else-if=\"col.type === formTypes.sel_search_async\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-search-select-tag\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          :value=\"searchSelectAsyncValues[id]\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :dict=\"col.dict\"\n                          :async=\"true\"\n                          :getPopupContainer=\"getParentContainer\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          @change=\"(v)=>handleSearchSelectAsyncChange(v,id,row,col)\"\n                        >\n                        </j-search-select-tag>\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ searchSelectAsyncValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select异步搜索 -end -->\n\n                    <div v-else-if=\"col.type === formTypes.slot\" :key=\"i\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <slot\n                          :name=\"(col.slot || col.slotName) || col.key\"\n                          :index=\"rowIndex\"\n                          :text=\"slotValues[id]\"\n                          :value=\"slotValues[id]\"\n                          :column=\"col\"\n                          :rowId=\"getCleanId(row.id)\"\n                          :getValue=\"()=>_getValueForSlot(row.id)\"\n                          :caseId=\"caseId\"\n                          :allValues=\"_getAllValuesForSlot()\"\n                          :target=\"getVM()\"\n                          :handleChange=\"(v)=>handleChangeSlotCommon(v,id,row,col)\"\n                          :isNotPass=\"notPassedIds.includes(col.key+row.id)\"\n                        />\n                      </a-tooltip>\n                    </div>\n\n                    <!-- else (normal) -->\n                    <span class=\"comp-normal\" v-else :key=\"i\" :title=\"inputValues[rowIndex][col.key]\" v-bind=\"buildProps(row,col)\">{{ inputValues[rowIndex][col.key] }}</span>\n                  </template>\n                </div>\n              </div>\n              <!-- -- tr end -- -->\n\n            </template>\n          </draggable>\n\n\n          <!-- 统计行 -->\n          <div\n            v-if=\"showStatisticsRow\"\n            class=\"tr\"\n            :style=\"{\n              ...buildTrStyle(rows.length),\n              height: '32px'\n            }\"\n          >\n            <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\">\n            </div>\n            <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n              统计\n            </div>\n            <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n              <span v-if=\"!rowSelection\">统计</span>\n            </div>\n\n            <!-- 右侧动态生成td -->\n            <template v-for=\"col in columns\">\n              <div\n                :key=\"col.key\"\n                class=\"td\"\n                v-show=\"col.type !== formTypes.hidden\"\n                :style=\"buildTdStyle(col)\"\n              >\n                <span\n                  v-show=\"col.type === formTypes.inputNumber\"\n                  style=\"padding: 0 5px;\"\n                >{{statisticsColumns[col.key]}}</span>\n              </div>\n            </template>\n\n          </div>\n\n        </div>\n      </div>\n      <j-file-pop ref=\"filePop\" @ok=\"handleFileSuccess\" :number=\"number\"></j-file-pop>\n    </div>\n  </a-spin>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import Draggable from 'vuedraggable'\n  import { ACCESS_TOKEN } from '@/store/mutation-types'\n  import { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\n  import { cloneObject, getEventPath, randomNumber, randomString } from '@/utils/util'\n  import JDate from '@/components/jeecg/JDate'\n  import { filterDictText, initDictOptions } from '@/components/dict/JDictSelectUtil'\n  import { getFileAccessHttpUrl } from '@/api/manage'\n  import JInputPop from '@/components/jeecg/minipop/JInputPop'\n  import JFilePop from '@/components/jeecg/minipop/JFilePop'\n  import { getNoAuthCols } from '@/utils/authFilter'\n\n  // 行高，需要在实例加载完成前用到\n  let rowHeight = 61\n\n  export default {\n    name: 'JEditableTable',\n    components: { JDate, Draggable, JInputPop, JFilePop },\n    provide() {\n      return {\n        parentIsJEditableTable: true,\n        getDestroyCleanGroupRequest: () => this.destroyCleanGroupRequest,\n      }\n    },\n    props: {\n      // 列信息\n      columns: {\n        type: Array,\n        required: true\n      },\n      // 数据源\n      dataSource: {\n        type: Array,\n        required: true,\n        default: () => []\n      },\n      // 是否显示操作按钮\n      actionButton: {\n        type: Boolean,\n        default: false\n      },\n      // 是否显示行号\n      rowNumber: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可选择行\n      rowSelection: {\n        type: Boolean,\n        default: false\n      },\n      // 页面是否在加载中\n      loading: {\n        type: Boolean,\n        default: false\n      },\n      // 表格内容区域最大高度\n      maxHeight: {\n        type: Number,\n        default: 400\n      },\n      // 要禁用的行\n      disabledRows: {\n        type: Object,\n        default() {\n          return {}\n        }\n      },\n      // 是否禁用全部组件\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可拖拽排序\n      dragSort: {\n        type: Boolean,\n        default: false\n      },\n      dragSortKey: {\n        type: String,\n        default: 'orderNum'\n      },\n      // 是否一直显示编辑框，如果为false则只有点击的时候才出现输入框\n      alwaysEdit: {\n        type: Boolean,\n        default: true\n      },\n      authPre: {\n        type: String,\n        required: false,\n        default: ''\n      },\n    },\n    data() {\n      return {\n        // 是否首次运行\n        isFirst: true,\n        // 当前实例是否是行编辑\n        isJEditableTable: true,\n        // caseId，用于防止有多个实例的时候会冲突\n        caseId: `_jet-${randomString(6)}-`,\n        // 临时ID标识，凡是以该标识结尾的ID都是临时ID，不添加到数据库中\n        tempId: `_tid-${randomString(6)}`,\n        // 存储document element 对象\n        el: {\n          inputTable: null,\n          tbody: null\n        },\n        // 存储各个div的style\n        style: {\n          // 'max-height': '400px'\n          tbody: { left: '0px' },\n          // 左侧固定td的style\n          tdLeft: {},\n        },\n        // 表单的类型\n        formTypes: FormTypes,\n        // 行数据\n        rows: [],\n        // 行高，height + padding + border\n        rowHeight,\n        // 滚动条顶部距离\n        scrollTop: 0,\n        // 绑定 select 的值\n        selectValues: {},\n        // 绑定 checkbox 的值\n        checkboxValues: {},\n        // 绑定 jdate 的值\n        jdateValues: {},\n        // 绑定jinputpop\n        jInputPopValues:{},\n        // 绑定插槽数据\n        slotValues: {},\n        // file 信息\n        uploadValues: {},\n        //popup信息\n        popupValues: {},\n        //部门组件信息\n        departCompValues:{},\n        //用户组件信息\n        userCompValues: {},\n\n        radioValues: {},\n        metaCheckboxValues: {},\n        multiSelectValues: {},\n        searchSelectValues: {},\n        searchSelectAsyncValues: {},\n        // 绑定左侧选择框已选择的id\n        selectedRowIds: [],\n        // 存储被删除行的id\n        deleteIds: [],\n        // 存储显示tooltip的信息\n        tooltips: {},\n        // 存储没有通过验证的inputId\n        notPassedIds: [],\n\n        // 当前是否正在拖拽排序\n        dragging: false,\n        // 是否有统计列\n        hasStatisticsColumn: false,\n        statisticsColumns: {},\n        // 只有在行编辑被销毁时才主动清空GroupRequest的内存\n        destroyCleanGroupRequest: false,\n        // 当前正在编辑的行的id\n        currentEditRows: {},\n        // 上次push数据的事件，用于判断是否点击过快\n        lastPushTimeMap: new Map(),\n        number:0,\n        //不显示的按钮编码\n        excludeCode:[]\n      }\n    },\n    created() {\n      this.inputValues = []\n      // 当前显示的tr\n      this.visibleTrEls = []\n      this.disabledRowIds = (this.disabledRowIds || [])\n      // 解决火狐浏览器下拖拽会打开新的Tab的问题\n      document.body.ondrop = (event) => {\n        if (this.dragging) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n      }\n    },\n    // 计算属性\n    computed: {\n      // expandHeight = rows.length * rowHeight\n      getExpandHeight() {\n        let length = this.rows.length * this.rowHeight\n        if (this.showStatisticsRow) {\n          length += 34\n        }\n        return length\n      },\n      // 是否显示统计行\n      showStatisticsRow() {\n        return this.hasStatisticsColumn && this.rows.length > 0\n      },\n      // 获取是否选择了部分\n      getSelectIndeterminate() {\n        return (this.selectedRowIds.length > 0 &&\n          this.selectedRowIds.length < this.rows.length)\n      },\n      // 获取是否选择了全部\n      getSelectAll() {\n        return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\n      },\n      tbodyStyle() {\n        let style = Object.assign({}, this.style.tbody)\n        // style['max-height'] = `${this.maxHeight}px`\n        style['width'] = this.realTrWidth\n        return style\n      },\n      showClearSelectButton() {\n        let count = 0\n        for (let key in this.disabledRows) {\n          if (this.disabledRows.hasOwnProperty(key)) count++\n        }\n        return count > 0\n      },\n      accessToken() {\n        return Vue.ls.get(ACCESS_TOKEN)\n      },\n      realTrWidth() {\n        let splice = ' + '\n        let calcWidth = 'calc('\n        this.columns.forEach((column, i) => {\n          let { type, width } = column\n          // 隐藏字段不参与计算\n          if (type !== FormTypes.hidden) {\n            if (typeof width === 'number') {\n              calcWidth += width + 'px'\n            } else if (typeof width === 'string') {\n              calcWidth += width\n            } else {\n              calcWidth += '120px'\n            }\n            calcWidth += splice\n          }\n        })\n        if (calcWidth.endsWith(splice)) {\n          calcWidth = calcWidth.substring(0, calcWidth.length - splice.length)\n        }\n        calcWidth += ')'\n        // console.log('calcWidth: ', calcWidth)\n        return calcWidth\n      }\n    },\n    // 侦听器\n    watch: {\n      rows: {\n        immediate: true,\n        handler(val, old) {\n          // val.forEach(item => {\n          //   for (let inputValue of  this.inputValues) {\n          //     if (inputValue.id === item.id) {\n          //       item['dbFieldName'] = inputValue['dbFieldName']\n          //       break\n          //     }\n          //   }\n          // })\n          // console.log('watch.rows:', cloneObject({ val, old }))\n        }\n      },\n      dataSource: {\n        immediate: true,\n        handler: function (newValue) {\n          // 兼容IE\n          this.getElementPromise('tbody').then(() => {\n            this.initialize()\n            this._pushByDataSource(newValue)\n          })\n        }\n      },\n      columns: {\n        immediate: true,\n        handler(columns) {\n          //列改变的时候重新设置按钮权限信息\n          this.loadExcludeCode()\n          // 兼容IE\n          this.getElementPromise('tbody').then(() => {\n            columns.forEach(column => {\n              if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n                // 兼容 旧版本 options\n                if (column.options instanceof Array) {\n                  column.options = column.options.map(item => {\n                    if (item) {\n                      return {\n                        ...item,\n                        text: item.text || item.title,\n                        title: item.text || item.title\n                      }\n                    }\n                    return {}\n                  })\n                }\n                if (column.dictCode) {\n                  this._loadDictConcatToOptions(column)\n                }\n              }\n            })\n          })\n        }\n      },\n      // 当selectRowIds改变时触发事件\n      selectedRowIds(newValue) {\n        this.$emit('selectRowChange', cloneObject(newValue).map(i => this.getCleanId(i)))\n      }\n    },\n    mounted() {\n      let vm = this\n      /** 监听滚动条事件 */\n      this.getElement('inputTable').onscroll = function (event) {\n        vm.syncScrollBar(event.target.scrollLeft)\n      }\n      this.getElement('tbody').onscroll = function (event) {\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\n      }\n\n      let { thead, scrollView } = this.$refs\n      scrollView.onscroll = function (event) {\n\n        // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n\n        thead.scrollLeft = event.target.scrollLeft\n\n        vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      }\n\n      // 添加事件监听\n      this.addEventListener()\n\n    },\n    methods: {\n\n      getElement(id, noCaseId = false) {\n        if (!this.el[id]) {\n          this.el[id] = document.getElementById((noCaseId ? '' : this.caseId) + id)\n        }\n        return this.el[id]\n      },\n\n      getElementPromise(id, noCaseId = false) {\n        return new Promise((resolve) => {\n          let timer = setInterval(() => {\n            let element = this.getElement(id, noCaseId)\n            if (element) {\n              clearInterval(timer)\n              resolve(element)\n            }\n          }, 10)\n        })\n      },\n\n      /** 初始化列表 */\n      initialize() {\n        this.visibleTrEls = []\n        // 判断是否是首次进入该方法，如果是就不清空行，防止删除了预添加的数据\n        if (!this.isFirst) {\n         this.clearRow();\n        } else {\n          this.isFirst = false\n        }\n      },\n      /**清空行*/\n      clearRow(){\n        // inputValues：用来存储input表单的值\n        // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n        // 示例：\n        // [{\n        //    id: \"_jet-4sp0iu-15541771111770\"\n        //    dbDefaultVal: \"aaa\",\n        //    dbFieldName: \"bbb\",\n        //    dbFieldTxt: \"ccc\",\n        //    dbLength: 32\n        // }]\n        this.inputValues = []\n        this.rows = []\n        this.deleteIds = []\n        this.selectedRowIds = []\n        this.tooltips = {}\n        this.notPassedIds = []\n        // 重置values\n        this.selectValues = {}\n        this.checkboxValues = {}\n        this.jdateValues = {}\n        this.jInputPopValues = {}\n        this.departCompValues = {}\n        this.userCompValues = {}\n        this.slotValues = {}\n        //update-begin-author:shunjlei date:20210415 for:类型赋值错误\n        this.uploadValues = {}\n        this.popupValues = {}\n        this.radioValues = {}\n        this.multiSelectValues = {}\n        this.searchSelectValues = {}\n        this.searchSelectAsyncValues = {}\n        //update-end-author:shunjlei date:20210415 for:类型赋值错误\n\n        // 重置滚动条\n        this.scrollTop = 0\n        this.$nextTick(() => {\n          this.getElement('tbody').scrollTop = 0\n        })\n      },\n      /** 同步滚动条状态 */\n      syncScrollBar(scrollLeft) {\n        // this.style.tbody.left = `${scrollLeft}px`\n        // this.getElement('tbody').scrollLeft = scrollLeft\n      },\n      /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n      resetScrollTop(top) {\n        let { scrollView } = this.$refs\n        if (top != null && typeof top === 'number') {\n          scrollView.scrollTop = top\n        } else {\n          scrollView.scrollTop = this.scrollTop\n        }\n      },\n      /** 重新计算需要隐藏或显示的tr */\n      recalcTrHiddenItem(top) {\n        let diff = top - this.scrollTop\n        if (diff < 0) {\n          diff = this.scrollTop - top\n        }\n        // 只有在滚动了百分之三十的行高的距离时才进行更新\n        if (diff >= this.rowHeight * 0.3) {\n          this.scrollTop = top\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.updateFormValues()\n          })\n        }\n      },\n      /** 生成id */\n      generateId(rows) {\n        if (!(rows instanceof Array)) {\n          rows = this.rows || []\n        }\n        let timestamp = new Date().getTime()\n        return `${this.caseId}${timestamp}${rows.length}${randomNumber(6)}${this.tempId}`\n      },\n      /** push 一条数据 */\n      push(record, update = true, rows, insertIndex = null, setDefaultValue = true) {\n        return this._pushByDataSource([record], [insertIndex], update, rows, setDefaultValue)\n      },\n\n      /**\n       * push 数据\n       *\n       * @param dataSource 数据源\n       * @param insertIndexes 行插入位置，和dataSource的下标一一对应\n       * @param update 是否更新\n       * @param rows 若不传就使用 this.rows\n       * @param setDefaultValue 是否填充默认值\n       *\n       */\n      _pushByDataSource(dataSource, insertIndexes = null, update = true, rows = null, setDefaultValue = false) {\n        if (!(rows instanceof Array)) {\n          rows = [...this.rows] || []\n        }\n        let checkboxValues = { ...this.checkboxValues }\n        let selectValues = { ...this.selectValues }\n        let jdateValues = { ...this.jdateValues }\n        let departCompValues = { ...this.departCompValues }\n        let userCompValues = { ...this.userCompValues }\n        let jInputPopValues = { ...this.jInputPopValues }\n        let slotValues = { ...this.slotValues }\n        let uploadValues = { ...this.uploadValues }\n        let popupValues = { ...this.popupValues }\n        let radioValues = { ...this.radioValues }\n        let multiSelectValues = { ...this.multiSelectValues }\n        let searchSelectValues = { ...this.searchSelectValues }\n        let searchSelectAsyncValues = { ...this.searchSelectAsyncValues }\n        // 禁用行的id\n        let disabledRowIds = (this.disabledRowIds || [])\n        dataSource.forEach((data, newValueIndex) => {\n          // 不能直接更改数据源的id\n          let dataId = data.id\n          // 判断源数据是否带有id\n          if (dataId == null || dataId === '') {\n            dataId = this.generateId(rows)\n          } else if(!this.hasCaseId(dataId)) {\n            dataId = this.caseId + dataId\n          }\n          let row = { id: dataId }\n          let value = { id: dataId }\n          let disabled = false\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\n\n            let defaultValue = null;\n            if (setDefaultValue) {\n              defaultValue = column.defaultValue || (column.defaultValue === 0 ? 0 : '')\n              if (defaultValue instanceof Array) {\n                defaultValue = defaultValue.join(',')\n              }\n\n              sourceValue = (typeof sourceValue === 'number' || sourceValue) ? sourceValue : defaultValue\n            }\n            let sourceValueIsEmpty = (sourceValue == null || sourceValue === '')\n\n            if (column.type === FormTypes.inputNumber) {\n              // 判断是否是排序字段，如果是就赋最大值\n              if (column.isOrder === true) {\n                value[column.key] = this.getInputNumberMaxValue(column) + 1\n              } else {\n                value[column.key] = sourceValue\n              }\n              // 判断是否是统计列\n              if (column.statistics) {\n                this.hasStatisticsColumn = true\n                if (!this.statisticsColumns[column.key]) {\n                  this.$set(this.statisticsColumns, column.key, 0)\n                }\n              }\n\n            } else if (column.type === FormTypes.checkbox) {\n              // 判断是否设定了customValue（自定义值）\n              if (column.customValue instanceof Array) {\n                let customValue = (column.customValue[0] || '').toString()\n                if (sourceValueIsEmpty && setDefaultValue) {\n                  sourceValue = column.defaultChecked ? customValue : sourceValue\n                }\n                checkboxValues[inputId] = (sourceValue === customValue)\n              } else {\n                if (sourceValueIsEmpty && setDefaultValue) {\n                  checkboxValues[inputId] = !!column.defaultChecked\n                } else {\n                  checkboxValues[inputId] = sourceValue\n                }\n              }\n\n            } else if (column.type === FormTypes.select) {\n              if (!sourceValueIsEmpty) {\n                // 判断是否是多选\n                if (typeof sourceValue === 'string' && (column.props || {})['mode'] === 'multiple') {\n                  sourceValue = sourceValue === '' ? [] : sourceValue.split(',')\n                }\n                selectValues[inputId] = sourceValue\n              } else {\n                selectValues[inputId] = undefined\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              jdateValues[inputId] = sourceValue\n\n            } else if (column.type === FormTypes.slot) {\n              slotValues[inputId] = sourceValue\n\n            } else if (column.type === FormTypes.popup) {\n              popupValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_depart) {\n              departCompValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_user) {\n              userCompValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.input_pop) {\n              jInputPopValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.radio) {\n              radioValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_search) {\n              searchSelectValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_search_async) {\n              searchSelectAsyncValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.list_multi) {\n              if (typeof sourceValue === 'string' && sourceValue.length > 0) {\n                multiSelectValues[inputId] = sourceValue.split(',')\n              } else {\n                multiSelectValues[inputId] = []\n              }\n            } else if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n              if (sourceValue) {\n                let fileName = ''\n                if (sourceValue.indexOf(',') > 0) {\n                  let sourceValue2 = sourceValue.split(',')[0]\n                  fileName = sourceValue2.substring(sourceValue2.lastIndexOf('/') + 1)\n                } else {\n                  fileName = sourceValue.substring(sourceValue.lastIndexOf('/') + 1)\n                }\n                uploadValues[inputId] = {\n                  name: fileName,\n                  status: 'done',\n                  path: sourceValue\n                }\n              } else {\n                uploadValues[inputId] = null\n              }\n            } else {\n              value[column.key] = sourceValue\n            }\n\n            // 解析disabledRows\n            for (let columnKey in this.disabledRows) {\n              // 判断是否有该属性\n              if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                if (disabled !== true) {\n                  let temp = this.disabledRows[columnKey]\n                  // 禁用规则可以是一个数组\n                  if (temp instanceof Array) {\n                    disabled = temp.includes(data[columnKey])\n                  } else {\n                    disabled = (temp === data[columnKey])\n                  }\n                  if (disabled) {\n                    disabledRowIds.push(row.id)\n                  }\n                }\n              }\n            }\n          })\n          // 插入行而不是添加到最后\n          let added = false\n          if (insertIndexes instanceof Array) {\n            let insertIndex = insertIndexes[newValueIndex]\n            if (typeof insertIndex === 'number') {\n              added = true\n              rows.splice(insertIndex, 0, row)\n              this.inputValues.splice(insertIndex, 0, value)\n            }\n          }\n          //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n          if(-1 !== rows.findIndex(item => item.id === row.id)){\n            added = true\n            this.inputValues = this.inputValues.map(item => item.id === row.id ? value : item)\n          }\n          //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n          if (!added) {\n            rows.push(row)\n            this.inputValues.push(value)\n          }\n        })\n        // 启用了拖动排序，就重新计算排序编号\n        if (this.dragSort) {\n          this.inputValues.forEach((item, index) => {\n            item[this.dragSortKey] = (index + 1)\n          })\n        }\n        this.disabledRowIds = disabledRowIds\n        this.checkboxValues = checkboxValues\n        this.selectValues = selectValues\n        this.jdateValues = jdateValues\n        this.departCompValues = departCompValues\n        this.userCompValues = userCompValues\n        this.jInputPopValues = jInputPopValues\n        this.slotValues = slotValues\n        this.uploadValues = uploadValues\n        this.popupValues = popupValues\n        this.radioValues = radioValues\n        this.multiSelectValues = multiSelectValues\n        this.searchSelectValues = searchSelectValues\n        this.searchSelectAsyncValues = searchSelectAsyncValues\n        // 重新计算所有统计列\n        this.recalcAllStatisticsColumns()\n        // 更新到 dom\n        if (update) {\n          this.rows = rows\n\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.forceUpdateFormValues()\n          })\n        }\n        return rows\n      },\n\n      /** 获取某一数字输入框列中的最大的值 */\n      getInputNumberMaxValue(column) {\n        let maxNum = 0\n        this.inputValues.forEach((item, index) => {\n          let val = item[column.key], num\n          try {\n            num = parseInt(val)\n          } catch {\n            num = 0\n          }\n          // 把首次循环的结果当成最大值\n          if (index === 0) {\n            maxNum = num\n          } else {\n            maxNum = (num > maxNum) ? num : maxNum\n          }\n        })\n        return maxNum\n      },\n      /** 添加一行 */\n      add(num = 1, forceScrollToBottom = false) {\n        if (num < 1) return\n        // let timestamp = new Date().getTime()\n        let rows = this.rows\n        let row\n        for (let i = 0; i < num; i++) {\n          rows = this.push({}, false, rows)\n          row = rows[rows.length - 1]\n        }\n        this.rows = rows\n\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n        // 触发add事件\n        this.$emit('added', {\n          row: (() => {\n            let r = Object.assign({}, row)\n            r.id = this.getCleanId(r.id)\n            return r\n          })(),\n          target: this\n        })\n        // 设置滚动条位置\n        let tbody = this.getElement('tbody')\n        let offsetHeight = tbody.offsetHeight\n        let realScrollTop = tbody.scrollTop + offsetHeight\n        if (forceScrollToBottom === false) {\n          // 只有滚动条在底部的时候才自动滚动\n          if (!((tbody.scrollHeight - realScrollTop) <= 10)) {\n            return\n          }\n        }\n        this.$nextTick(() => {\n          tbody.scrollTop = tbody.scrollHeight\n        })\n      },\n      /**\n       * 在指定位置添加一行\n       * @param insertIndex 添加位置下标\n       * @param num 添加的行数，默认1\n       */\n      insert(insertIndex, num = 1) {\n        if (this.checkTooFastClick('insert', 1500)) {\n          return\n        }\n        if (!insertIndex && num < 1) return\n        let rows = this.rows\n        let newRows = []\n        for (let i = 0; i < num; i++) {\n          let row = { id: this.generateId(rows) }\n          rows = this.push(row, false, rows, insertIndex)\n          newRows.push(row)\n        }\n        // 同步更改\n        this.rows = rows\n        this.$nextTick(() => {\n          this.recalcSortNumber()\n          this.forceUpdateFormValues()\n        })\n        // 触发 insert 事件\n        this.$emit('inserted', {\n          rows: newRows.map(row => {\n            let r = cloneObject(row)\n            r.id = this.getCleanId(r.id)\n            return r\n          }),\n          num, insertIndex,\n          target: this\n        })\n      },\n      /** 删除被选中的行 */\n      removeSelectedRows() {\n        this.removeRows(this.selectedRowIds)\n        this.selectedRowIds = []\n      },\n      /** 删除一行或多行 */\n      removeRows(id) {\n        let ids = id\n        if (!(id instanceof Array)) {\n          if (typeof id === 'string') {\n            ids = [id]\n          } else {\n            throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\n          }\n        }\n\n        let rows = cloneObject(this.rows)\n        ids.forEach(removeId => {\n          removeId = this.getCleanId(removeId)\n          // 找到每个id对应的真实index并删除\n          const findAndDelete = (arr) => {\n            for (let i = 0; i < arr.length; i++) {\n              let currentId = this.getCleanId(arr[i].id)\n              if (currentId === removeId) {\n                arr.splice(i, 1)\n                return true\n              }\n            }\n          }\n          // 找到rows对应的index，并删除\n          if (findAndDelete(rows)) {\n            // 找到values对应的index，并删除\n            findAndDelete(this.inputValues)\n            // 将caseId去除\n            let id = this.getCleanId(removeId)\n            this.deleteIds.push(id)\n          }\n        })\n        this.rows = rows\n        this.$emit('deleted', this.getDeleteIds(), this)\n        this.$nextTick(() => {\n          // 更新formValues\n          this.updateFormValues()\n          // 重新计算统计\n          this.recalcAllStatisticsColumns()\n        })\n        return true\n      },\n\n      /** 获取表格表单里的值（异步版） */\n      getValuesAsync(options = {}, callback) {\n        let { validate, rowIds, deleteTempId } = options\n        if (typeof validate !== 'boolean') validate = true\n        if (!(rowIds instanceof Array)) rowIds = null\n        // 是否删除临时ID，默认为 false\n        if (typeof deleteTempId !== 'boolean') deleteTempId = false\n        // console.log('options:', { validate, rowIds })\n\n        let asyncCount = 0\n        let error = 0\n        let inputValues = cloneObject(this.inputValues)\n        let tooltips = Object.assign({}, this.tooltips)\n        let notPassedIds = cloneObject(this.notPassedIds)\n        // 用于存储合并后的值\n        let values = []\n        // 遍历inputValues来获取每行的值\n        for (let value of inputValues) {\n          let rowIdsFlag = false\n          // 如果带有rowIds，那么就只存这几行的数据\n          if (rowIds == null) {\n            rowIdsFlag = true\n          } else {\n            for (let rowId of rowIds) {\n              if (this.getCleanId(rowId) === this.getCleanId(value.id)) {\n                rowIdsFlag = true\n                break\n              }\n            }\n          }\n\n          if (!rowIdsFlag) continue\n\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            if (column.type === FormTypes.checkbox) {\n              let checked = this.checkboxValues[inputId]\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1]\n              } else {\n                value[column.key] = checked\n              }\n\n            } else if (column.type === FormTypes.select) {\n              let selected = this.selectValues[inputId]\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected)\n              } else {\n                value[column.key] = selected\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n              value[column.key] = this.jdateValues[inputId]\n\n            } else if (column.type === FormTypes.sel_depart) {\n              value[column.key] = this.departCompValues[inputId]\n\n            } else if (column.type === FormTypes.sel_user) {\n              value[column.key] = this.userCompValues[inputId]\n\n            } else if (column.type === FormTypes.input_pop) {\n              value[column.key] = this.jInputPopValues[inputId]\n\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(this.uploadValues[inputId] || null)\n\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n              let currUploadObj = cloneObject(this.uploadValues[inputId] || null)\n              if (currUploadObj) {\n                value[column.key] = currUploadObj['path'] || null\n              }\n\n            } else if (column.type === FormTypes.popup) {\n              if (!value[column.key]) {\n                value[column.key] = this.popupValues[inputId] || null\n              }\n            } else if (column.type === FormTypes.radio) {\n              value[column.key] = this.radioValues[inputId]\n            } else if (column.type === FormTypes.sel_search) {\n              value[column.key] = this.searchSelectValues[inputId]\n            } else if (column.type === FormTypes.sel_search_async) {\n              value[column.key] = this.searchSelectAsyncValues[inputId]\n            } else if (column.type === FormTypes.list_multi) {\n              if (!this.multiSelectValues[inputId] || this.multiSelectValues[inputId].length === 0) {\n                value[column.key] = ''\n              } else {\n                value[column.key] = this.multiSelectValues[inputId].join(',')\n              }\n            } else if (column.type === FormTypes.slot) {\n              value[column.key] = this.slotValues[inputId]\n            }\n\n\n            // 检查表单验证\n            if (validate === true) {\n              const handleValidateOneInput = (results) => {\n                tooltips[inputId] = results[0]\n                if (tooltips[inputId].passed === false) {\n                  error++\n                  // if (error++ === 0) {\n                  // let element = document.getElementById(inputId)\n                  // while (element.className !== 'tr') {\n                  //   element = element.parentElement\n                  // }\n                  // this.jumpToId(inputId, element)\n                  // }\n                }\n                tooltips[inputId].visible = false\n                notPassedIds = results[1]\n              }\n              asyncCount++\n              let results = this.validateOneInputAsync(value[column.key], value, column, notPassedIds, false, 'getValues', (results) => {\n                handleValidateOneInput(results)\n                asyncCount--\n              })\n              handleValidateOneInput(results)\n            }\n          })\n          // 删除 tempId\n          if (deleteTempId && this.isTempId(value.id)) {\n            delete value.id\n          } else {\n            value.id = this.getCleanId(value.id)\n          }\n\n          values.push(value)\n        }\n\n        if (validate === true) {\n          this.tooltips = tooltips\n          this.notPassedIds = notPassedIds\n        }\n\n        const timer = setInterval(() => {\n          if (asyncCount === 0) {\n            clearInterval(timer)\n            if (typeof callback === 'function') {\n              callback({ error, values })\n            }\n          }\n        }, 10)\n\n        return { error, values }\n      },\n\n      /** 获取表格表单里的值（同步版） */\n      getValuesSync(options = {}) {\n        return this.getValuesAsync(options)\n      },\n\n      /** 获取表格表单里的值 */\n      getValues(callback, validate = true, rowIds) {\n        this.getValuesAsync({ validate, rowIds }, ({ error, values }) => {\n          if (typeof callback === 'function') {\n            callback(error, values)\n          }\n        })\n      },\n      /** getValues的Promise版 */\n      getValuesPromise(validate = true, rowIds, deleteTempId) {\n        return new Promise((resolve, reject) => {\n          this.getValuesAsync({ validate, rowIds, deleteTempId }, ({ error, values }) => {\n            if (error === 0) {\n              resolve(values)\n            } else {\n              reject(VALIDATE_NO_PASSED)\n            }\n          })\n        })\n      },\n      /** 获取被删除项的id */\n      getDeleteIds() {\n        return cloneObject(this.deleteIds)\n      },\n      /** 获取所有的数据，包括values、deleteIds */\n      getAll(validate, deleteTempId) {\n        return new Promise((resolve, reject) => {\n          let deleteIds = this.getDeleteIds()\n          this.getValuesPromise(validate, null, deleteTempId).then((values) => {\n            resolve({ values, deleteIds })\n          }).catch(error => {\n            reject(error)\n          })\n        })\n      },\n      /** Sync 获取所有的数据，包括values、deleteIds */\n      getAllSync(validate, rowIds, deleteTempId) {\n        let result = this.getValuesSync({ validate, rowIds, deleteTempId })\n        result.deleteIds = this.getDeleteIds()\n        return result\n      },\n      // slot 获取值\n      _getValueForSlot(rowId) {\n        return this.getValuesSync({ rowIds: [rowId] }).values[0]\n      },\n      _getAllValuesForSlot() {\n        return cloneObject({\n          inputValues: this.inputValues,\n          selectValues: this.selectValues,\n          checkboxValues: this.checkboxValues,\n          jdateValues: this.jdateValues,\n          departCompValues: this.departCompValues,\n          userCompValues: this.userCompValues,\n          jInputPopValues: this.jInputPopValues,\n          slotValues: this.slotValues,\n          uploadValues: this.uploadValues,\n          popupValues: this.popupValues,\n          radioValues: this.radioValues,\n          multiSelectValues: this.multiSelectValues,\n          searchSelectValues: this.searchSelectValues,\n          searchSelectAsyncValues: this.searchSelectAsyncValues,\n        })\n      },\n      /** 设置某行某列的值 */\n      setValues(values) {\n\n        values.forEach(item => {\n          let { rowKey, values: newValues } = item\n          rowKey = this.getCleanId(rowKey)\n          for (let newValueKey in newValues) {\n            if (newValues.hasOwnProperty(newValueKey)) {\n              let edited = false // 已被修改\n              for (let column of this.columns) {\n                if (column.key === newValueKey) {\n                  let newValue = newValues[newValueKey]\n                  this.inputValues.forEach(value => {\n                    // 在inputValues中找到了该字段\n                    if (rowKey === this.getCleanId(value.id)) {\n                      if (value.hasOwnProperty(newValueKey)) {\n                        edited = true\n                        value[newValueKey] = newValue\n                      }\n                    }\n                  })\n                  if (!edited) {\n                    let modelKey = `${newValueKey}${this.caseId}${rowKey}`\n                    if (column.type === FormTypes.select) {\n                      if (newValue !== 0 && !newValue) {\n                        edited = this.setOneValue(this.selectValues, modelKey, undefined)\n                      } else {\n                        edited = this.setOneValue(this.selectValues, modelKey, newValue)\n                      }\n                    } else if (column.type === FormTypes.checkbox) {\n                      // checkbox 特殊处理 CustomValue\n                      let key = this.valuesHasOwnProperty(this.checkboxValues, modelKey)\n                      // 找到对应的column\n                      let sourceValue\n                      // 判断是否设定了customValue（自定义值）\n                      if (column.customValue instanceof Array) {\n                        let customValue = (column.customValue[0] || '').toString()\n                        sourceValue = (newValue === customValue)\n                      } else {\n                        sourceValue = !!newValue\n                      }\n                      this.$set(this.checkboxValues, key, sourceValue)\n                      edited = true\n                    } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n                      edited = this.setOneValue(this.jdateValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.sel_depart) {\n                      edited = this.setOneValue(this.departCompValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.sel_user) {\n                      edited = this.setOneValue(this.userCompValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.input_pop) {\n                      edited = this.setOneValue(this.jInputPopValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.slot) {\n                      edited = this.setOneValue(this.slotValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.upload || column.type === FormTypes.image || column.type === FormTypes.file) {\n                      edited = this.setOneValue(this.uploadValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.popup) {\n                      edited = this.setOneValue(this.popupValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.radio) {\n                      edited = this.setOneValue(this.radioValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.list_multi) {\n                      edited = this.setOneValue(this.multiSelectValues, modelKey, newValue, true)\n                    } else if (column.type === FormTypes.sel_search) {\n                      edited = this.setOneValue(this.searchSelectValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.sel_search_async) {\n                      edited = this.setOneValue(this.searchSelectAsyncValues, modelKey, newValue)\n                    } else {\n                      edited = false\n                    }\n                  }\n                  if (edited) {\n                    this.elemValueChange(column.type, {[newValueKey]: newValue}, column, newValue)\n                  }\n                }\n              }\n              if (!edited) {\n                console.warn(`JEditableTable.setValues：没有找到\"${newValueKey}\"列`)\n              }\n            }\n          }\n        })\n        // 强制更新formValues\n        this.forceUpdateFormValues()\n      },\n      /**\n       * 设置单个组件的值\n       * @param valuesObject 组件存储值的对象\n       * @param modelKey 组件存储值的对象里的key\n       * @param value 新值\n       * @param isMultiple 是否多选，如果是就会对 value 进行一个 split(',') 的操作\n       */\n      setOneValue(valuesObject, modelKey, value, isMultiple = false) {\n        let key = this.valuesHasOwnProperty(valuesObject, modelKey)\n        if (key) {\n          // 处理多选数组\n          if (isMultiple && !Array.isArray(value)) {\n            value = (value || '').toString().trim()\n            value = value === '' ? [] : value.split(',')\n          }\n          this.$set(valuesObject, key, value)\n          return true\n        }\n        return false\n      },\n      valuesHasOwnProperty(values, ownProperty) {\n        let key = ownProperty\n        if (values.hasOwnProperty(key)) {\n          return key\n        }\n        if (values.hasOwnProperty(key + this.tempId)) {\n          return key + this.tempId\n        }\n        return null\n      },\n\n      /** 跳转到指定位置 */\n      // jumpToId(id, element) {\n      //   if (element == null) {\n      //     element = document.getElementById(id)\n      //   }\n      //   if (element != null) {\n      //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n      //     this.getElement('tbody').scrollTop = element.offsetTop\n      //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n      //   }\n      // },\n\n      /**\n       * 验证单个表单，异步版\n       *\n       * @param value 校验的值\n       * @param row 校验的行\n       * @param column 校验的列\n       * @param notPassedIds 没有通过校验的 id\n       * @param update 是否更新到vue中\n       * @param validType 校验触发的方式（input、blur等）\n       * @param callback\n       */\n      validateOneInputAsync(value, row, column, notPassedIds, update = false, validType = 'input', callback) {\n        let tooltips = Object.assign({}, this.tooltips)\n        // let notPassedIds = cloneObject(this.notPassedIds)\n        let inputId = column.key + row.id\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n\n        let [passed, message] = this.validateValue(column, value)\n\n        const nextThen = res => {\n          let [passed, message] = res\n          // !(passed == null && tooltips[inputId].visible != null)\n          if (passed != null) {\n            tooltips[inputId].visible = !passed\n            tooltips[inputId].passed = passed\n            let index = notPassedIds.indexOf(inputId)\n            if (!passed) {\n              tooltips[inputId].title = this.replaceProps(column, message)\n              if (index === -1) notPassedIds.push(inputId)\n            } else {\n              if (index !== -1) notPassedIds.splice(index, 1)\n            }\n          }\n          // 是否更新到data\n          if (update) {\n            this.tooltips = tooltips\n            this.notPassedIds = notPassedIds\n          }\n\n          if (typeof callback === 'function') {\n            callback([tooltips[inputId], notPassedIds])\n          }\n\n        }\n\n        if (typeof passed === 'function') {\n          let executed = false\n          passed(validType, value, { id: this.getCleanId(row.id) }, { ...column }, (flag, msg) => {\n            if (executed) return\n            executed = true\n            if (typeof msg === 'string') {\n              message = msg\n            }\n            if (flag == null) {\n              nextThen([true, message])\n            } else {\n              nextThen([!!flag, message])\n            }\n          }, this)\n        } else {\n          nextThen([passed, message])\n        }\n\n        return [tooltips[inputId], notPassedIds]\n      },\n\n      /** 验证单个表单 */\n      validateOneInput(value, row, column, notPassedIds, update = false, validType = 'input') {\n        return this.validateOneInputAsync(value, row, column, notPassedIds, update, validType)\n      },\n      /** 通过规则验证值是否正确 */\n      validateValue(column, value) {\n        let rules = column.validateRules\n        let passed = true, message = ''\n        // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n        if (rules instanceof Array) {\n          for (let rule of rules) {\n            // 当前值是否为空\n            let isNull = (value == null || value === '')\n            // 验证规则：非空\n            if (rule.required === true && isNull) {\n              passed = false\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n            // 验证规则：唯一校验\n            if (rule.unique === true || rule.pattern === 'only') {\n              let { values } = this.getValuesSync({ validate: false })\n              let findCount = 0\n              for (let val of values) {\n                if (val[column.key] === value) {\n                  if (++findCount >= 2) {\n                    passed = false\n                    break\n                  }\n                }\n              }\n            } else\n            // 验证规则：正则表达式\n            if (!!rule.pattern && !isNull) {\n\n              // 兼容 online 的规则\n              let foo = [\n                { title: '6到16位数字', value: 'n6-16', pattern: /^\\d{6,16}$/ },\n                { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\n                { title: '6到18位字母', value: 's6-18', pattern: /^[a-z|A-Z]{6,18}$/ },\n                { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\n                { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\n                { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\n                { title: '邮政编码', value: 'p', pattern: /^[1-9]\\d{5}$/ },\n                { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\n                { title: '数字', value: 'n', pattern: /^-?\\d+(\\.?\\d+|\\d?)$/ },\n                { title: '整数', value: 'z', pattern: /^-?\\d+$/ },\n                { title: '非空', value: '*', pattern: /^.+$/ },\n                { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\n              ]\n              let flag = false\n              for (let item of foo) {\n                if (rule.pattern === item.value && item.pattern) {\n                  passed = new RegExp(item.pattern).test(value)\n                  flag = true\n                  break\n                }\n              }\n              if (!flag) passed = new RegExp(rule.pattern).test(value)\n            } else\n            // 校验规则：自定义函数校验\n            if (typeof rule.handler === 'function') {\n              return [rule.handler, rule.message]\n            }\n            // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n            if (!passed) {\n              message = rule.message\n              break\n            }\n          }\n        }\n        return [passed, message]\n      },\n\n      /** 动态更新表单的值 */\n      updateFormValues() {\n        let trs = this.getElement('tbody').getElementsByClassName('tr')\n        let trEls = []\n        for (let tr of trs) {\n          trEls.push(tr)\n        }\n        // 获取新增的 tr\n        let newTrEls = trEls\n        if (this.visibleTrEls.length > 0) {\n          newTrEls = []\n          for (let tr of trEls) {\n            let isNewest = true\n            for (let vtr of this.visibleTrEls) {\n              if (vtr.id === tr.id) {\n                isNewest = false\n                break\n              }\n            }\n            if (isNewest) {\n              newTrEls.push(tr)\n            }\n          }\n        }\n        this.visibleTrEls = trEls\n        // 向新增的tr中赋值\n        newTrEls.forEach(tr => {\n          let { idx } = tr.dataset\n          let value = this.inputValues[idx]\n          for (let key in value) {\n            if (value.hasOwnProperty(key)) {\n              let elid = `${key}${value.id}`\n              let el = document.getElementById(elid)\n              if (el) {\n                el.value = value[key]\n              }\n            }\n          }\n        })\n      },\n      /** 强制更新FormValues */\n      forceUpdateFormValues() {\n        this.visibleTrEls = []\n        this.$forceUpdate()\n        this.$nextTick(() => this.updateFormValues())\n      },\n\n      // 重新计算所有统计列\n      recalcAllStatisticsColumns() {\n        if (this.hasStatisticsColumn) {\n          Object.keys(this.statisticsColumns).forEach(key => this.recalcOneStatisticsColumn(key))\n        }\n      },\n      // 重新计算单个统计列\n      recalcOneStatisticsColumn(key) {\n        if (this.hasStatisticsColumn) {\n          if (this.statisticsColumns.hasOwnProperty(key)) {\n            // 计算合计值\n            let count = 0\n            this.inputValues.forEach(item => {\n              let value = item[key]\n              if (value && count !== '-') {\n                try {\n                  count += Number.parseInt(value)\n                } catch (e) {\n                  count = '-'\n                }\n              }\n            })\n            this.statisticsColumns[key] = count\n          }\n        }\n      },\n\n      /** 获取某个统计字段的值 */\n      getStatisticsValue(key) {\n        if (this.hasStatisticsColumn) {\n          if (this.statisticsColumns.hasOwnProperty(key)) {\n            return this.statisticsColumns[key]\n          }\n        }\n        return null\n      },\n\n      /** 全选或取消全选 */\n      handleChangeCheckedAll() {\n        let selectedRowIds = []\n        if (!this.getSelectAll) {\n          this.rows.forEach(row => {\n            if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\n              selectedRowIds.push(row.id)\n            }\n          })\n        }\n        this.selectedRowIds = selectedRowIds\n      },\n      /** 左侧行选择框change事件 */\n      handleChangeLeftCheckbox(event) {\n        let { id } = event.target\n\n        if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n          return\n        }\n\n        let index = this.selectedRowIds.indexOf(id)\n        if (index !== -1) {\n          this.selectedRowIds.splice(index, 1)\n        } else {\n          this.selectedRowIds.push(id)\n        }\n\n      },\n      handleClickAdd() {\n        this.add()\n      },\n      handleConfirmDelete() {\n        this.removeSelectedRows()\n      },\n      handleClickClearSelection() {\n        this.clearSelection()\n      },\n      clearSelection() {\n        this.selectedRowIds = []\n      },\n      /** 用于搜索下拉框中的内容 */\n      handleSelectFilterOption(input, option, column) {\n        if (column.allowSearch === true || column.allowInput === true) {\n          return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n        }\n        return true\n      },\n      /** select 搜索时的事件，用于动态添加options */\n      handleSearchSelect(value, id, row, col) {\n        if (col.allowSearch !== true && col.allowInput === true) {\n          // 是否找到了对应的项，找不到则添加这一项\n          let flag = false\n          for (let option of col.options) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true\n              break\n            }\n          }\n          // !!value ：不添加空值\n          if (!flag && !!value) {\n            // searchAdd 是否是通过搜索添加的\n            col.options.push({ title: value, value: value, searchAdd: true })\n          }\n\n        }\n      },\n      // blur 失去焦点\n      handleBlurSearch(value, id, row, col) {\n        if (col.allowInput === true) {\n          // 删除无用的因搜索（用户输入）而创建的项\n          if (typeof value === 'string') {\n            let indexs = []\n            col.options.forEach((option, index) => {\n              if (option.value.toLocaleString() === value.toLocaleString()) {\n                delete option.searchAdd\n              } else if (option.searchAdd === true) {\n                indexs.push(index)\n              }\n            })\n            // 翻转删除数组中的项\n            for (let index of indexs.reverse()) {\n              col.options.splice(index, 1)\n            }\n          }\n\n        }\n        // 做单个表单验证\n        this.validateOneInput(value, row, col, this.notPassedIds, true, 'blur')\n      },\n\n      /** 触发已拖动事件 */\n      emitDragged(oldIndex, newIndex) {\n        this.$emit('dragged', { oldIndex, newIndex, target: this })\n      },\n\n      handleDragMoveStart(event) {\n        this.dragging = true\n        this.$refs.scrollView.style.overflow = 'hidden'\n      },\n\n      /** 拖动结束，交换inputValue中的值 */\n      handleDragMoveEnd(event) {\n        this.dragging = false\n        this.$refs.scrollView.style.overflow = 'auto'\n\n        let { oldIndex, newIndex, item: { dataset: { idx: dataIdx } } } = event\n\n        // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n        let diff = Number.parseInt(dataIdx) - oldIndex\n        oldIndex += diff\n        newIndex += diff\n\n        this.rowResort(oldIndex, newIndex)\n        this.emitDragged(oldIndex, newIndex)\n      },\n\n      /** 行重新排序 */\n      rowResort(oldIndex, newIndex) {\n        const sort = (array) => {\n          // 存储旧数据，并删除旧项目\n          let temp = array[oldIndex]\n          array.splice(oldIndex, 1)\n          // 向新项目里添加旧数据\n          array.splice(newIndex, 0, temp)\n        }\n\n        sort(this.rows)\n        sort(this.inputValues)\n\n        this.recalcSortNumber()\n\n        this.forceUpdateFormValues()\n      },\n\n      /** 重新计算排序字段的数值 */\n      recalcSortNumber() {\n        if (this.dragSort) {\n          // 重置排序字段\n          this.inputValues.forEach((val, idx) => val[this.dragSortKey] = (idx + 1))\n        }\n      },\n\n      /** 当前行向上移一位 */\n      _handleRowMoveUp(rowIndex) {\n        if (rowIndex > 0) {\n          let newIndex = rowIndex - 1\n          this.rowResort(rowIndex, newIndex)\n          this.emitDragged(rowIndex, newIndex)\n        }\n      },\n\n      /** 当前行向下移一位 */\n      _handleRowMoveDown(rowIndex) {\n        if (rowIndex < (this.rows.length - 1)) {\n          let newIndex = rowIndex + 1\n          this.rowResort(rowIndex, newIndex)\n          this.emitDragged(rowIndex, newIndex)\n        }\n      },\n\n      /** 在当前行下面插入一行 */\n      _handleRowInsertDown(rowIndex) {\n        let insertIndex = (rowIndex + 1)\n        this.insert(insertIndex)\n      },\n\n      /* --- common function begin --- */\n\n      /** input事件 */\n      handleInputCommono(target, index, row, column) {\n        let oldValue = this.inputValues[index][column.key] || ''\n        let { value, dataset, selectionStart } = target\n        let type = FormTypes.input\n        let change = true\n        if (`${dataset.inputNumber}` === 'true') {\n          type = FormTypes.inputNumber\n          // 判断输入的值是否匹配数字正则表达式，不匹配就还原\n          if (!/^-?\\d+\\.?\\d*$/.test(value) && (value !== '' && value !== '-')) {\n            change = false\n            value = oldValue\n            target.value = value\n            if (typeof selectionStart === 'number') {\n              target.selectionStart = selectionStart - 1\n              target.selectionEnd = selectionStart - 1\n            }\n          }\n        }\n        // 存储输入的值\n        this.inputValues[index][column.key] = value\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'input')\n\n        if (type === FormTypes.inputNumber) {\n          this.recalcOneStatisticsColumn(column.key)\n        }\n\n        // 触发valueChange 事件\n        if (change) {\n          this.elemValueChange(type, row, column, value)\n        }\n      },\n      /** slot Change */\n      handleChangeSlotCommon(value, id, row, column) {\n        this.slotValues = this.bindValuesChange(value, id, 'slotValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.slot, row, column, value)\n      },\n      handleBlurCommono(target, index, row, column) {\n        let { value, dataset } = target\n        if (dataset && `${dataset.inputNumber}` === 'true') {\n          // 判断输入的值是否匹配数字正则表达式，不匹配就置空\n          if (!/^-?\\d+\\.?\\d*$/.test(value)) {\n            value = ''\n          } else {\n            value = Number.parseFloat(value)\n          }\n          target.value = value\n        }\n        //update--begin--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n        setTimeout(()=>{\n          // 做单个表单验证\n          this.validateOneInput(value, row, column, this.notPassedIds, true, 'blur')\n        }, 100)\n        //update--end--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n      },\n      handleChangeCheckboxCommon(event, row, column) {\n        let { id, checked } = event.target\n        this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.checkbox, row, column, checked)\n      },\n      handleChangeSelectCommon(value, id, row, column) {\n        this.selectValues = this.bindValuesChange(value, id, 'selectValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.select, row, column, value)\n      },\n      handleChangeJDateCommon(value, id, row, column, showTime) {\n        this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n        // 触发valueChange 事件\n        if (showTime) {\n          this.elemValueChange(FormTypes.datetime, row, column, value)\n        } else {\n          this.elemValueChange(FormTypes.date, row, column, value)\n        }\n      },\n      //部门组件值改变\n      handleChangeDepartCommon(value, id, row, column){\n        this.departCompValues = this.bindValuesChange(value, id, 'departCompValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.sel_depart, row, column, value)\n      },\n      //用户组件值改变\n      handleChangeUserCommon(value, id, row, column){\n        this.userCompValues = this.bindValuesChange(value, id, 'userCompValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.sel_user, row, column, value)\n      },\n      handleChangeJInputPopCommon(value, id, row, column){\n        this.jInputPopValues = this.bindValuesChange(value, id, 'jInputPopValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.input_pop, row, column, value)\n      },\n      handleChangeUpload(info, id, row, column) {\n        let { file } = info\n        let value = {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          status: file.status,\n          percent: file.percent\n        }\n        if (column.responseName && file.response) {\n          value['responseName'] = file.response[column.responseName]\n        }\n        if (file.status === 'done') {\n          value['path'] = file.response[column.responseName]\n        } else if (file.status === 'error') {\n          value['message'] = file.response.message || '未知错误'\n        }\n        this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\n\n        // 触发valueChange 事件\n        this.elemValueChange(column.type, row, column, value)\n      },\n      handleMoreOperation(id,flag,column){\n        //update-begin-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n        if(column.number){\n          this.number = column.number;\n        }else{\n          this.number = 0;\n        }\n        //update-end-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n        if(column && column.fieldExtendJson){\n          let json = JSON.parse(column.fieldExtendJson);\n          this.number = json.uploadnum?json.uploadnum:0;\n        }\n        //console.log(\"this.uploadValues[id]\",this.uploadValues[id])\n        let path = ''\n        if(this.uploadValues && this.uploadValues[id]){\n          path = this.uploadValues[id].path\n        }\n        this.$refs.filePop.show(id,path,flag)\n      },\n      handleFileSuccess(obj){\n        if(obj.id){\n          this.uploadValues = this.bindValuesChange(obj, obj.id, 'uploadValues')\n        }\n      },\n      handleClickTableRow(event) {\n        let {target} = event\n        if (target.className === 'td' || target.className === 'tr') {\n          // 清空编辑状态\n          this.currentEditRows = {}\n        }\n      },\n      // 点击后编辑当前行\n      handleEditRow(row, col) {\n        if (this.alwaysEdit) {\n          return\n        }\n        // 将点击的组件置为可编辑并还原其他组件的编辑状态\n        this.currentEditRows = {\n          [row.id]: {\n            [col.key]: true\n          }\n        }\n        if (col.type === FormTypes.input || col.type === FormTypes.inputNumber) {\n          this.$nextTick(() => {\n            this.forceUpdateFormValues()\n            // 自动获取焦点\n            let el = document.getElementById(`${col.key}${row.id}`)\n            if (el) {\n              el.focus()\n            }\n          })\n        }\n      },\n      /** 记录用到数据绑定的组件的值 */\n      bindValuesChange(value, id, key) {\n        this.$set(this[key], id, value)\n        return this[key]\n      },\n\n      /** value 触发valueChange事件 */\n      elemValueChange(type, rowSource, columnSource, value) {\n        let column = Object.assign({}, columnSource)\n        // 将caseId去除\n        let row = Object.assign({}, rowSource)\n        row.id = this.getCleanId(row.id)\n        // 获取整行的数据\n        let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\n        if (values.length > 0) {\n          Object.assign(row, values[0])\n        }\n        this.$emit('valueChange', { type, row, column, value, target: this })\n      },\n\n      /** 获取干净的ID（不包含任何杂质的ID） */\n      getCleanId(id) {\n        id = this.removeCaseId(id)\n        id = this.removeTempId(id)\n        return id\n      },\n\n      /** 判断某个ID是否包含了caseId */\n      hasCaseId(id) {\n        return id && id.startsWith(this.caseId)\n      },\n\n      /** 将caseId去除 */\n      removeCaseId(id) {\n        if (this.hasCaseId(id)) {\n          return id.substring(this.caseId.length, id.length)\n        }\n        return id\n      },\n\n      // 判断 id 是否是临时Id\n      isTempId(id) {\n        return (id || '').endsWith(this.tempId)\n      },\n\n      /** 将tempId去除 */\n      removeTempId(id) {\n        if (this.isTempId(id)) {\n          return id.substring(0, id.length - this.tempId.length)\n        }\n        return id;\n      },\n\n      handleClickDelFile(id) {\n        this.uploadValues[id] = null\n      },\n      handleClickDownloadFile(id) {\n        let { path } = this.uploadValues[id] || {}\n        if (path) {\n          let url = getFileAccessHttpUrl(path)\n          window.open(url)\n        }\n      },\n      handleClickDownFileByUrl(id){\n        let { url,path } = this.uploadValues[id] || {}\n        if (!url || url.length===0) {\n          if(path && path.length>0){\n            url = getFileAccessHttpUrl(path.split(',')[0])\n          }\n        }\n        if(url){\n          window.open(url)\n        }\n      },\n      handleClickShowImageError(id) {\n        let currUploadObj = this.uploadValues[id] || null\n        if (currUploadObj && currUploadObj['message']) {\n          this.$error({ title: '上传出错', content: '错误信息：' + currUploadObj['message'], maskClosable: true })\n        }\n      },\n\n      /** 加载数据字典并合并到 options */\n      _loadDictConcatToOptions(column) {\n        initDictOptions(column.dictCode).then((res) => {\n          if (res.success) {\n            let newOptions = (column.options || [])// .concat(res.result)\n            res.result.forEach(item => {\n              // 过滤重复数据\n              for (let option of newOptions) if (option.value === item.value) return\n              newOptions.push(item)\n            })\n            this.$set(column, 'options', newOptions)\n          } else {\n            console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\n            console.log(res.message)\n            console.groupEnd()\n          }\n        })\n      },\n\n      /* --- common function end --- */\n\n      /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n      /** 辅助方法：打印日志 */\n      log() {\n        if (this.$attrs.logger) {\n          console.log.apply(null, arguments)\n        }\n      },\n\n      getVM() {\n        return this\n      },\n\n      /** 辅助方法：动态构造Tooltip的Props，防止出现不消失的情况 */\n      buildTooltipProps(row, col, id) {\n        let {notPassedIds, tooltips} = this\n        let props = {\n          title: (tooltips[id] || {}).title,\n          placement: 'top',\n          autoAdjustOverflow: true,\n          getPopupContainer: this.getParentContainer,\n          class: {\n            'j-check-failed': false\n          },\n        }\n        let isCheckFailed = notPassedIds.includes(id)\n        if (isCheckFailed) {\n          props.class['j-check-failed'] = true\n        } else {\n          props['visible'] = false\n        }\n        return props\n      },\n\n      /** 辅助方法：指定a-select 和 j-data 的父容器 */\n      getParentContainer(node) {\n        let element = (() => {\n          // nodeType 8\t: Comment\t: 注释\n          if (this.$el && this.$el.nodeType !== 8) {\n            return this.$el\n          }\n          let doc = document.getElementById(this.caseId + 'inputTable')\n          if (doc != null) {\n            return doc\n          }\n          return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\n        })()\n\n        // 递归判断是否带有 overflow: hidden；的父元素\n        const ifParent = (child) => {\n          let currentOverflow = null\n          if (child['currentStyle']) {\n            currentOverflow = child['currentStyle']['overflow']\n          } else if (window.getComputedStyle) {\n            currentOverflow = window.getComputedStyle(child)['overflow']\n          }\n          if (currentOverflow != null) {\n            if (currentOverflow === 'hidden') {\n              // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n              let temp = ifParent(child.parentNode)\n              return temp != null ? temp : child.parentNode\n            } else\n            // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode)\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null\n            }\n          } else {\n            return child\n          }\n        }\n\n        let temp = ifParent(element)\n        return (temp != null) ? temp : element\n      },\n\n      /** 辅助方法：替换${...}变量 */\n      replaceProps(col, value) {\n        if (value && typeof value === 'string') {\n          value = value.replace(/\\${title}/g, col.title)\n          value = value.replace(/\\${key}/g, col.key)\n          value = value.replace(/\\${defaultValue}/g, col.defaultValue)\n        }\n        return value\n      },\n\n      /** view辅助方法：构建 tr style */\n      buildTrStyle(index) {\n        return {\n          'top': `${rowHeight * index}px`\n        }\n      },\n      /** view辅助方法：构建 td style */\n      buildTdStyle(col) {\n        const isEmptyWidth = (column) => (column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0)\n\n        let style = {}\n        // 计算宽度\n        if (col.width) {\n          style['width'] = col.width\n        } else if (this.columns) {\n          style['width'] = `${(100 - 4 * 2) / (this.columns.filter(column => !isEmptyWidth(column))).length}%`\n        } else {\n          style['width'] = '120px'\n        }\n        //update-begin-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n        //如果是时间控件设为200px\n        if(col.type === FormTypes.datetime){\n          style['width'] = '200px'\n        }\n        if(col.type === FormTypes.sel_user && !col.width){\n          style['width'] = '220px'\n        }\n        if(col.type === FormTypes.sel_depart && !col.width){\n          style['width'] = '160px'\n        }\n        //update-end-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n\n        // checkbox 居中显示\n        let isCheckbox = col.type === FormTypes.checkbox\n        if (isCheckbox) {\n          style['align-items'] = 'center'\n          style['text-align'] = 'center'\n          style['padding-left'] = '0'\n          style['padding-right'] = '0'\n        }\n        if (isEmptyWidth(col)) {\n          style['padding-left'] = '0'\n          style['padding-right'] = '0'\n        }\n        return style\n      },\n      /** view辅助方法：构造props */\n      buildProps(row, col) {\n        let props = {}\n        // 解析props\n        if (typeof col.props === 'object') {\n          for (let prop in col.props) {\n            if (col.props.hasOwnProperty(prop)) {\n              props[prop] = this.replaceProps(col, col.props[prop])\n            }\n          }\n        }\n        // 判断select是否允许输入\n        if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n          props['showSearch'] = true\n        }\n\n        // 判断是否是禁用的列\n        props['disabled'] = (typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled'])\n\n        // 判断是否为禁用的行\n        if (props['disabled'] !== true) {\n          props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\n        }\n\n        // 判断是否禁用全部组件\n        if (this.disabled === true) {\n          props['disabled'] = true\n        }\n\n        return props\n      },\n\n      /** 辅助方法：防止过快点击，如果点击过快的话就返回 true */\n      checkTooFastClick(key = 'default', ms = 300) {\n        let nowTime = Date.now()\n        let lastTime = this.lastPushTimeMap.get(key)\n        if (!lastTime) {\n          lastTime = nowTime\n          this.lastPushTimeMap.set(key, nowTime)\n          return false\n        }\n        let diffTime = nowTime - lastTime\n        if (diffTime <= ms) {\n          this.$message.warn('你点击的太快了，请慢点点击!')\n          return true\n        }\n        this.lastPushTimeMap.set(key, nowTime)\n        return false\n      },\n\n      /** upload 辅助方法：获取 headers */\n      uploadGetHeaders(row, column) {\n        let headers = {}\n        if (column.token === true) {\n          headers['X-Access-Token'] = this.accessToken\n        }\n        return headers\n      },\n      /** 上传请求地址 */\n      getUploadAction(value) {\n        if (!value) {\n          return window._CONFIG['domianURL'] + '/sys/common/upload'\n        } else {\n          return value\n        }\n      },\n      /** 预览图片地址 */\n      getCellImageView(id) {\n        let currUploadObj = this.uploadValues[id] || null\n        if (currUploadObj) {\n          if(currUploadObj['url']){\n            return currUploadObj['url'];\n          }else if(currUploadObj['path']){\n            let readpath = currUploadObj['path'].split(',')[0]\n            return getFileAccessHttpUrl(readpath)\n          }\n        }\n        return ''\n      },\n      /** popup回调 */\n      popupCallback(value, others, id, row, column, index) {\n        // 存储输入的值\n        let popupValue = value\n        if (others) {\n          let rowKey = this.getCleanId(row.id)\n          let setValueItem = {rowKey, values: {}}\n          Object.keys(others).forEach(key => {\n            // 当前列直接赋值，其他列通过setValues赋值\n            if (key === column.key) {\n              popupValue = others[key]\n            } else {\n              setValueItem.values[key] = others[key]\n            }\n          })\n          if (Object.keys(setValueItem).length > 0) {\n            this.setValues([setValueItem])\n          }\n        }\n        this.setOneValue(this.popupValues, id, popupValue)\n        // 做单个表单验证\n        this.validateOneInput(popupValue, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange('input', row, column, value)\n      },\n      /** popup输入框回显 */\n      getPopupValue(id) {\n        return this.popupValues[id]\n      },\n      handleRadioChange(value, id, row, column) {\n        this.radioValues = this.bindValuesChange(value, id, 'radioValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.radio, row, column, value)\n      },\n      handleMultiSelectChange(value, id, row, column) {\n        this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.list_multi, row, column, value)\n      },\n      handleSearchSelectChange(value, id, row, column) {\n        this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        this.elemValueChange(FormTypes.sel_search, row, column, value)\n      },\n      handleSearchSelectAsyncChange(value, id, row, column) {\n        this.searchSelectAsyncValues = this.bindValuesChange(value, id, 'searchSelectAsyncValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        this.elemValueChange(FormTypes.sel_search_async, row, column, value)\n      },\n      filterOption(input, option) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      },\n      getEllipsisWord(content, len){\n        if(!content || content.length === 0){\n          return ''\n        }\n        if(content.length>len){\n          return content.substr(0,len)\n        }\n        return content;\n      },\n\n      /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n\n      /** 获取Select等组件翻译后的文本 */\n      getSelectTranslateText(value, row, col) {\n        // 翻译支持单选和多选（数组、逗号分割）\n        return filterDictText(col.options, value)\n      },\n\n      // 判定当前行是否是正在编辑的\n      isEditRow(row, col) {\n        if (this.alwaysEdit) {\n          return true\n        }\n        let current = this.currentEditRows[row.id]\n        return !!(current && current[col.key] === true)\n      },\n\n      /* ---- 事件监听 ---- */\n\n      // 鼠标弹起事件，用于清空输入状态\n      handleMouseup(event) {\n        if (this.alwaysEdit || Object.keys(this.currentEditRows).length === 0) {\n          return\n        }\n        // console.log(this.caseId + 'handleMouseup: ', event)\n        let {target} = event\n        if (!target){\n          return\n        }\n        let className = target.className || ''\n        if (typeof className === 'string') {\n          // 点击的标签是span\n          if (className.includes('j-td-span') && className.includes('no-edit')) {\n            return\n          }\n          // 点击的标签是下拉\n          if (className.includes('ant-select-dropdown-menu-item')) {\n            return\n          }\n        }\n\n        // 事件冒泡路径\n        let path = getEventPath(event)\n        for (let p of path) {\n          // 如果点击的是 tr 就不处理（tr单独处理）\n          if ((p.id || '').startsWith(`${this.caseId}tbody-tr`)) {\n            return\n          }\n          let pClassName = p.className || ''\n          pClassName = typeof pClassName === 'string' ? pClassName : pClassName.toString()\n\n          /* --- 特殊处理以下组件，点击以下标签时不清空编辑状态 --- */\n\n          // 点击的标签是JInputPop\n          if (pClassName.includes('j-input-pop')) {\n            return\n          }\n          // 点击的标签是JPopup的弹出层\n          if (pClassName.includes('j-popup-modal')) {\n            return\n          }\n          // 点击的标签是日期选择器的弹出层\n          if (pClassName.includes('j-date-picker') || pClassName.includes('ant-calendar-picker-container')) {\n            return\n          }\n\n        }\n        // 清空编辑状态\n        this.currentEditRows = {}\n      },\n\n      // 添加事件监听\n      addEventListener() {\n        window.addEventListener('mouseup', this.handleMouseup)\n      },\n      // 移除事件监听\n      removeEventListener() {\n        window.removeEventListener('mouseup', this.handleMouseup)\n      },\n      /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n\n      //获取没有授权的按钮编码\n      loadExcludeCode(){\n        if(!this.authPre || this.authPre.length==0){\n          this.excludeCode = []\n        }else{\n          let pre = this.authPre\n          if(!pre.endsWith(':')){\n            pre += ':'\n          }\n          this.excludeCode = getNoAuthCols(pre)\n        }\n      },\n      //判断button是否显示\n      buttonPermission(code){\n        if(!this.excludeCode || this.excludeCode.length==0){\n          return true\n        }else{\n          return this.excludeCode.indexOf(code)<0\n        }\n      }\n\n    },\n    beforeDestroy() {\n      this.removeEventListener()\n      this.destroyCleanGroupRequest = true\n    }\n\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n  .action-button {\n    margin-bottom: 8px;\n\n    .gap {\n      padding-left: 8px;\n    }\n\n  }\n\n  /* 设定边框参数 */\n  @borderColor: #e8e8e8;\n  @border: 1px solid @borderColor;\n  /* tr & td 之间的间距 */\n  @spacing: 8px;\n\n  .input-table {\n    max-width: 100%;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    position: relative;\n    border: @border;\n\n    .thead, .tbody {\n\n      .tr, .td {\n        display: flex;\n      }\n\n      .td {\n\n        /*border-right: 1px solid red;*/\n        /*color: white;*/\n        /*background-color: black;*/\n        /*margin-right: @spacing !important;*/\n\n        padding-left: @spacing;\n        flex-direction: column;\n\n        &.td-cb, &.td-num {\n          width: 45px;\n          min-width: 45px;\n          max-width: 50px;\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n        }\n\n        &.td-ds {\n          width: 30px;\n          min-width: 30px;\n          max-width: 35px;\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n\n          .td-ds-icons {\n            position: relative;\n            cursor: move;\n            width: 100%;\n            /*padding: 25% 0;*/\n            height: 100%;\n\n            .anticon-align-left,\n            .anticon-align-right {\n              position: absolute;\n              top: 30%;\n            }\n\n            .anticon-align-left {\n              left: 25%;\n            }\n\n            .anticon-align-right {\n              right: 25%;\n            }\n          }\n\n\n        }\n\n      }\n\n    }\n\n    .thead {\n      overflow-y: scroll;\n      overflow-x: hidden;\n      border-bottom: @border;\n\n      /** 隐藏thead的滑块   */\n\n      &::-webkit-scrollbar-thumb {\n        box-shadow: none !important;\n        background-color: transparent !important;\n      }\n\n      .tr {\n        min-width: 100%;\n        overflow-y: scroll;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 8px @spacing;\n        justify-content: center;\n      }\n\n    }\n\n    .tbody {\n      position: relative;\n      top: 0;\n      left: 0;\n      overflow-x: hidden;\n      overflow-y: hidden;\n      min-height: 61px;\n      /*max-height: 400px;*/\n      min-width: 100%;\n\n      .tr-nodata {\n        color: #999;\n        line-height: 61px;\n        text-align: center;\n      }\n\n      .tr {\n        /*line-height: 50px;*/\n\n        border-bottom: @border;\n        transition: background-color 300ms;\n        width: 100%;\n        height: 61px;\n        overflow: hidden;\n        position: absolute;\n        left: 0;\n        z-index: 10;\n\n        &.tr-checked {\n          background-color: #fafafa;\n        }\n\n        &:hover {\n          background-color: #E6F7FF;\n        }\n\n      }\n\n      .tr-expand {\n        position: relative;\n        z-index: 9;\n        background-color: white;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 14px @spacing 14px 0;\n        justify-content: center;\n\n        &:last-child {\n          padding-right: @spacing;\n        }\n\n        input {\n          font-variant: tabular-nums;\n          box-sizing: border-box;\n          margin: 0;\n          list-style: none;\n          position: relative;\n          display: inline-block;\n          padding: 4px 11px;\n          width: 100%;\n          height: 32px;\n          font-size: 14px;\n          line-height: 1.5;\n          color: rgba(0, 0, 0, 0.65);\n          background-color: #fff;\n          border: 1px solid #d9d9d9;\n          border-radius: 4px;\n          transition: all 0.3s;\n          outline: none;\n\n          &:hover {\n            border-color: #4D90FE\n          }\n\n          &:focus {\n            border-color: #40a9ff;\n            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n            border-right-width: 1px !important;\n          }\n\n          &:disabled {\n            color: rgba(0, 0, 0, 0.25);\n            background: #f5f5f5;\n            cursor: not-allowed;\n          }\n\n          /* 设置placeholder的颜色 */\n\n          &::-webkit-input-placeholder { /* WebKit browsers */\n            color: #ccc;\n          }\n\n          &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\n            color: #ccc;\n          }\n\n          &::-moz-placeholder { /* Mozilla Firefox 19+ */\n            color: #ccc;\n          }\n\n          &:-ms-input-placeholder { /* Internet Explorer 10+ */\n            color: #ccc;\n          }\n\n        }\n\n        .j-editable-image {\n          height: 32px;\n          max-width: 100px !important;\n          cursor: pointer;\n\n          &:hover {\n            opacity: 0.8;\n          }\n\n          &:active {\n            opacity: 0.6;\n          }\n\n        }\n\n        /* --------------------------- 2020年5月18日 begin 默认span模式 ------------------------------ */\n\n        label {\n          height: 32px;\n\n          &.ant-checkbox-wrapper {\n            height: auto;\n          }\n        }\n\n        .comp-normal {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .j-td-span {\n          position: relative;\n          padding: 4px 11px;\n          border: 1px solid transparent;\n          display: inline-block;\n          width: 100%;\n          max-width: 100%;\n          height: 32px;\n          cursor: text;\n          transition: all 0.3s;\n          box-sizing: border-box;\n          font-size: 14px;\n          line-height: 1.5;\n          color: rgba(0, 0, 0, 0.65);\n          border-radius: 4px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n\n          &:hover {\n            background-color: white;\n          }\n\n          &.disabled {\n            cursor: not-allowed;\n\n            &:hover {\n              color: rgba(0, 0, 0, 0.25);\n              background-color: #F5F5F5;\n            }\n          }\n\n        }\n\n        /* --------------------------- 2020年5月18日 end 默认span模式 ------------------------------ */\n\n        /* --------------------------- 2020年5月28日 begin 新增校验未通过的样式 ------------------------------ */\n\n        .j-check-failed.j-td-span {\n          background-color: rgba(255, 0, 0, 0.05);\n\n          &:hover {\n            background-color: rgba(255, 0, 0, 0.1);\n          }\n        }\n\n        .j-check-failed.j-td-span,\n        input.j-check-failed,\n        .j-check-failed /deep/ input,\n        .ant-select.j-check-failed /deep/ .ant-select-selection,\n        .ant-upload.j-check-failed /deep/ .ant-btn {\n          border-color: red;\n          box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.2);\n        }\n\n        /* --------------------------- 2020年5月28日 end 新增校验未通过的样式 ------------------------------ */\n\n      }\n\n    }\n\n    .scroll-view {\n      overflow: auto;\n      overflow-y: scroll;\n    }\n\n    .thead, .thead .tr, .scroll-view {\n      @scrollBarSize: 6px;\n      /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\n\n      &::-webkit-scrollbar {\n        width: @scrollBarSize;\n        height: @scrollBarSize;\n        background-color: transparent;\n      }\n\n      /* 定义滚动条轨道 */\n\n      &::-webkit-scrollbar-track {\n        background-color: #f0f0f0;\n      }\n\n      /* 定义滑块 */\n\n      &::-webkit-scrollbar-thumb {\n        background-color: #eee;\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n\n        &:hover {\n          background-color: #bbb;\n        }\n\n        &:active {\n          background-color: #888;\n        }\n      }\n\n    }\n\n    .thead .tr {\n\n      &::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      /* IE模式下隐藏 */\n      -ms-overflow-style: none;\n      -ms-scroll-chaining: chained;\n      -ms-content-zooming: zoom;\n      -ms-scroll-rails: none;\n      -ms-content-zoom-limit-min: 100%;\n      -ms-content-zoom-limit-max: 500%;\n      -ms-scroll-snap-type: proximity;\n      -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n    }\n\n  }\n\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;AA2rBA,OAAAA,GAAA;AACA,OAAAC,SAAA;AACA,SAAAC,YAAA;AACA,SAAAC,SAAA,EAAAC,kBAAA;AACA,SAAAC,WAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA;AACA,OAAAC,KAAA;AACA,SAAAC,cAAA,EAAAC,eAAA;AACA,SAAAC,oBAAA;AACA,OAAAC,SAAA;AACA,OAAAC,QAAA;AACA,SAAAC,aAAA;;AAEA;AACA,IAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAT,KAAA,EAAAA,KAAA;IAAAR,SAAA,EAAAA,SAAA;IAAAY,SAAA,EAAAA,SAAA;IAAAC,QAAA,EAAAA;EAAA;EACAK,OAAA,WAAAA,QAAA;IAAA,IAAAC,KAAA;IACA;MACAC,sBAAA;MACAC,2BAAA,WAAAA,4BAAA;QAAA,OAAAF,KAAA,CAAAG,wBAAA;MAAA;IACA;EACA;EACAC,KAAA;IACA;IACAC,OAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;IACA;IACAC,UAAA;MACAH,IAAA,EAAAC,KAAA;MACAC,QAAA;MACAE,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACA;IACAC,YAAA;MACAN,IAAA,EAAAO,OAAA;MACAH,OAAA;IACA;IACA;IACAI,SAAA;MACAR,IAAA,EAAAO,OAAA;MACAH,OAAA;IACA;IACA;IACAK,YAAA;MACAT,IAAA,EAAAO,OAAA;MACAH,OAAA;IACA;IACA;IACAM,OAAA;MACAV,IAAA,EAAAO,OAAA;MACAH,OAAA;IACA;IACA;IACAO,SAAA;MACAX,IAAA,EAAAY,MAAA;MACAR,OAAA;IACA;IACA;IACAS,YAAA;MACAb,IAAA,EAAAc,MAAA;MACAV,OAAA,WAAAC,SAAA;QACA;MACA;IACA;IACA;IACAU,QAAA;MACAf,IAAA,EAAAO,OAAA;MACAH,OAAA;IACA;IACA;IACAY,QAAA;MACAhB,IAAA,EAAAO,OAAA;MACAH,OAAA;IACA;IACAa,WAAA;MACAjB,IAAA,EAAAkB,MAAA;MACAd,OAAA;IACA;IACA;IACAe,UAAA;MACAnB,IAAA,EAAAO,OAAA;MACAH,OAAA;IACA;IACAgB,OAAA;MACApB,IAAA,EAAAkB,MAAA;MACAhB,QAAA;MACAE,OAAA;IACA;EACA;EACAiB,IAAA,WAAAA,KAAA;IACA;MACA;MACAC,OAAA;MACA;MACAC,gBAAA;MACA;MACAC,MAAA,UAAAC,MAAA,CAAA3C,YAAA;MACA;MACA4C,MAAA,UAAAD,MAAA,CAAA3C,YAAA;MACA;MACA6C,EAAA;QACAC,UAAA;QACAC,KAAA;MACA;MACA;MACAC,KAAA;QACA;QACAD,KAAA;UAAAE,IAAA;QAAA;QACA;QACAC,MAAA;MACA;MACA;MACAC,SAAA,EAAAxD,SAAA;MACA;MACAyD,IAAA;MACA;MACA5C,SAAA,EAAAA,SAAA;MACA;MACA6C,SAAA;MACA;MACAC,YAAA;MACA;MACAC,cAAA;MACA;MACAC,WAAA;MACA;MACAC,eAAA;MACA;MACAC,UAAA;MACA;MACAC,YAAA;MACA;MACAC,WAAA;MACA;MACAC,gBAAA;MACA;MACAC,cAAA;MAEAC,WAAA;MACAC,kBAAA;MACAC,iBAAA;MACAC,kBAAA;MACAC,uBAAA;MACA;MACAC,cAAA;MACA;MACAC,SAAA;MACA;MACAC,QAAA;MACA;MACAC,YAAA;MAEA;MACAC,QAAA;MACA;MACAC,mBAAA;MACAC,iBAAA;MACA;MACA3D,wBAAA;MACA;MACA4D,eAAA;MACA;MACAC,eAAA,MAAAC,GAAA;MACAC,MAAA;MACA;MACAC,WAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IAAA,IAAAC,MAAA;IACA,KAAAC,WAAA;IACA;IACA,KAAAC,YAAA;IACA,KAAAC,cAAA,QAAAA,cAAA;IACA;IACAC,QAAA,CAAAC,IAAA,CAAAC,MAAA,aAAAC,KAAA;MACA,IAAAP,MAAA,CAAAT,QAAA;QACAgB,KAAA,CAAAC,cAAA;QACAD,KAAA,CAAAE,eAAA;MACA;IACA;EACA;EACA;EACAC,QAAA;IACA;IACAC,eAAA,WAAAA,gBAAA;MACA,IAAAC,MAAA,QAAAzC,IAAA,CAAAyC,MAAA,QAAArF,SAAA;MACA,SAAAsF,iBAAA;QACAD,MAAA;MACA;MACA,OAAAA,MAAA;IACA;IACA;IACAC,iBAAA,WAAAA,kBAAA;MACA,YAAArB,mBAAA,SAAArB,IAAA,CAAAyC,MAAA;IACA;IACA;IACAE,sBAAA,WAAAA,uBAAA;MACA,YAAA3B,cAAA,CAAAyB,MAAA,QACA,KAAAzB,cAAA,CAAAyB,MAAA,QAAAzC,IAAA,CAAAyC,MAAA;IACA;IACA;IACAG,YAAA,WAAAA,aAAA;MACA,YAAA5B,cAAA,CAAAyB,MAAA,UAAAzC,IAAA,CAAAyC,MAAA,SAAAzC,IAAA,CAAAyC,MAAA;IACA;IACAI,UAAA,WAAAA,WAAA;MACA,IAAAjD,KAAA,GAAAhB,MAAA,CAAAkE,MAAA,UAAAlD,KAAA,CAAAD,KAAA;MACA;MACAC,KAAA,iBAAAmD,WAAA;MACA,OAAAnD,KAAA;IACA;IACAoD,qBAAA,WAAAA,sBAAA;MACA,IAAAC,KAAA;MACA,SAAAC,GAAA,SAAAvE,YAAA;QACA,SAAAA,YAAA,CAAAwE,cAAA,CAAAD,GAAA,GAAAD,KAAA;MACA;MACA,OAAAA,KAAA;IACA;IACAG,WAAA,WAAAA,YAAA;MACA,OAAAhH,GAAA,CAAAiH,EAAA,CAAAC,GAAA,CAAAhH,YAAA;IACA;IACAyG,WAAA,WAAAA,YAAA;MACA,IAAAQ,MAAA;MACA,IAAAC,SAAA;MACA,KAAA3F,OAAA,CAAA4F,OAAA,WAAAC,MAAA,EAAAC,CAAA;QACA,IAAA7F,IAAA,GAAA4F,MAAA,CAAA5F,IAAA;UAAA8F,KAAA,GAAAF,MAAA,CAAAE,KAAA;QACA;QACA,IAAA9F,IAAA,KAAAvB,SAAA,CAAAsH,MAAA;UACA,WAAAD,KAAA;YACAJ,SAAA,IAAAI,KAAA;UACA,kBAAAA,KAAA;YACAJ,SAAA,IAAAI,KAAA;UACA;YACAJ,SAAA;UACA;UACAA,SAAA,IAAAD,MAAA;QACA;MACA;MACA,IAAAC,SAAA,CAAAM,QAAA,CAAAP,MAAA;QACAC,SAAA,GAAAA,SAAA,CAAAO,SAAA,IAAAP,SAAA,CAAAf,MAAA,GAAAc,MAAA,CAAAd,MAAA;MACA;MACAe,SAAA;MACA;MACA,OAAAA,SAAA;IACA;EACA;EACA;EACAQ,KAAA;IACAhE,IAAA;MACAiE,SAAA;MACAC,OAAA,WAAAA,QAAAC,GAAA,EAAAC,GAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MAAA;IAEA;IACAnG,UAAA;MACAgG,SAAA;MACAC,OAAA,WAAAA,QAAAG,QAAA;QAAA,IAAAC,MAAA;QACA;QACA,KAAAC,iBAAA,UAAAC,IAAA;UACAF,MAAA,CAAAG,UAAA;UACAH,MAAA,CAAAI,iBAAA,CAAAL,QAAA;QACA;MACA;IACA;IACAxG,OAAA;MACAoG,SAAA;MACAC,OAAA,WAAAA,QAAArG,OAAA;QAAA,IAAA8G,MAAA;QACA;QACA,KAAAC,eAAA;QACA;QACA,KAAAL,iBAAA,UAAAC,IAAA;UACA3G,OAAA,CAAA4F,OAAA,WAAAC,MAAA;YACA,IAAAA,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsI,MAAA,IAAAnB,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAuI,UAAA,IAAApB,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAwI,UAAA;cACA;cACA,IAAArB,MAAA,CAAAsB,OAAA,YAAAjH,KAAA;gBACA2F,MAAA,CAAAsB,OAAA,GAAAtB,MAAA,CAAAsB,OAAA,CAAAC,GAAA,WAAAC,IAAA;kBACA,IAAAA,IAAA;oBACA,OAAAC,aAAA,CAAAA,aAAA,KACAD,IAAA;sBACAE,IAAA,EAAAF,IAAA,CAAAE,IAAA,IAAAF,IAAA,CAAAG,KAAA;sBACAA,KAAA,EAAAH,IAAA,CAAAE,IAAA,IAAAF,IAAA,CAAAG;oBAAA;kBAEA;kBACA;gBACA;cACA;cACA,IAAA3B,MAAA,CAAA4B,QAAA;gBACAX,MAAA,CAAAY,wBAAA,CAAA7B,MAAA;cACA;YACA;UACA;QACA;MACA;IACA;IACA;IACA1C,cAAA,WAAAA,eAAAqD,QAAA;MAAA,IAAAmB,MAAA;MACA,KAAAC,KAAA,oBAAAhJ,WAAA,CAAA4H,QAAA,EAAAY,GAAA,WAAAtB,CAAA;QAAA,OAAA6B,MAAA,CAAAE,UAAA,CAAA/B,CAAA;MAAA;IACA;EACA;EACAgC,OAAA,WAAAA,QAAA;IACA,IAAAC,EAAA;IACA;IACA,KAAAC,UAAA,eAAAC,QAAA,aAAA1D,KAAA;MACAwD,EAAA,CAAAG,aAAA,CAAA3D,KAAA,CAAA4D,MAAA,CAAAC,UAAA;IACA;IACA,KAAAJ,UAAA,UAAAC,QAAA,aAAA1D,KAAA;MACA;IAAA,CACA;IAEA,IAAA8D,WAAA,QAAAC,KAAA;MAAAC,KAAA,GAAAF,WAAA,CAAAE,KAAA;MAAAC,UAAA,GAAAH,WAAA,CAAAG,UAAA;IACAA,UAAA,CAAAP,QAAA,aAAA1D,KAAA;MAEA;;MAEAgE,KAAA,CAAAH,UAAA,GAAA7D,KAAA,CAAA4D,MAAA,CAAAC,UAAA;MAEAL,EAAA,CAAAU,kBAAA,CAAAlE,KAAA,CAAA4D,MAAA,CAAA/F,SAAA;IAEA;;IAEA;IACA,KAAAsG,gBAAA;EAEA;EACAC,OAAA;IAEAX,UAAA,WAAAA,WAAAY,EAAA;MAAA,IAAAC,QAAA,GAAAC,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,UAAAlH,EAAA,CAAAgH,EAAA;QACA,KAAAhH,EAAA,CAAAgH,EAAA,IAAAxE,QAAA,CAAA4E,cAAA,EAAAH,QAAA,aAAApH,MAAA,IAAAmH,EAAA;MACA;MACA,YAAAhH,EAAA,CAAAgH,EAAA;IACA;IAEAlC,iBAAA,WAAAA,kBAAAkC,EAAA;MAAA,IAAAK,MAAA;MAAA,IAAAJ,QAAA,GAAAC,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,WAAAI,OAAA,WAAAC,OAAA;QACA,IAAAC,KAAA,GAAAC,WAAA;UACA,IAAAC,OAAA,GAAAL,MAAA,CAAAjB,UAAA,CAAAY,EAAA,EAAAC,QAAA;UACA,IAAAS,OAAA;YACAC,aAAA,CAAAH,KAAA;YACAD,OAAA,CAAAG,OAAA;UACA;QACA;MACA;IACA;IAEA,YACA1C,UAAA,WAAAA,WAAA;MACA,KAAA1C,YAAA;MACA;MACA,UAAA3C,OAAA;QACA,KAAAiI,QAAA;MACA;QACA,KAAAjI,OAAA;MACA;IACA;IACA,QACAiI,QAAA,WAAAA,SAAA;MAAA,IAAAC,MAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,KAAAxF,WAAA;MACA,KAAA9B,IAAA;MACA,KAAAiB,SAAA;MACA,KAAAD,cAAA;MACA,KAAAE,QAAA;MACA,KAAAC,YAAA;MACA;MACA,KAAAjB,YAAA;MACA,KAAAC,cAAA;MACA,KAAAC,WAAA;MACA,KAAAC,eAAA;MACA,KAAAI,gBAAA;MACA,KAAAC,cAAA;MACA,KAAAJ,UAAA;MACA;MACA,KAAAC,YAAA;MACA,KAAAC,WAAA;MACA,KAAAG,WAAA;MACA,KAAAE,iBAAA;MACA,KAAAC,kBAAA;MACA,KAAAC,uBAAA;MACA;;MAEA;MACA,KAAAd,SAAA;MACA,KAAAsH,SAAA;QACAD,MAAA,CAAAzB,UAAA,UAAA5F,SAAA;MACA;IACA;IACA,cACA8F,aAAA,WAAAA,cAAAE,UAAA;MACA;MACA;IAAA,CACA;IACA,8BACAuB,cAAA,WAAAA,eAAAC,GAAA;MACA,IAAApB,UAAA,QAAAF,KAAA,CAAAE,UAAA;MACA,IAAAoB,GAAA,mBAAAA,GAAA;QACApB,UAAA,CAAApG,SAAA,GAAAwH,GAAA;MACA;QACApB,UAAA,CAAApG,SAAA,QAAAA,SAAA;MACA;IACA;IACA,qBACAqG,kBAAA,WAAAA,mBAAAmB,GAAA;MAAA,IAAAC,MAAA;MACA,IAAAC,IAAA,GAAAF,GAAA,QAAAxH,SAAA;MACA,IAAA0H,IAAA;QACAA,IAAA,QAAA1H,SAAA,GAAAwH,GAAA;MACA;MACA;MACA,IAAAE,IAAA,SAAAvK,SAAA;QACA,KAAA6C,SAAA,GAAAwH,GAAA;QACA;QACA,KAAAF,SAAA;UACAG,MAAA,CAAAE,gBAAA;QACA;MACA;IACA;IACA,WACAC,UAAA,WAAAA,WAAA7H,IAAA;MACA,MAAAA,IAAA,YAAAjC,KAAA;QACAiC,IAAA,QAAAA,IAAA;MACA;MACA,IAAA8H,SAAA,OAAAC,IAAA,GAAAC,OAAA;MACA,UAAAzI,MAAA,MAAAD,MAAA,EAAAC,MAAA,CAAAuI,SAAA,EAAAvI,MAAA,CAAAS,IAAA,CAAAyC,MAAA,EAAAlD,MAAA,CAAA5C,YAAA,KAAA4C,MAAA,MAAAC,MAAA;IACA;IACA,gBACAyI,IAAA,WAAAA,KAAAC,MAAA;MAAA,IAAAC,MAAA,GAAAxB,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA3G,IAAA,GAAA2G,SAAA,CAAAlE,MAAA,OAAAkE,SAAA,MAAAC,SAAA;MAAA,IAAAwB,WAAA,GAAAzB,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA0B,eAAA,GAAA1B,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,YAAAjC,iBAAA,EAAAwD,MAAA,IAAAE,WAAA,GAAAD,MAAA,EAAAnI,IAAA,EAAAqI,eAAA;IACA;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA3D,iBAAA,WAAAA,kBAAAzG,UAAA;MAAA,IAAAqK,MAAA;MAAA,IAAAC,aAAA,GAAA5B,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAAwB,MAAA,GAAAxB,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA3G,IAAA,GAAA2G,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA0B,eAAA,GAAA1B,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,MAAA3G,IAAA,YAAAjC,KAAA;QACAiC,IAAA,GAAAwI,kBAAA,MAAAxI,IAAA;MACA;MACA,IAAAG,cAAA,GAAAgF,aAAA,UAAAhF,cAAA;MACA,IAAAD,YAAA,GAAAiF,aAAA,UAAAjF,YAAA;MACA,IAAAE,WAAA,GAAA+E,aAAA,UAAA/E,WAAA;MACA,IAAAK,gBAAA,GAAA0E,aAAA,UAAA1E,gBAAA;MACA,IAAAC,cAAA,GAAAyE,aAAA,UAAAzE,cAAA;MACA,IAAAL,eAAA,GAAA8E,aAAA,UAAA9E,eAAA;MACA,IAAAC,UAAA,GAAA6E,aAAA,UAAA7E,UAAA;MACA,IAAAC,YAAA,GAAA4E,aAAA,UAAA5E,YAAA;MACA,IAAAC,WAAA,GAAA2E,aAAA,UAAA3E,WAAA;MACA,IAAAG,WAAA,GAAAwE,aAAA,UAAAxE,WAAA;MACA,IAAAE,iBAAA,GAAAsE,aAAA,UAAAtE,iBAAA;MACA,IAAAC,kBAAA,GAAAqE,aAAA,UAAArE,kBAAA;MACA,IAAAC,uBAAA,GAAAoE,aAAA,UAAApE,uBAAA;MACA;MACA,IAAAiB,cAAA,QAAAA,cAAA;MACA/D,UAAA,CAAAwF,OAAA,WAAAtE,IAAA,EAAAsJ,aAAA;QACA;QACA,IAAAC,MAAA,GAAAvJ,IAAA,CAAAsH,EAAA;QACA;QACA,IAAAiC,MAAA,YAAAA,MAAA;UACAA,MAAA,GAAAJ,MAAA,CAAAT,UAAA,CAAA7H,IAAA;QACA,YAAAsI,MAAA,CAAAK,SAAA,CAAAD,MAAA;UACAA,MAAA,GAAAJ,MAAA,CAAAhJ,MAAA,GAAAoJ,MAAA;QACA;QACA,IAAAE,GAAA;UAAAnC,EAAA,EAAAiC;QAAA;QACA,IAAAG,KAAA;UAAApC,EAAA,EAAAiC;QAAA;QACA,IAAA7J,QAAA;QACAyJ,MAAA,CAAAzK,OAAA,CAAA4F,OAAA,WAAAC,MAAA;UACA,IAAAoF,OAAA,GAAApF,MAAA,CAAAR,GAAA,GAAA2F,KAAA,CAAApC,EAAA;UACA,IAAAsC,WAAA,IAAA5J,IAAA,CAAAuE,MAAA,CAAAR,GAAA,iBAAA/D,IAAA,CAAAuE,MAAA,CAAAR,GAAA,GAAA8F,QAAA;UAEA,IAAAC,YAAA;UACA,IAAAZ,eAAA;YACAY,YAAA,GAAAvF,MAAA,CAAAuF,YAAA,KAAAvF,MAAA,CAAAuF,YAAA;YACA,IAAAA,YAAA,YAAAlL,KAAA;cACAkL,YAAA,GAAAA,YAAA,CAAAC,IAAA;YACA;YAEAH,WAAA,UAAAA,WAAA,iBAAAA,WAAA,GAAAA,WAAA,GAAAE,YAAA;UACA;UACA,IAAAE,kBAAA,GAAAJ,WAAA,YAAAA,WAAA;UAEA,IAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA6M,WAAA;YACA;YACA,IAAA1F,MAAA,CAAA2F,OAAA;cACAR,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAoF,MAAA,CAAAgB,sBAAA,CAAA5F,MAAA;YACA;cACAmF,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAA6F,WAAA;YACA;YACA;YACA,IAAArF,MAAA,CAAA6F,UAAA;cACAjB,MAAA,CAAAjH,mBAAA;cACA,KAAAiH,MAAA,CAAAhH,iBAAA,CAAAoC,MAAA,CAAAR,GAAA;gBACAoF,MAAA,CAAAkB,IAAA,CAAAlB,MAAA,CAAAhH,iBAAA,EAAAoC,MAAA,CAAAR,GAAA;cACA;YACA;UAEA,WAAAQ,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAkN,QAAA;YACA;YACA,IAAA/F,MAAA,CAAAgG,WAAA,YAAA3L,KAAA;cACA,IAAA2L,WAAA,IAAAhG,MAAA,CAAAgG,WAAA,WAAAV,QAAA;cACA,IAAAG,kBAAA,IAAAd,eAAA;gBACAU,WAAA,GAAArF,MAAA,CAAAiG,cAAA,GAAAD,WAAA,GAAAX,WAAA;cACA;cACA5I,cAAA,CAAA2I,OAAA,IAAAC,WAAA,KAAAW,WAAA;YACA;cACA,IAAAP,kBAAA,IAAAd,eAAA;gBACAlI,cAAA,CAAA2I,OAAA,MAAApF,MAAA,CAAAiG,cAAA;cACA;gBACAxJ,cAAA,CAAA2I,OAAA,IAAAC,WAAA;cACA;YACA;UAEA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsI,MAAA;YACA,KAAAsE,kBAAA;cACA;cACA,WAAAJ,WAAA,kBAAArF,MAAA,CAAA9F,KAAA;gBACAmL,WAAA,GAAAA,WAAA,eAAAA,WAAA,CAAAa,KAAA;cACA;cACA1J,YAAA,CAAA4I,OAAA,IAAAC,WAAA;YACA;cACA7I,YAAA,CAAA4I,OAAA,IAAAlC,SAAA;YACA;UAEA,WAAAlD,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsN,IAAA,IAAAnG,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAuN,QAAA;YACA1J,WAAA,CAAA0I,OAAA,IAAAC,WAAA;UAEA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAwN,IAAA;YACAzJ,UAAA,CAAAwI,OAAA,IAAAC,WAAA;UAEA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAyN,KAAA;YACAxJ,WAAA,CAAAsI,OAAA,IAAAC,WAAA;UACA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA0N,UAAA;YACAxJ,gBAAA,CAAAqI,OAAA,IAAAC,WAAA;UACA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA2N,QAAA;YACAxJ,cAAA,CAAAoI,OAAA,IAAAC,WAAA;UACA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA4N,SAAA;YACA9J,eAAA,CAAAyI,OAAA,IAAAC,WAAA;UACA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA6N,KAAA;YACAzJ,WAAA,CAAAmI,OAAA,IAAAC,WAAA;UACA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAwI,UAAA;YACAjE,kBAAA,CAAAgI,OAAA,IAAAC,WAAA;UACA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA8N,gBAAA;YACAtJ,uBAAA,CAAA+H,OAAA,IAAAC,WAAA;UACA,WAAArF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAuI,UAAA;YACA,WAAAiE,WAAA,iBAAAA,WAAA,CAAAtG,MAAA;cACA5B,iBAAA,CAAAiI,OAAA,IAAAC,WAAA,CAAAa,KAAA;YACA;cACA/I,iBAAA,CAAAiI,OAAA;YACA;UACA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA+N,MAAA,IAAA5G,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAgO,IAAA,IAAA7G,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAiO,KAAA;YACA,IAAAzB,WAAA;cACA,IAAA0B,QAAA;cACA,IAAA1B,WAAA,CAAA2B,OAAA;gBACA,IAAAC,YAAA,GAAA5B,WAAA,CAAAa,KAAA;gBACAa,QAAA,GAAAE,YAAA,CAAA5G,SAAA,CAAA4G,YAAA,CAAAC,WAAA;cACA;gBACAH,QAAA,GAAA1B,WAAA,CAAAhF,SAAA,CAAAgF,WAAA,CAAA6B,WAAA;cACA;cACArK,YAAA,CAAAuI,OAAA;gBACAzL,IAAA,EAAAoN,QAAA;gBACAI,MAAA;gBACAC,IAAA,EAAA/B;cACA;YACA;cACAxI,YAAA,CAAAuI,OAAA;YACA;UACA;YACAD,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAA6F,WAAA;UACA;;UAEA;UACA,SAAAgC,SAAA,IAAAzC,MAAA,CAAA3J,YAAA;YACA;YACA,IAAA2J,MAAA,CAAA3J,YAAA,CAAAwE,cAAA,CAAA4H,SAAA,KAAA5L,IAAA,CAAAgE,cAAA,CAAA4H,SAAA;cACA,IAAAlM,QAAA;gBACA,IAAAmM,IAAA,GAAA1C,MAAA,CAAA3J,YAAA,CAAAoM,SAAA;gBACA;gBACA,IAAAC,IAAA,YAAAjN,KAAA;kBACAc,QAAA,GAAAmM,IAAA,CAAAC,QAAA,CAAA9L,IAAA,CAAA4L,SAAA;gBACA;kBACAlM,QAAA,GAAAmM,IAAA,KAAA7L,IAAA,CAAA4L,SAAA;gBACA;gBACA,IAAAlM,QAAA;kBACAmD,cAAA,CAAAiG,IAAA,CAAAW,GAAA,CAAAnC,EAAA;gBACA;cACA;YACA;UACA;QACA;QACA;QACA,IAAAyE,KAAA;QACA,IAAA3C,aAAA,YAAAxK,KAAA;UACA,IAAAqK,WAAA,GAAAG,aAAA,CAAAE,aAAA;UACA,WAAAL,WAAA;YACA8C,KAAA;YACAlL,IAAA,CAAAuD,MAAA,CAAA6E,WAAA,KAAAQ,GAAA;YACAN,MAAA,CAAAxG,WAAA,CAAAyB,MAAA,CAAA6E,WAAA,KAAAS,KAAA;UACA;QACA;QACA;QACA,WAAA7I,IAAA,CAAAmL,SAAA,WAAAjG,IAAA;UAAA,OAAAA,IAAA,CAAAuB,EAAA,KAAAmC,GAAA,CAAAnC,EAAA;QAAA;UACAyE,KAAA;UACA5C,MAAA,CAAAxG,WAAA,GAAAwG,MAAA,CAAAxG,WAAA,CAAAmD,GAAA,WAAAC,IAAA;YAAA,OAAAA,IAAA,CAAAuB,EAAA,KAAAmC,GAAA,CAAAnC,EAAA,GAAAoC,KAAA,GAAA3D,IAAA;UAAA;QACA;QACA;QACA,KAAAgG,KAAA;UACAlL,IAAA,CAAAiI,IAAA,CAAAW,GAAA;UACAN,MAAA,CAAAxG,WAAA,CAAAmG,IAAA,CAAAY,KAAA;QACA;MACA;MACA;MACA,SAAA/J,QAAA;QACA,KAAAgD,WAAA,CAAA2B,OAAA,WAAAyB,IAAA,EAAAkG,KAAA;UACAlG,IAAA,CAAAoD,MAAA,CAAAvJ,WAAA,IAAAqM,KAAA;QACA;MACA;MACA,KAAApJ,cAAA,GAAAA,cAAA;MACA,KAAA7B,cAAA,GAAAA,cAAA;MACA,KAAAD,YAAA,GAAAA,YAAA;MACA,KAAAE,WAAA,GAAAA,WAAA;MACA,KAAAK,gBAAA,GAAAA,gBAAA;MACA,KAAAC,cAAA,GAAAA,cAAA;MACA,KAAAL,eAAA,GAAAA,eAAA;MACA,KAAAC,UAAA,GAAAA,UAAA;MACA,KAAAC,YAAA,GAAAA,YAAA;MACA,KAAAC,WAAA,GAAAA,WAAA;MACA,KAAAG,WAAA,GAAAA,WAAA;MACA,KAAAE,iBAAA,GAAAA,iBAAA;MACA,KAAAC,kBAAA,GAAAA,kBAAA;MACA,KAAAC,uBAAA,GAAAA,uBAAA;MACA;MACA,KAAAsK,0BAAA;MACA;MACA,IAAAlD,MAAA;QACA,KAAAnI,IAAA,GAAAA,IAAA;;QAEA;QACA,KAAAuH,SAAA;UACAe,MAAA,CAAAgD,qBAAA;QACA;MACA;MACA,OAAAtL,IAAA;IACA;IAEA,uBACAsJ,sBAAA,WAAAA,uBAAA5F,MAAA;MACA,IAAA6H,MAAA;MACA,KAAAzJ,WAAA,CAAA2B,OAAA,WAAAyB,IAAA,EAAAkG,KAAA;QACA,IAAAjH,GAAA,GAAAe,IAAA,CAAAxB,MAAA,CAAAR,GAAA;UAAAsI,GAAA;QACA;UACAA,GAAA,GAAAC,QAAA,CAAAtH,GAAA;QACA,SAAAuH,OAAA;UACAF,GAAA;QACA;QACA;QACA,IAAAJ,KAAA;UACAG,MAAA,GAAAC,GAAA;QACA;UACAD,MAAA,GAAAC,GAAA,GAAAD,MAAA,GAAAC,GAAA,GAAAD,MAAA;QACA;MACA;MACA,OAAAA,MAAA;IACA;IACA,WACAI,GAAA,WAAAA,IAAA;MAAA,IAAAC,OAAA;MAAA,IAAAJ,GAAA,GAAA7E,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAAkF,mBAAA,GAAAlF,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,IAAA6E,GAAA;MACA;MACA,IAAAxL,IAAA,QAAAA,IAAA;MACA,IAAA4I,GAAA;MACA,SAAAjF,CAAA,MAAAA,CAAA,GAAA6H,GAAA,EAAA7H,CAAA;QACA3D,IAAA,QAAAiI,IAAA,YAAAjI,IAAA;QACA4I,GAAA,GAAA5I,IAAA,CAAAA,IAAA,CAAAyC,MAAA;MACA;MACA,KAAAzC,IAAA,GAAAA,IAAA;MAEA,KAAAuH,SAAA;QACAqE,OAAA,CAAAhE,gBAAA;MACA;MACA;MACA,KAAAnC,KAAA;QACAmD,GAAA;UACA,IAAAkD,CAAA,GAAAlN,MAAA,CAAAkE,MAAA,KAAA8F,GAAA;UACAkD,CAAA,CAAArF,EAAA,GAAAmF,OAAA,CAAAlG,UAAA,CAAAoG,CAAA,CAAArF,EAAA;UACA,OAAAqF,CAAA;QACA;QACA9F,MAAA;MACA;MACA;MACA,IAAArG,KAAA,QAAAkG,UAAA;MACA,IAAAkG,YAAA,GAAApM,KAAA,CAAAoM,YAAA;MACA,IAAAC,aAAA,GAAArM,KAAA,CAAAM,SAAA,GAAA8L,YAAA;MACA,IAAAF,mBAAA;QACA;QACA,MAAAlM,KAAA,CAAAsM,YAAA,GAAAD,aAAA;UACA;QACA;MACA;MACA,KAAAzE,SAAA;QACA5H,KAAA,CAAAM,SAAA,GAAAN,KAAA,CAAAsM,YAAA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;IACAC,MAAA,WAAAA,OAAA9D,WAAA;MAAA,IAAA+D,OAAA;MAAA,IAAAX,GAAA,GAAA7E,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,SAAAyF,iBAAA;QACA;MACA;MACA,KAAAhE,WAAA,IAAAoD,GAAA;MACA,IAAAxL,IAAA,QAAAA,IAAA;MACA,IAAAqM,OAAA;MACA,SAAA1I,CAAA,MAAAA,CAAA,GAAA6H,GAAA,EAAA7H,CAAA;QACA,IAAAiF,GAAA;UAAAnC,EAAA,OAAAoB,UAAA,CAAA7H,IAAA;QAAA;QACAA,IAAA,QAAAiI,IAAA,CAAAW,GAAA,SAAA5I,IAAA,EAAAoI,WAAA;QACAiE,OAAA,CAAApE,IAAA,CAAAW,GAAA;MACA;MACA;MACA,KAAA5I,IAAA,GAAAA,IAAA;MACA,KAAAuH,SAAA;QACA4E,OAAA,CAAAG,gBAAA;QACAH,OAAA,CAAAb,qBAAA;MACA;MACA;MACA,KAAA7F,KAAA;QACAzF,IAAA,EAAAqM,OAAA,CAAApH,GAAA,WAAA2D,GAAA;UACA,IAAAkD,CAAA,GAAArP,WAAA,CAAAmM,GAAA;UACAkD,CAAA,CAAArF,EAAA,GAAA0F,OAAA,CAAAzG,UAAA,CAAAoG,CAAA,CAAArF,EAAA;UACA,OAAAqF,CAAA;QACA;QACAN,GAAA,EAAAA,GAAA;QAAApD,WAAA,EAAAA,WAAA;QACApC,MAAA;MACA;IACA;IACA,cACAuG,kBAAA,WAAAA,mBAAA;MACA,KAAAC,UAAA,MAAAxL,cAAA;MACA,KAAAA,cAAA;IACA;IACA,cACAwL,UAAA,WAAAA,WAAA/F,EAAA;MAAA,IAAAgG,OAAA;MACA,IAAAC,GAAA,GAAAjG,EAAA;MACA,MAAAA,EAAA,YAAA1I,KAAA;QACA,WAAA0I,EAAA;UACAiG,GAAA,IAAAjG,EAAA;QACA;UACA,wKAAAlH,MAAA,CAAAoN,OAAA,CAAAlG,EAAA;QACA;MACA;MAEA,IAAAzG,IAAA,GAAAvD,WAAA,MAAAuD,IAAA;MACA0M,GAAA,CAAAjJ,OAAA,WAAAmJ,QAAA;QACAA,QAAA,GAAAH,OAAA,CAAA/G,UAAA,CAAAkH,QAAA;QACA;QACA,IAAAC,aAAA,YAAAA,cAAAC,GAAA;UACA,SAAAnJ,CAAA,MAAAA,CAAA,GAAAmJ,GAAA,CAAArK,MAAA,EAAAkB,CAAA;YACA,IAAAoJ,SAAA,GAAAN,OAAA,CAAA/G,UAAA,CAAAoH,GAAA,CAAAnJ,CAAA,EAAA8C,EAAA;YACA,IAAAsG,SAAA,KAAAH,QAAA;cACAE,GAAA,CAAAvJ,MAAA,CAAAI,CAAA;cACA;YACA;UACA;QACA;QACA;QACA,IAAAkJ,aAAA,CAAA7M,IAAA;UACA;UACA6M,aAAA,CAAAJ,OAAA,CAAA3K,WAAA;UACA;UACA,IAAA2E,GAAA,GAAAgG,OAAA,CAAA/G,UAAA,CAAAkH,QAAA;UACAH,OAAA,CAAAxL,SAAA,CAAAgH,IAAA,CAAAxB,GAAA;QACA;MACA;MACA,KAAAzG,IAAA,GAAAA,IAAA;MACA,KAAAyF,KAAA,iBAAAuH,YAAA;MACA,KAAAzF,SAAA;QACA;QACAkF,OAAA,CAAA7E,gBAAA;QACA;QACA6E,OAAA,CAAApB,0BAAA;MACA;MACA;IACA;IAEA,qBACA4B,cAAA,WAAAA,eAAA;MAAA,IAAAC,OAAA;MAAA,IAAAlI,OAAA,GAAA2B,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAAwG,QAAA,GAAAxG,SAAA,CAAAlE,MAAA,OAAAkE,SAAA,MAAAC,SAAA;MACA,IAAAwG,QAAA,GAAApI,OAAA,CAAAoI,QAAA;QAAAC,MAAA,GAAArI,OAAA,CAAAqI,MAAA;QAAAC,YAAA,GAAAtI,OAAA,CAAAsI,YAAA;MACA,WAAAF,QAAA,gBAAAA,QAAA;MACA,MAAAC,MAAA,YAAAtP,KAAA,GAAAsP,MAAA;MACA;MACA,WAAAC,YAAA,gBAAAA,YAAA;MACA;;MAEA,IAAAC,UAAA;MACA,IAAAC,KAAA;MACA,IAAA1L,WAAA,GAAArF,WAAA,MAAAqF,WAAA;MACA,IAAAZ,QAAA,GAAAtC,MAAA,CAAAkE,MAAA,UAAA5B,QAAA;MACA,IAAAC,YAAA,GAAA1E,WAAA,MAAA0E,YAAA;MACA;MACA,IAAAsM,MAAA;MACA;MAAA,IAAAC,SAAA,GAAAC,0BAAA,CACA7L,WAAA;QAAA8L,KAAA;MAAA;QAAA,IAAAC,KAAA,YAAAA,MAAA;UAAA,IAAAhF,KAAA,GAAA+E,KAAA,CAAA/E,KAAA;UACA,IAAAiF,UAAA;UACA;UACA,IAAAT,MAAA;YACAS,UAAA;UACA;YAAA,IAAAC,UAAA,GAAAJ,0BAAA,CACAN,MAAA;cAAAW,MAAA;YAAA;cAAA,KAAAD,UAAA,CAAAE,CAAA,MAAAD,MAAA,GAAAD,UAAA,CAAAG,CAAA,IAAAC,IAAA;gBAAA,IAAAC,KAAA,GAAAJ,MAAA,CAAAnF,KAAA;gBACA,IAAAqE,OAAA,CAAAxH,UAAA,CAAA0I,KAAA,MAAAlB,OAAA,CAAAxH,UAAA,CAAAmD,KAAA,CAAApC,EAAA;kBACAqH,UAAA;kBACA;gBACA;cACA;YAAA,SAAAO,GAAA;cAAAN,UAAA,CAAAO,CAAA,CAAAD,GAAA;YAAA;cAAAN,UAAA,CAAAQ,CAAA;YAAA;UACA;UAEA,KAAAT,UAAA;UAEAZ,OAAA,CAAArP,OAAA,CAAA4F,OAAA,WAAAC,MAAA;YACA,IAAAoF,OAAA,GAAApF,MAAA,CAAAR,GAAA,GAAA2F,KAAA,CAAApC,EAAA;YACA,IAAA/C,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAkN,QAAA;cACA,IAAA+E,OAAA,GAAAtB,OAAA,CAAA/M,cAAA,CAAA2I,OAAA;cACA,IAAApF,MAAA,CAAAgG,WAAA,YAAA3L,KAAA;gBACA8K,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAsL,OAAA,GAAA9K,MAAA,CAAAgG,WAAA,MAAAhG,MAAA,CAAAgG,WAAA;cACA;gBACAb,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAsL,OAAA;cACA;YAEA,WAAA9K,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsI,MAAA;cACA,IAAA4J,QAAA,GAAAvB,OAAA,CAAAhN,YAAA,CAAA4I,OAAA;cACA,IAAA2F,QAAA,YAAA1Q,KAAA;gBACA8K,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAzG,WAAA,CAAAgS,QAAA;cACA;gBACA5F,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAuL,QAAA;cACA;YAEA,WAAA/K,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsN,IAAA,IAAAnG,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAuN,QAAA;cACAjB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAA9M,WAAA,CAAA0I,OAAA;YAEA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA0N,UAAA;cACApB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAAzM,gBAAA,CAAAqI,OAAA;YAEA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA2N,QAAA;cACArB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAAxM,cAAA,CAAAoI,OAAA;YAEA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA4N,SAAA;cACAtB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAA7M,eAAA,CAAAyI,OAAA;YAEA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA+N,MAAA;cACAzB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAzG,WAAA,CAAAyQ,OAAA,CAAA3M,YAAA,CAAAuI,OAAA;YAEA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAiO,KAAA,IAAA9G,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAgO,IAAA;cACA,IAAAmE,aAAA,GAAAjS,WAAA,CAAAyQ,OAAA,CAAA3M,YAAA,CAAAuI,OAAA;cACA,IAAA4F,aAAA;gBACA7F,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAwL,aAAA;cACA;YAEA,WAAAhL,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAyN,KAAA;cACA,KAAAnB,KAAA,CAAAnF,MAAA,CAAAR,GAAA;gBACA2F,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAA1M,WAAA,CAAAsI,OAAA;cACA;YACA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA6N,KAAA;cACAvB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAAvM,WAAA,CAAAmI,OAAA;YACA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAwI,UAAA;cACA8D,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAApM,kBAAA,CAAAgI,OAAA;YACA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA8N,gBAAA;cACAxB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAAnM,uBAAA,CAAA+H,OAAA;YACA,WAAApF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAuI,UAAA;cACA,KAAAoI,OAAA,CAAArM,iBAAA,CAAAiI,OAAA,KAAAoE,OAAA,CAAArM,iBAAA,CAAAiI,OAAA,EAAArG,MAAA;gBACAoG,KAAA,CAAAnF,MAAA,CAAAR,GAAA;cACA;gBACA2F,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAArM,iBAAA,CAAAiI,OAAA,EAAAI,IAAA;cACA;YACA,WAAAxF,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAwN,IAAA;cACAlB,KAAA,CAAAnF,MAAA,CAAAR,GAAA,IAAAgK,OAAA,CAAA5M,UAAA,CAAAwI,OAAA;YACA;;YAGA;YACA,IAAAsE,QAAA;cACA,IAAAuB,sBAAA,YAAAA,uBAAAC,OAAA;gBACA1N,QAAA,CAAA4H,OAAA,IAAA8F,OAAA;gBACA,IAAA1N,QAAA,CAAA4H,OAAA,EAAA+F,MAAA;kBACArB,KAAA;kBACA;kBACA;kBACA;kBACA;kBACA;kBACA;kBACA;gBACA;gBACAtM,QAAA,CAAA4H,OAAA,EAAAgG,OAAA;gBACA3N,YAAA,GAAAyN,OAAA;cACA;cACArB,UAAA;cACA,IAAAqB,OAAA,GAAA1B,OAAA,CAAA6B,qBAAA,CAAAlG,KAAA,CAAAnF,MAAA,CAAAR,GAAA,GAAA2F,KAAA,EAAAnF,MAAA,EAAAvC,YAAA,gCAAAyN,OAAA;gBACAD,sBAAA,CAAAC,OAAA;gBACArB,UAAA;cACA;cACAoB,sBAAA,CAAAC,OAAA;YACA;UACA;UACA;UACA,IAAAtB,YAAA,IAAAJ,OAAA,CAAA8B,QAAA,CAAAnG,KAAA,CAAApC,EAAA;YACA,OAAAoC,KAAA,CAAApC,EAAA;UACA;YACAoC,KAAA,CAAApC,EAAA,GAAAyG,OAAA,CAAAxH,UAAA,CAAAmD,KAAA,CAAApC,EAAA;UACA;UAEAgH,MAAA,CAAAxF,IAAA,CAAAY,KAAA;QACA;QA7GA,KAAA6E,SAAA,CAAAO,CAAA,MAAAL,KAAA,GAAAF,SAAA,CAAAQ,CAAA,IAAAC,IAAA;UAAA,IAAAN,KAAA,IAcA;QAAA;MA+FA,SAAAQ,GAAA;QAAAX,SAAA,CAAAY,CAAA,CAAAD,GAAA;MAAA;QAAAX,SAAA,CAAAa,CAAA;MAAA;MAEA,IAAAnB,QAAA;QACA,KAAAlM,QAAA,GAAAA,QAAA;QACA,KAAAC,YAAA,GAAAA,YAAA;MACA;MAEA,IAAA8F,KAAA,GAAAC,WAAA;QACA,IAAAqG,UAAA;UACAnG,aAAA,CAAAH,KAAA;UACA,WAAAkG,QAAA;YACAA,QAAA;cAAAK,KAAA,EAAAA,KAAA;cAAAC,MAAA,EAAAA;YAAA;UACA;QACA;MACA;MAEA;QAAAD,KAAA,EAAAA,KAAA;QAAAC,MAAA,EAAAA;MAAA;IACA;IAEA,qBACAwB,aAAA,WAAAA,cAAA;MAAA,IAAAjK,OAAA,GAAA2B,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,YAAAsG,cAAA,CAAAjI,OAAA;IACA;IAEA,gBACAkK,SAAA,WAAAA,UAAA/B,QAAA;MAAA,IAAAC,QAAA,GAAAzG,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA0G,MAAA,GAAA1G,SAAA,CAAAlE,MAAA,OAAAkE,SAAA,MAAAC,SAAA;MACA,KAAAqG,cAAA;QAAAG,QAAA,EAAAA,QAAA;QAAAC,MAAA,EAAAA;MAAA,aAAA8B,IAAA;QAAA,IAAA3B,KAAA,GAAA2B,IAAA,CAAA3B,KAAA;UAAAC,MAAA,GAAA0B,IAAA,CAAA1B,MAAA;QACA,WAAAN,QAAA;UACAA,QAAA,CAAAK,KAAA,EAAAC,MAAA;QACA;MACA;IACA;IACA,yBACA2B,gBAAA,WAAAA,iBAAA;MAAA,IAAAC,OAAA;MAAA,IAAAjC,QAAA,GAAAzG,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA0G,MAAA,GAAA1G,SAAA,CAAAlE,MAAA,OAAAkE,SAAA,MAAAC,SAAA;MAAA,IAAA0G,YAAA,GAAA3G,SAAA,CAAAlE,MAAA,OAAAkE,SAAA,MAAAC,SAAA;MACA,WAAAG,OAAA,WAAAC,OAAA,EAAAsI,MAAA;QACAD,OAAA,CAAApC,cAAA;UAAAG,QAAA,EAAAA,QAAA;UAAAC,MAAA,EAAAA,MAAA;UAAAC,YAAA,EAAAA;QAAA,aAAAiC,KAAA;UAAA,IAAA/B,KAAA,GAAA+B,KAAA,CAAA/B,KAAA;YAAAC,MAAA,GAAA8B,KAAA,CAAA9B,MAAA;UACA,IAAAD,KAAA;YACAxG,OAAA,CAAAyG,MAAA;UACA;YACA6B,MAAA,CAAA9S,kBAAA;UACA;QACA;MACA;IACA;IACA,gBACAwQ,YAAA,WAAAA,aAAA;MACA,OAAAvQ,WAAA,MAAAwE,SAAA;IACA;IACA,iCACAuO,MAAA,WAAAA,OAAApC,QAAA,EAAAE,YAAA;MAAA,IAAAmC,OAAA;MACA,WAAA1I,OAAA,WAAAC,OAAA,EAAAsI,MAAA;QACA,IAAArO,SAAA,GAAAwO,OAAA,CAAAzC,YAAA;QACAyC,OAAA,CAAAL,gBAAA,CAAAhC,QAAA,QAAAE,YAAA,EAAA9I,IAAA,WAAAiJ,MAAA;UACAzG,OAAA;YAAAyG,MAAA,EAAAA,MAAA;YAAAxM,SAAA,EAAAA;UAAA;QACA,GAAAyO,KAAA,WAAAlC,KAAA;UACA8B,MAAA,CAAA9B,KAAA;QACA;MACA;IACA;IACA,sCACAmC,UAAA,WAAAA,WAAAvC,QAAA,EAAAC,MAAA,EAAAC,YAAA;MACA,IAAAsC,MAAA,QAAAX,aAAA;QAAA7B,QAAA,EAAAA,QAAA;QAAAC,MAAA,EAAAA,MAAA;QAAAC,YAAA,EAAAA;MAAA;MACAsC,MAAA,CAAA3O,SAAA,QAAA+L,YAAA;MACA,OAAA4C,MAAA;IACA;IACA;IACAC,gBAAA,WAAAA,iBAAAzB,KAAA;MACA,YAAAa,aAAA;QAAA5B,MAAA,GAAAe,KAAA;MAAA,GAAAX,MAAA;IACA;IACAqC,oBAAA,WAAAA,qBAAA;MACA,OAAArT,WAAA;QACAqF,WAAA,OAAAA,WAAA;QACA5B,YAAA,OAAAA,YAAA;QACAC,cAAA,OAAAA,cAAA;QACAC,WAAA,OAAAA,WAAA;QACAK,gBAAA,OAAAA,gBAAA;QACAC,cAAA,OAAAA,cAAA;QACAL,eAAA,OAAAA,eAAA;QACAC,UAAA,OAAAA,UAAA;QACAC,YAAA,OAAAA,YAAA;QACAC,WAAA,OAAAA,WAAA;QACAG,WAAA,OAAAA,WAAA;QACAE,iBAAA,OAAAA,iBAAA;QACAC,kBAAA,OAAAA,kBAAA;QACAC,uBAAA,OAAAA;MACA;IACA;IACA,eACAgP,SAAA,WAAAA,UAAAtC,MAAA;MAAA,IAAAuC,OAAA;MAEAvC,MAAA,CAAAhK,OAAA,WAAAyB,IAAA;QACA,IAAA+K,MAAA,GAAA/K,IAAA,CAAA+K,MAAA;UAAAC,SAAA,GAAAhL,IAAA,CAAAuI,MAAA;QACAwC,MAAA,GAAAD,OAAA,CAAAtK,UAAA,CAAAuK,MAAA;QAAA,IAAAE,MAAA,YAAAA,OAAAC,WAAA,EACA;UACA,IAAAF,SAAA,CAAA/M,cAAA,CAAAiN,WAAA;YACA,IAAAC,MAAA;YAAA,IAAAC,UAAA,GAAA3C,0BAAA,CACAqC,OAAA,CAAAnS,OAAA;cAAA0S,MAAA;YAAA;cAAA,IAAAC,MAAA,YAAAA,OAAA;gBAAA,IAAA9M,MAAA,GAAA6M,MAAA,CAAA1H,KAAA;gBACA,IAAAnF,MAAA,CAAAR,GAAA,KAAAkN,WAAA;kBACA,IAAA/L,QAAA,GAAA6L,SAAA,CAAAE,WAAA;kBACAJ,OAAA,CAAAlO,WAAA,CAAA2B,OAAA,WAAAoF,KAAA;oBACA;oBACA,IAAAoH,MAAA,KAAAD,OAAA,CAAAtK,UAAA,CAAAmD,KAAA,CAAApC,EAAA;sBACA,IAAAoC,KAAA,CAAA1F,cAAA,CAAAiN,WAAA;wBACAC,MAAA;wBACAxH,KAAA,CAAAuH,WAAA,IAAA/L,QAAA;sBACA;oBACA;kBACA;kBACA,KAAAgM,MAAA;oBACA,IAAAI,QAAA,MAAAlR,MAAA,CAAA6Q,WAAA,EAAA7Q,MAAA,CAAAyQ,OAAA,CAAA1Q,MAAA,EAAAC,MAAA,CAAA0Q,MAAA;oBACA,IAAAvM,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsI,MAAA;sBACA,IAAAR,QAAA,WAAAA,QAAA;wBACAgM,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAA9P,YAAA,EAAAuQ,QAAA,EAAA7J,SAAA;sBACA;wBACAyJ,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAA9P,YAAA,EAAAuQ,QAAA,EAAApM,QAAA;sBACA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAkN,QAAA;sBACA;sBACA,IAAAvG,GAAA,GAAA8M,OAAA,CAAAW,oBAAA,CAAAX,OAAA,CAAA7P,cAAA,EAAAsQ,QAAA;sBACA;sBACA,IAAA1H,WAAA;sBACA;sBACA,IAAArF,MAAA,CAAAgG,WAAA,YAAA3L,KAAA;wBACA,IAAA2L,WAAA,IAAAhG,MAAA,CAAAgG,WAAA,WAAAV,QAAA;wBACAD,WAAA,GAAA1E,QAAA,KAAAqF,WAAA;sBACA;wBACAX,WAAA,KAAA1E,QAAA;sBACA;sBACA2L,OAAA,CAAAxG,IAAA,CAAAwG,OAAA,CAAA7P,cAAA,EAAA+C,GAAA,EAAA6F,WAAA;sBACAsH,MAAA;oBACA,WAAA3M,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsN,IAAA,IAAAnG,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAuN,QAAA;sBACAuG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAA5P,WAAA,EAAAqQ,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA0N,UAAA;sBACAoG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAAvP,gBAAA,EAAAgQ,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA2N,QAAA;sBACAmG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAAtP,cAAA,EAAA+P,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA4N,SAAA;sBACAkG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAA3P,eAAA,EAAAoQ,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAwN,IAAA;sBACAsG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAA1P,UAAA,EAAAmQ,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA+N,MAAA,IAAA5G,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAiO,KAAA,IAAA9G,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAgO,IAAA;sBACA8F,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAAzP,YAAA,EAAAkQ,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAyN,KAAA;sBACAqG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAAxP,WAAA,EAAAiQ,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA6N,KAAA;sBACAiG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAArP,WAAA,EAAA8P,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAuI,UAAA;sBACAuL,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAAnP,iBAAA,EAAA4P,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAwI,UAAA;sBACAsL,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAAlP,kBAAA,EAAA2P,QAAA,EAAApM,QAAA;oBACA,WAAAX,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAA8N,gBAAA;sBACAgG,MAAA,GAAAL,OAAA,CAAAU,WAAA,CAAAV,OAAA,CAAAjP,uBAAA,EAAA0P,QAAA,EAAApM,QAAA;oBACA;sBACAgM,MAAA;oBACA;kBACA;kBACA,IAAAA,MAAA;oBACAL,OAAA,CAAAY,eAAA,CAAAlN,MAAA,CAAA5F,IAAA,EAAA+S,eAAA,KAAAT,WAAA,EAAA/L,QAAA,GAAAX,MAAA,EAAAW,QAAA;kBACA;gBACA;cACA;cAhEA,KAAAiM,UAAA,CAAArC,CAAA,MAAAsC,MAAA,GAAAD,UAAA,CAAApC,CAAA,IAAAC,IAAA;gBAAAqC,MAAA;cAAA;YAgEA,SAAAnC,GAAA;cAAAiC,UAAA,CAAAhC,CAAA,CAAAD,GAAA;YAAA;cAAAiC,UAAA,CAAA/B,CAAA;YAAA;YACA,KAAA8B,MAAA;cACAS,OAAA,CAAAC,IAAA,4DAAAxR,MAAA,CAAA6Q,WAAA;YACA;UACA;QACA;QAxEA,SAAAA,WAAA,IAAAF,SAAA;UAAAC,MAAA,CAAAC,WAAA;QAAA;MAyEA;MACA;MACA,KAAA9E,qBAAA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAoF,WAAA,WAAAA,YAAAM,YAAA,EAAAP,QAAA,EAAA5H,KAAA;MAAA,IAAAoI,UAAA,GAAAtK,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,IAAAzD,GAAA,QAAAyN,oBAAA,CAAAK,YAAA,EAAAP,QAAA;MACA,IAAAvN,GAAA;QACA;QACA,IAAA+N,UAAA,KAAAlT,KAAA,CAAAmT,OAAA,CAAArI,KAAA;UACAA,KAAA,IAAAA,KAAA,QAAAG,QAAA,GAAAmI,IAAA;UACAtI,KAAA,GAAAA,KAAA,eAAAA,KAAA,CAAAe,KAAA;QACA;QACA,KAAAJ,IAAA,CAAAwH,YAAA,EAAA9N,GAAA,EAAA2F,KAAA;QACA;MACA;MACA;IACA;IACA8H,oBAAA,WAAAA,qBAAAlD,MAAA,EAAA2D,WAAA;MACA,IAAAlO,GAAA,GAAAkO,WAAA;MACA,IAAA3D,MAAA,CAAAtK,cAAA,CAAAD,GAAA;QACA,OAAAA,GAAA;MACA;MACA,IAAAuK,MAAA,CAAAtK,cAAA,CAAAD,GAAA,QAAA1D,MAAA;QACA,OAAA0D,GAAA,QAAA1D,MAAA;MACA;MACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAuP,qBAAA,WAAAA,sBAAAlG,KAAA,EAAAD,GAAA,EAAAlF,MAAA,EAAAvC,YAAA;MAAA,IAAAkQ,OAAA;MAAA,IAAAlJ,MAAA,GAAAxB,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA2K,SAAA,GAAA3K,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAAwG,QAAA,GAAAxG,SAAA,CAAAlE,MAAA,OAAAkE,SAAA,MAAAC,SAAA;MACA,IAAA1F,QAAA,GAAAtC,MAAA,CAAAkE,MAAA,UAAA5B,QAAA;MACA;MACA,IAAA4H,OAAA,GAAApF,MAAA,CAAAR,GAAA,GAAA0F,GAAA,CAAAnC,EAAA;MACAvF,QAAA,CAAA4H,OAAA,IAAA5H,QAAA,CAAA4H,OAAA,IAAA5H,QAAA,CAAA4H,OAAA;MAEA,IAAAyI,mBAAA,QAAAC,aAAA,CAAA9N,MAAA,EAAAmF,KAAA;QAAA4I,oBAAA,GAAAC,cAAA,CAAAH,mBAAA;QAAA1C,MAAA,GAAA4C,oBAAA;QAAAE,OAAA,GAAAF,oBAAA;MAEA,IAAAG,QAAA,YAAAA,SAAAC,GAAA;QACA,IAAAC,IAAA,GAAAJ,cAAA,CAAAG,GAAA;UAAAhD,MAAA,GAAAiD,IAAA;UAAAH,OAAA,GAAAG,IAAA;QACA;QACA,IAAAjD,MAAA;UACA3N,QAAA,CAAA4H,OAAA,EAAAgG,OAAA,IAAAD,MAAA;UACA3N,QAAA,CAAA4H,OAAA,EAAA+F,MAAA,GAAAA,MAAA;UACA,IAAAzD,KAAA,GAAAjK,YAAA,CAAAuJ,OAAA,CAAA5B,OAAA;UACA,KAAA+F,MAAA;YACA3N,QAAA,CAAA4H,OAAA,EAAAzD,KAAA,GAAAgM,OAAA,CAAAU,YAAA,CAAArO,MAAA,EAAAiO,OAAA;YACA,IAAAvG,KAAA,SAAAjK,YAAA,CAAA8G,IAAA,CAAAa,OAAA;UACA;YACA,IAAAsC,KAAA,SAAAjK,YAAA,CAAAoC,MAAA,CAAA6H,KAAA;UACA;QACA;QACA;QACA,IAAAjD,MAAA;UACAkJ,OAAA,CAAAnQ,QAAA,GAAAA,QAAA;UACAmQ,OAAA,CAAAlQ,YAAA,GAAAA,YAAA;QACA;QAEA,WAAAgM,QAAA;UACAA,QAAA,EAAAjM,QAAA,CAAA4H,OAAA,GAAA3H,YAAA;QACA;MAEA;MAEA,WAAA0N,MAAA;QACA,IAAAmD,QAAA;QACAnD,MAAA,CAAAyC,SAAA,EAAAzI,KAAA;UAAApC,EAAA,OAAAf,UAAA,CAAAkD,GAAA,CAAAnC,EAAA;QAAA,GAAAtB,aAAA,KAAAzB,MAAA,aAAAuO,IAAA,EAAAC,GAAA;UACA,IAAAF,QAAA;UACAA,QAAA;UACA,WAAAE,GAAA;YACAP,OAAA,GAAAO,GAAA;UACA;UACA,IAAAD,IAAA;YACAL,QAAA,QAAAD,OAAA;UACA;YACAC,QAAA,IAAAK,IAAA,EAAAN,OAAA;UACA;QACA;MACA;QACAC,QAAA,EAAA/C,MAAA,EAAA8C,OAAA;MACA;MAEA,QAAAzQ,QAAA,CAAA4H,OAAA,GAAA3H,YAAA;IACA;IAEA,aACAgR,gBAAA,WAAAA,iBAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,EAAAvC,YAAA;MAAA,IAAAgH,MAAA,GAAAxB,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA2K,SAAA,GAAA3K,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,YAAAoI,qBAAA,CAAAlG,KAAA,EAAAD,GAAA,EAAAlF,MAAA,EAAAvC,YAAA,EAAAgH,MAAA,EAAAmJ,SAAA;IACA;IACA,kBACAE,aAAA,WAAAA,cAAA9N,MAAA,EAAAmF,KAAA;MACA,IAAAuJ,KAAA,GAAA1O,MAAA,CAAA2O,aAAA;MACA,IAAAxD,MAAA;QAAA8C,OAAA;MACA;MACA,IAAAS,KAAA,YAAArU,KAAA;QAAA,IAAAuU,UAAA,GAAA3E,0BAAA,CACAyE,KAAA;UAAAG,MAAA;QAAA;UAAA,KAAAD,UAAA,CAAArE,CAAA,MAAAsE,MAAA,GAAAD,UAAA,CAAApE,CAAA,IAAAC,IAAA;YAAA,IAAAqE,IAAA,GAAAD,MAAA,CAAA1J,KAAA;YACA;YACA,IAAA4J,MAAA,GAAA5J,KAAA,YAAAA,KAAA;YACA;YACA,IAAA2J,IAAA,CAAAxU,QAAA,aAAAyU,MAAA;cACA5D,MAAA;YACA;cAAA;cACA;cACA,IAAA2D,IAAA,CAAAE,MAAA,aAAAF,IAAA,CAAAG,OAAA;gBACA,IAAAC,mBAAA,QAAA3D,aAAA;oBAAA7B,QAAA;kBAAA;kBAAAK,MAAA,GAAAmF,mBAAA,CAAAnF,MAAA;gBACA,IAAAoF,SAAA;gBAAA,IAAAC,UAAA,GAAAnF,0BAAA,CACAF,MAAA;kBAAAsF,MAAA;gBAAA;kBAAA,KAAAD,UAAA,CAAA7E,CAAA,MAAA8E,MAAA,GAAAD,UAAA,CAAA5E,CAAA,IAAAC,IAAA;oBAAA,IAAAhK,GAAA,GAAA4O,MAAA,CAAAlK,KAAA;oBACA,IAAA1E,GAAA,CAAAT,MAAA,CAAAR,GAAA,MAAA2F,KAAA;sBACA,MAAAgK,SAAA;wBACAhE,MAAA;wBACA;sBACA;oBACA;kBACA;gBAAA,SAAAR,GAAA;kBAAAyE,UAAA,CAAAxE,CAAA,CAAAD,GAAA;gBAAA;kBAAAyE,UAAA,CAAAvE,CAAA;gBAAA;cACA;gBACA;gBACA,MAAAiE,IAAA,CAAAG,OAAA,KAAAF,MAAA;kBAEA;kBACA,IAAAO,GAAA,IACA;oBAAA3N,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,GACA;oBAAAtN,KAAA;oBAAAwD,KAAA;oBAAA8J,OAAA;kBAAA,EACA;kBACA,IAAAV,IAAA;kBACA,SAAAgB,EAAA,MAAAC,IAAA,GAAAF,GAAA,EAAAC,EAAA,GAAAC,IAAA,CAAAzQ,MAAA,EAAAwQ,EAAA;oBAAA,IAAA/N,IAAA,GAAAgO,IAAA,CAAAD,EAAA;oBACA,IAAAT,IAAA,CAAAG,OAAA,KAAAzN,IAAA,CAAA2D,KAAA,IAAA3D,IAAA,CAAAyN,OAAA;sBACA9D,MAAA,OAAAsE,MAAA,CAAAjO,IAAA,CAAAyN,OAAA,EAAAS,IAAA,CAAAvK,KAAA;sBACAoJ,IAAA;sBACA;oBACA;kBACA;kBACA,KAAAA,IAAA,EAAApD,MAAA,OAAAsE,MAAA,CAAAX,IAAA,CAAAG,OAAA,EAAAS,IAAA,CAAAvK,KAAA;gBACA;kBACA;kBACA,WAAA2J,IAAA,CAAAtO,OAAA;oBACA,QAAAsO,IAAA,CAAAtO,OAAA,EAAAsO,IAAA,CAAAb,OAAA;kBACA;YACA;YACA,KAAA9C,MAAA;cACA8C,OAAA,GAAAa,IAAA,CAAAb,OAAA;cACA;YACA;UACA;QAAA,SAAAtD,GAAA;UAAAiE,UAAA,CAAAhE,CAAA,CAAAD,GAAA;QAAA;UAAAiE,UAAA,CAAA/D,CAAA;QAAA;MACA;MACA,QAAAM,MAAA,EAAA8C,OAAA;IACA;IAEA,eACA/J,gBAAA,WAAAA,iBAAA;MAAA,IAAAyL,OAAA;MACA,IAAAC,GAAA,QAAAzN,UAAA,UAAA0N,sBAAA;MACA,IAAAC,KAAA;MAAA,IAAAC,UAAA,GAAA9F,0BAAA,CACA2F,GAAA;QAAAI,MAAA;MAAA;QAAA,KAAAD,UAAA,CAAAxF,CAAA,MAAAyF,MAAA,GAAAD,UAAA,CAAAvF,CAAA,IAAAC,IAAA;UAAA,IAAAwF,GAAA,GAAAD,MAAA,CAAA7K,KAAA;UACA2K,KAAA,CAAAvL,IAAA,CAAA0L,GAAA;QACA;QACA;MAAA,SAAAtF,GAAA;QAAAoF,UAAA,CAAAnF,CAAA,CAAAD,GAAA;MAAA;QAAAoF,UAAA,CAAAlF,CAAA;MAAA;MACA,IAAAqF,QAAA,GAAAJ,KAAA;MACA,SAAAzR,YAAA,CAAAU,MAAA;QACAmR,QAAA;QAAA,IAAAC,UAAA,GAAAlG,0BAAA,CACA6F,KAAA;UAAAM,MAAA;QAAA;UAAA,KAAAD,UAAA,CAAA5F,CAAA,MAAA6F,MAAA,GAAAD,UAAA,CAAA3F,CAAA,IAAAC,IAAA;YAAA,IAAAwF,EAAA,GAAAG,MAAA,CAAAjL,KAAA;YACA,IAAAkL,QAAA;YAAA,IAAAC,UAAA,GAAArG,0BAAA,CACA,KAAA5L,YAAA;cAAAkS,MAAA;YAAA;cAAA,KAAAD,UAAA,CAAA/F,CAAA,MAAAgG,MAAA,GAAAD,UAAA,CAAA9F,CAAA,IAAAC,IAAA;gBAAA,IAAA+F,GAAA,GAAAD,MAAA,CAAApL,KAAA;gBACA,IAAAqL,GAAA,CAAAzN,EAAA,KAAAkN,EAAA,CAAAlN,EAAA;kBACAsN,QAAA;kBACA;gBACA;cACA;YAAA,SAAA1F,GAAA;cAAA2F,UAAA,CAAA1F,CAAA,CAAAD,GAAA;YAAA;cAAA2F,UAAA,CAAAzF,CAAA;YAAA;YACA,IAAAwF,QAAA;cACAH,QAAA,CAAA3L,IAAA,CAAA0L,EAAA;YACA;UACA;QAAA,SAAAtF,GAAA;UAAAwF,UAAA,CAAAvF,CAAA,CAAAD,GAAA;QAAA;UAAAwF,UAAA,CAAAtF,CAAA;QAAA;MACA;MACA,KAAAxM,YAAA,GAAAyR,KAAA;MACA;MACAI,QAAA,CAAAnQ,OAAA,WAAAkQ,EAAA;QACA,IAAAQ,GAAA,GAAAR,EAAA,CAAAS,OAAA,CAAAD,GAAA;QACA,IAAAtL,KAAA,GAAAwK,OAAA,CAAAvR,WAAA,CAAAqS,GAAA;QACA,SAAAjR,GAAA,IAAA2F,KAAA;UACA,IAAAA,KAAA,CAAA1F,cAAA,CAAAD,GAAA;YACA,IAAAmR,IAAA,MAAA9U,MAAA,CAAA2D,GAAA,EAAA3D,MAAA,CAAAsJ,KAAA,CAAApC,EAAA;YACA,IAAAhH,EAAA,GAAAwC,QAAA,CAAA4E,cAAA,CAAAwN,IAAA;YACA,IAAA5U,EAAA;cACAA,EAAA,CAAAoJ,KAAA,GAAAA,KAAA,CAAA3F,GAAA;YACA;UACA;QACA;MACA;IACA;IACA,qBACAoI,qBAAA,WAAAA,sBAAA;MAAA,IAAAgJ,OAAA;MACA,KAAAvS,YAAA;MACA,KAAAwS,YAAA;MACA,KAAAhN,SAAA;QAAA,OAAA+M,OAAA,CAAA1M,gBAAA;MAAA;IACA;IAEA;IACAyD,0BAAA,WAAAA,2BAAA;MAAA,IAAAmJ,OAAA;MACA,SAAAnT,mBAAA;QACAzC,MAAA,CAAA6V,IAAA,MAAAnT,iBAAA,EAAAmC,OAAA,WAAAP,GAAA;UAAA,OAAAsR,OAAA,CAAAE,yBAAA,CAAAxR,GAAA;QAAA;MACA;IACA;IACA;IACAwR,yBAAA,WAAAA,0BAAAxR,GAAA;MACA,SAAA7B,mBAAA;QACA,SAAAC,iBAAA,CAAA6B,cAAA,CAAAD,GAAA;UACA;UACA,IAAAD,KAAA;UACA,KAAAnB,WAAA,CAAA2B,OAAA,WAAAyB,IAAA;YACA,IAAA2D,KAAA,GAAA3D,IAAA,CAAAhC,GAAA;YACA,IAAA2F,KAAA,IAAA5F,KAAA;cACA;gBACAA,KAAA,IAAAvE,MAAA,CAAA+M,QAAA,CAAA5C,KAAA;cACA,SAAAyF,CAAA;gBACArL,KAAA;cACA;YACA;UACA;UACA,KAAA3B,iBAAA,CAAA4B,GAAA,IAAAD,KAAA;QACA;MACA;IACA;IAEA,iBACA0R,kBAAA,WAAAA,mBAAAzR,GAAA;MACA,SAAA7B,mBAAA;QACA,SAAAC,iBAAA,CAAA6B,cAAA,CAAAD,GAAA;UACA,YAAA5B,iBAAA,CAAA4B,GAAA;QACA;MACA;MACA;IACA;IAEA,cACA0R,sBAAA,WAAAA,uBAAA;MAAA,IAAAC,OAAA;MACA,IAAA7T,cAAA;MACA,UAAA4B,YAAA;QACA,KAAA5C,IAAA,CAAAyD,OAAA,WAAAmF,GAAA;UACA,KAAAiM,OAAA,CAAA7S,cAAA,QAAA0I,OAAA,CAAA9B,GAAA,CAAAnC,EAAA;YACAzF,cAAA,CAAAiH,IAAA,CAAAW,GAAA,CAAAnC,EAAA;UACA;QACA;MACA;MACA,KAAAzF,cAAA,GAAAA,cAAA;IACA;IACA,qBACA8T,wBAAA,WAAAA,yBAAA1S,KAAA;MACA,IAAAqE,EAAA,GAAArE,KAAA,CAAA4D,MAAA,CAAAS,EAAA;MAEA,UAAAzE,cAAA,QAAA0I,OAAA,CAAAjE,EAAA;QACA;MACA;MAEA,IAAA2E,KAAA,QAAApK,cAAA,CAAA0J,OAAA,CAAAjE,EAAA;MACA,IAAA2E,KAAA;QACA,KAAApK,cAAA,CAAAuC,MAAA,CAAA6H,KAAA;MACA;QACA,KAAApK,cAAA,CAAAiH,IAAA,CAAAxB,EAAA;MACA;IAEA;IACAsO,cAAA,WAAAA,eAAA;MACA,KAAApJ,GAAA;IACA;IACAqJ,mBAAA,WAAAA,oBAAA;MACA,KAAAzI,kBAAA;IACA;IACA0I,yBAAA,WAAAA,0BAAA;MACA,KAAAC,cAAA;IACA;IACAA,cAAA,WAAAA,eAAA;MACA,KAAAlU,cAAA;IACA;IACA,kBACAmU,wBAAA,WAAAA,yBAAAC,KAAA,EAAAC,MAAA,EAAA3R,MAAA;MACA,IAAAA,MAAA,CAAA4R,WAAA,aAAA5R,MAAA,CAAA6R,UAAA;QACA,OAAAF,MAAA,CAAAG,gBAAA,CAAAC,QAAA,IAAArQ,IAAA,CAAAsQ,WAAA,GAAAhL,OAAA,CAAA0K,KAAA,CAAAM,WAAA;MACA;MACA;IACA;IACA,kCACAC,kBAAA,WAAAA,mBAAA9M,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAgN,GAAA;MACA,IAAAA,GAAA,CAAAN,WAAA,aAAAM,GAAA,CAAAL,UAAA;QACA;QACA,IAAAtD,IAAA;QAAA,IAAA4D,UAAA,GAAAlI,0BAAA,CACAiI,GAAA,CAAA5Q,OAAA;UAAA8Q,MAAA;QAAA;UAAA,KAAAD,UAAA,CAAA5H,CAAA,MAAA6H,MAAA,GAAAD,UAAA,CAAA3H,CAAA,IAAAC,IAAA;YAAA,IAAAkH,MAAA,GAAAS,MAAA,CAAAjN,KAAA;YACA,IAAAwM,MAAA,CAAAxM,KAAA,CAAAkN,cAAA,OAAAlN,KAAA,CAAAkN,cAAA;cACA9D,IAAA;cACA;YACA;UACA;UACA;QAAA,SAAA5D,GAAA;UAAAwH,UAAA,CAAAvH,CAAA,CAAAD,GAAA;QAAA;UAAAwH,UAAA,CAAAtH,CAAA;QAAA;QACA,KAAA0D,IAAA,MAAApJ,KAAA;UACA;UACA+M,GAAA,CAAA5Q,OAAA,CAAAiD,IAAA;YAAA5C,KAAA,EAAAwD,KAAA;YAAAA,KAAA,EAAAA,KAAA;YAAAmN,SAAA;UAAA;QACA;MAEA;IACA;IACA;IACAC,gBAAA,WAAAA,iBAAApN,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAgN,GAAA;MACA,IAAAA,GAAA,CAAAL,UAAA;QACA;QACA,WAAA1M,KAAA;UACA,IAAAqN,MAAA;UACAN,GAAA,CAAA5Q,OAAA,CAAAvB,OAAA,WAAA4R,MAAA,EAAAjK,KAAA;YACA,IAAAiK,MAAA,CAAAxM,KAAA,CAAAkN,cAAA,OAAAlN,KAAA,CAAAkN,cAAA;cACA,OAAAV,MAAA,CAAAW,SAAA;YACA,WAAAX,MAAA,CAAAW,SAAA;cACAE,MAAA,CAAAjO,IAAA,CAAAmD,KAAA;YACA;UACA;UACA;UAAA,IAAA+K,WAAA,GAAAxI,0BAAA,CACAuI,MAAA,CAAAE,OAAA;YAAAC,OAAA;UAAA;YAAA,KAAAF,WAAA,CAAAlI,CAAA,MAAAoI,OAAA,GAAAF,WAAA,CAAAjI,CAAA,IAAAC,IAAA;cAAA,IAAA/C,KAAA,GAAAiL,OAAA,CAAAxN,KAAA;cACA+M,GAAA,CAAA5Q,OAAA,CAAAzB,MAAA,CAAA6H,KAAA;YACA;UAAA,SAAAiD,GAAA;YAAA8H,WAAA,CAAA7H,CAAA,CAAAD,GAAA;UAAA;YAAA8H,WAAA,CAAA5H,CAAA;UAAA;QACA;MAEA;MACA;MACA,KAAA4D,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAgN,GAAA,OAAAzU,YAAA;IACA;IAEA,cACAmV,WAAA,WAAAA,YAAAC,QAAA,EAAAC,QAAA;MACA,KAAA/Q,KAAA;QAAA8Q,QAAA,EAAAA,QAAA;QAAAC,QAAA,EAAAA,QAAA;QAAAxQ,MAAA;MAAA;IACA;IAEAyQ,mBAAA,WAAAA,oBAAArU,KAAA;MACA,KAAAhB,QAAA;MACA,KAAA+E,KAAA,CAAAE,UAAA,CAAAzG,KAAA,CAAA8W,QAAA;IACA;IAEA,2BACAC,iBAAA,WAAAA,kBAAAvU,KAAA;MACA,KAAAhB,QAAA;MACA,KAAA+E,KAAA,CAAAE,UAAA,CAAAzG,KAAA,CAAA8W,QAAA;MAEA,IAAAH,QAAA,GAAAnU,KAAA,CAAAmU,QAAA;QAAAC,QAAA,GAAApU,KAAA,CAAAoU,QAAA;QAAAI,OAAA,GAAAxU,KAAA,CAAA8C,IAAA,CAAAkP,OAAA,CAAAD,GAAA;;MAEA;MACA,IAAAxM,IAAA,GAAAjJ,MAAA,CAAA+M,QAAA,CAAAmL,OAAA,IAAAL,QAAA;MACAA,QAAA,IAAA5O,IAAA;MACA6O,QAAA,IAAA7O,IAAA;MAEA,KAAAkP,SAAA,CAAAN,QAAA,EAAAC,QAAA;MACA,KAAAF,WAAA,CAAAC,QAAA,EAAAC,QAAA;IACA;IAEA,YACAK,SAAA,WAAAA,UAAAN,QAAA,EAAAC,QAAA;MACA,IAAAM,IAAA,YAAAA,KAAAC,KAAA;QACA;QACA,IAAA/L,IAAA,GAAA+L,KAAA,CAAAR,QAAA;QACAQ,KAAA,CAAAxT,MAAA,CAAAgT,QAAA;QACA;QACAQ,KAAA,CAAAxT,MAAA,CAAAiT,QAAA,KAAAxL,IAAA;MACA;MAEA8L,IAAA,MAAA9W,IAAA;MACA8W,IAAA,MAAAhV,WAAA;MAEA,KAAAwK,gBAAA;MAEA,KAAAhB,qBAAA;IACA;IAEA,kBACAgB,gBAAA,WAAAA,iBAAA;MAAA,IAAA0K,OAAA;MACA,SAAAlY,QAAA;QACA;QACA,KAAAgD,WAAA,CAAA2B,OAAA,WAAAU,GAAA,EAAAgQ,GAAA;UAAA,OAAAhQ,GAAA,CAAA6S,OAAA,CAAAjY,WAAA,IAAAoV,GAAA;QAAA;MACA;IACA;IAEA,eACA8C,gBAAA,WAAAA,iBAAAC,QAAA;MACA,IAAAA,QAAA;QACA,IAAAV,QAAA,GAAAU,QAAA;QACA,KAAAL,SAAA,CAAAK,QAAA,EAAAV,QAAA;QACA,KAAAF,WAAA,CAAAY,QAAA,EAAAV,QAAA;MACA;IACA;IAEA,eACAW,kBAAA,WAAAA,mBAAAD,QAAA;MACA,IAAAA,QAAA,QAAAlX,IAAA,CAAAyC,MAAA;QACA,IAAA+T,QAAA,GAAAU,QAAA;QACA,KAAAL,SAAA,CAAAK,QAAA,EAAAV,QAAA;QACA,KAAAF,WAAA,CAAAY,QAAA,EAAAV,QAAA;MACA;IACA;IAEA,iBACAY,oBAAA,WAAAA,qBAAAF,QAAA;MACA,IAAA9O,WAAA,GAAA8O,QAAA;MACA,KAAAhL,MAAA,CAAA9D,WAAA;IACA;IAEA;IAEA;IACAiP,kBAAA,WAAAA,mBAAArR,MAAA,EAAAoF,KAAA,EAAAxC,GAAA,EAAAlF,MAAA;MACA,IAAA4T,QAAA,QAAAxV,WAAA,CAAAsJ,KAAA,EAAA1H,MAAA,CAAAR,GAAA;MACA,IAAA2F,KAAA,GAAA7C,MAAA,CAAA6C,KAAA;QAAAuL,OAAA,GAAApO,MAAA,CAAAoO,OAAA;QAAAmD,cAAA,GAAAvR,MAAA,CAAAuR,cAAA;MACA,IAAAzZ,IAAA,GAAAvB,SAAA,CAAA6Y,KAAA;MACA,IAAAoC,MAAA;MACA,OAAAjY,MAAA,CAAA6U,OAAA,CAAAhL,WAAA;QACAtL,IAAA,GAAAvB,SAAA,CAAA6M,WAAA;QACA;QACA,qBAAAgK,IAAA,CAAAvK,KAAA,KAAAA,KAAA,WAAAA,KAAA;UACA2O,MAAA;UACA3O,KAAA,GAAAyO,QAAA;UACAtR,MAAA,CAAA6C,KAAA,GAAAA,KAAA;UACA,WAAA0O,cAAA;YACAvR,MAAA,CAAAuR,cAAA,GAAAA,cAAA;YACAvR,MAAA,CAAAyR,YAAA,GAAAF,cAAA;UACA;QACA;MACA;MACA;MACA,KAAAzV,WAAA,CAAAsJ,KAAA,EAAA1H,MAAA,CAAAR,GAAA,IAAA2F,KAAA;MACA;MACA,KAAAsJ,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MAEA,IAAArD,IAAA,KAAAvB,SAAA,CAAA6M,WAAA;QACA,KAAAsL,yBAAA,CAAAhR,MAAA,CAAAR,GAAA;MACA;;MAEA;MACA,IAAAsU,MAAA;QACA,KAAA5G,eAAA,CAAA9S,IAAA,EAAA8K,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;MACA;IACA;IACA,kBACA6O,sBAAA,WAAAA,uBAAA7O,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAApD,UAAA,QAAAqX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAAwN,IAAA,EAAAnB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA+O,iBAAA,WAAAA,kBAAA5R,MAAA,EAAAoF,KAAA,EAAAxC,GAAA,EAAAlF,MAAA;MAAA,IAAAmU,OAAA;MACA,IAAAhP,KAAA,GAAA7C,MAAA,CAAA6C,KAAA;QAAAuL,OAAA,GAAApO,MAAA,CAAAoO,OAAA;MACA,IAAAA,OAAA,OAAA7U,MAAA,CAAA6U,OAAA,CAAAhL,WAAA;QACA;QACA,qBAAAgK,IAAA,CAAAvK,KAAA;UACAA,KAAA;QACA;UACAA,KAAA,GAAAnK,MAAA,CAAAoZ,UAAA,CAAAjP,KAAA;QACA;QACA7C,MAAA,CAAA6C,KAAA,GAAAA,KAAA;MACA;MACA;MACAkP,UAAA;QACA;QACAF,OAAA,CAAA1F,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,EAAAmU,OAAA,CAAA1W,YAAA;MACA;MACA;IACA;IACA6W,0BAAA,WAAAA,2BAAA5V,KAAA,EAAAwG,GAAA,EAAAlF,MAAA;MACA,IAAAuU,aAAA,GAAA7V,KAAA,CAAA4D,MAAA;QAAAS,EAAA,GAAAwR,aAAA,CAAAxR,EAAA;QAAA+H,OAAA,GAAAyJ,aAAA,CAAAzJ,OAAA;MACA,KAAArO,cAAA,QAAAwX,gBAAA,CAAAnJ,OAAA,EAAA/H,EAAA;;MAEA;MACA,KAAAmK,eAAA,CAAArU,SAAA,CAAAkN,QAAA,EAAAb,GAAA,EAAAlF,MAAA,EAAA8K,OAAA;IACA;IACA0J,wBAAA,WAAAA,yBAAArP,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAAxD,YAAA,QAAAyX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;;MAEA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAAsI,MAAA,EAAA+D,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACAsP,uBAAA,WAAAA,wBAAAtP,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA,EAAA0U,QAAA;MACA,KAAAhY,WAAA,QAAAuX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;;MAEA;MACA,IAAAiX,QAAA;QACA,KAAAxH,eAAA,CAAArU,SAAA,CAAAuN,QAAA,EAAAlB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;MACA;QACA,KAAA+H,eAAA,CAAArU,SAAA,CAAAsN,IAAA,EAAAjB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;MACA;IACA;IACA;IACAwP,wBAAA,WAAAA,yBAAAxP,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAAjD,gBAAA,QAAAkX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAA0N,UAAA,EAAArB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA;IACAyP,sBAAA,WAAAA,uBAAAzP,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAAhD,cAAA,QAAAiX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAA2N,QAAA,EAAAtB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA0P,2BAAA,WAAAA,4BAAA1P,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAArD,eAAA,QAAAsX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAA4N,SAAA,EAAAvB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA2P,kBAAA,WAAAA,mBAAAC,IAAA,EAAAhS,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,IAAA6G,IAAA,GAAAkO,IAAA,CAAAlO,IAAA;MACA,IAAA1B,KAAA;QACAxL,IAAA,EAAAkN,IAAA,CAAAlN,IAAA;QACAS,IAAA,EAAAyM,IAAA,CAAAzM,IAAA;QACA4a,IAAA,EAAAnO,IAAA,CAAAmO,IAAA;QACA7N,MAAA,EAAAN,IAAA,CAAAM,MAAA;QACA8N,OAAA,EAAApO,IAAA,CAAAoO;MACA;MACA,IAAAjV,MAAA,CAAAkV,YAAA,IAAArO,IAAA,CAAAsO,QAAA;QACAhQ,KAAA,mBAAA0B,IAAA,CAAAsO,QAAA,CAAAnV,MAAA,CAAAkV,YAAA;MACA;MACA,IAAArO,IAAA,CAAAM,MAAA;QACAhC,KAAA,WAAA0B,IAAA,CAAAsO,QAAA,CAAAnV,MAAA,CAAAkV,YAAA;MACA,WAAArO,IAAA,CAAAM,MAAA;QACAhC,KAAA,cAAA0B,IAAA,CAAAsO,QAAA,CAAAlH,OAAA;MACA;MACA,KAAApR,YAAA,QAAAoX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;;MAEA;MACA,KAAAmK,eAAA,CAAAlN,MAAA,CAAA5F,IAAA,EAAA8K,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACAiQ,mBAAA,WAAAA,oBAAArS,EAAA,EAAAwL,IAAA,EAAAvO,MAAA;MACA;MACA,IAAAA,MAAA,CAAAhC,MAAA;QACA,KAAAA,MAAA,GAAAgC,MAAA,CAAAhC,MAAA;MACA;QACA,KAAAA,MAAA;MACA;MACA;MACA,IAAAgC,MAAA,IAAAA,MAAA,CAAAqV,eAAA;QACA,IAAAC,IAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAxV,MAAA,CAAAqV,eAAA;QACA,KAAArX,MAAA,GAAAsX,IAAA,CAAAG,SAAA,GAAAH,IAAA,CAAAG,SAAA;MACA;MACA;MACA,IAAArO,IAAA;MACA,SAAAvK,YAAA,SAAAA,YAAA,CAAAkG,EAAA;QACAqE,IAAA,QAAAvK,YAAA,CAAAkG,EAAA,EAAAqE,IAAA;MACA;MACA,KAAA3E,KAAA,CAAAiT,OAAA,CAAAC,IAAA,CAAA5S,EAAA,EAAAqE,IAAA,EAAAmH,IAAA;IACA;IACAqH,iBAAA,WAAAA,kBAAAC,GAAA;MACA,IAAAA,GAAA,CAAA9S,EAAA;QACA,KAAAlG,YAAA,QAAAoX,gBAAA,CAAA4B,GAAA,EAAAA,GAAA,CAAA9S,EAAA;MACA;IACA;IACA+S,mBAAA,WAAAA,oBAAApX,KAAA;MACA,IAAA4D,MAAA,GAAA5D,KAAA,CAAA4D,MAAA;MACA,IAAAA,MAAA,CAAAyT,SAAA,aAAAzT,MAAA,CAAAyT,SAAA;QACA;QACA,KAAAlY,eAAA;MACA;IACA;IACA;IACAmY,aAAA,WAAAA,cAAA9Q,GAAA,EAAAgN,GAAA;MAAA,IAAA+D,OAAA;MACA,SAAA1a,UAAA;QACA;MACA;MACA;MACA,KAAAsC,eAAA,GAAAsP,eAAA,KACAjI,GAAA,CAAAnC,EAAA,EAAAoK,eAAA,KACA+E,GAAA,CAAA1S,GAAA,QAEA;MACA,IAAA0S,GAAA,CAAA9X,IAAA,KAAAvB,SAAA,CAAA6Y,KAAA,IAAAQ,GAAA,CAAA9X,IAAA,KAAAvB,SAAA,CAAA6M,WAAA;QACA,KAAA7B,SAAA;UACAoS,OAAA,CAAArO,qBAAA;UACA;UACA,IAAA7L,EAAA,GAAAwC,QAAA,CAAA4E,cAAA,IAAAtH,MAAA,CAAAqW,GAAA,CAAA1S,GAAA,EAAA3D,MAAA,CAAAqJ,GAAA,CAAAnC,EAAA;UACA,IAAAhH,EAAA;YACAA,EAAA,CAAAma,KAAA;UACA;QACA;MACA;IACA;IACA,oBACAjC,gBAAA,WAAAA,iBAAA9O,KAAA,EAAApC,EAAA,EAAAvD,GAAA;MACA,KAAAsG,IAAA,MAAAtG,GAAA,GAAAuD,EAAA,EAAAoC,KAAA;MACA,YAAA3F,GAAA;IACA;IAEA,4BACA0N,eAAA,WAAAA,gBAAA9S,IAAA,EAAA+b,SAAA,EAAAC,YAAA,EAAAjR,KAAA;MACA,IAAAnF,MAAA,GAAA9E,MAAA,CAAAkE,MAAA,KAAAgX,YAAA;MACA;MACA,IAAAlR,GAAA,GAAAhK,MAAA,CAAAkE,MAAA,KAAA+W,SAAA;MACAjR,GAAA,CAAAnC,EAAA,QAAAf,UAAA,CAAAkD,GAAA,CAAAnC,EAAA;MACA;MACA,IAAAsT,oBAAA,QAAA9K,aAAA;UAAA7B,QAAA;UAAAC,MAAA,GAAAzE,GAAA,CAAAnC,EAAA;QAAA;QAAAgH,MAAA,GAAAsM,oBAAA,CAAAtM,MAAA;MACA,IAAAA,MAAA,CAAAhL,MAAA;QACA7D,MAAA,CAAAkE,MAAA,CAAA8F,GAAA,EAAA6E,MAAA;MACA;MACA,KAAAhI,KAAA;QAAA3H,IAAA,EAAAA,IAAA;QAAA8K,GAAA,EAAAA,GAAA;QAAAlF,MAAA,EAAAA,MAAA;QAAAmF,KAAA,EAAAA,KAAA;QAAA7C,MAAA;MAAA;IACA;IAEA,0BACAN,UAAA,WAAAA,WAAAe,EAAA;MACAA,EAAA,QAAAuT,YAAA,CAAAvT,EAAA;MACAA,EAAA,QAAAwT,YAAA,CAAAxT,EAAA;MACA,OAAAA,EAAA;IACA;IAEA,wBACAkC,SAAA,WAAAA,UAAAlC,EAAA;MACA,OAAAA,EAAA,IAAAA,EAAA,CAAAyT,UAAA,MAAA5a,MAAA;IACA;IAEA,gBACA0a,YAAA,WAAAA,aAAAvT,EAAA;MACA,SAAAkC,SAAA,CAAAlC,EAAA;QACA,OAAAA,EAAA,CAAA1C,SAAA,MAAAzE,MAAA,CAAAmD,MAAA,EAAAgE,EAAA,CAAAhE,MAAA;MACA;MACA,OAAAgE,EAAA;IACA;IAEA;IACAuI,QAAA,WAAAA,SAAAvI,EAAA;MACA,QAAAA,EAAA,QAAA3C,QAAA,MAAAtE,MAAA;IACA;IAEA,gBACAya,YAAA,WAAAA,aAAAxT,EAAA;MACA,SAAAuI,QAAA,CAAAvI,EAAA;QACA,OAAAA,EAAA,CAAA1C,SAAA,IAAA0C,EAAA,CAAAhE,MAAA,QAAAjD,MAAA,CAAAiD,MAAA;MACA;MACA,OAAAgE,EAAA;IACA;IAEA0T,kBAAA,WAAAA,mBAAA1T,EAAA;MACA,KAAAlG,YAAA,CAAAkG,EAAA;IACA;IACA2T,uBAAA,WAAAA,wBAAA3T,EAAA;MACA,IAAA4T,KAAA,QAAA9Z,YAAA,CAAAkG,EAAA;QAAAqE,IAAA,GAAAuP,KAAA,CAAAvP,IAAA;MACA,IAAAA,IAAA;QACA,IAAAwP,GAAA,GAAAtd,oBAAA,CAAA8N,IAAA;QACAyP,MAAA,CAAAC,IAAA,CAAAF,GAAA;MACA;IACA;IACAG,wBAAA,WAAAA,yBAAAhU,EAAA;MACA,IAAAiU,KAAA,QAAAna,YAAA,CAAAkG,EAAA;QAAA6T,GAAA,GAAAI,KAAA,CAAAJ,GAAA;QAAAxP,IAAA,GAAA4P,KAAA,CAAA5P,IAAA;MACA,KAAAwP,GAAA,IAAAA,GAAA,CAAA7X,MAAA;QACA,IAAAqI,IAAA,IAAAA,IAAA,CAAArI,MAAA;UACA6X,GAAA,GAAAtd,oBAAA,CAAA8N,IAAA,CAAAlB,KAAA;QACA;MACA;MACA,IAAA0Q,GAAA;QACAC,MAAA,CAAAC,IAAA,CAAAF,GAAA;MACA;IACA;IACAK,yBAAA,WAAAA,0BAAAlU,EAAA;MACA,IAAAiI,aAAA,QAAAnO,YAAA,CAAAkG,EAAA;MACA,IAAAiI,aAAA,IAAAA,aAAA;QACA,KAAAkM,MAAA;UAAAvV,KAAA;UAAAwV,OAAA,YAAAnM,aAAA;UAAAoM,YAAA;QAAA;MACA;IACA;IAEA,yBACAvV,wBAAA,WAAAA,yBAAA7B,MAAA;MAAA,IAAAqX,OAAA;MACAhe,eAAA,CAAA2G,MAAA,CAAA4B,QAAA,EAAAd,IAAA,WAAAqN,GAAA;QACA,IAAAA,GAAA,CAAAmJ,OAAA;UACA,IAAAC,UAAA,GAAAvX,MAAA,CAAAsB,OAAA;UACA6M,GAAA,CAAAjC,MAAA,CAAAnM,OAAA,WAAAyB,IAAA;YACA;YAAA,IAAAgW,WAAA,GAAAvN,0BAAA,CACAsN,UAAA;cAAAE,OAAA;YAAA;cAAA,KAAAD,WAAA,CAAAjN,CAAA,MAAAkN,OAAA,GAAAD,WAAA,CAAAhN,CAAA,IAAAC,IAAA;gBAAA,IAAAkH,MAAA,GAAA8F,OAAA,CAAAtS,KAAA;gBAAA,IAAAwM,MAAA,CAAAxM,KAAA,KAAA3D,IAAA,CAAA2D,KAAA;cAAA;YAAA,SAAAwF,GAAA;cAAA6M,WAAA,CAAA5M,CAAA,CAAAD,GAAA;YAAA;cAAA6M,WAAA,CAAA3M,CAAA;YAAA;YACA0M,UAAA,CAAAhT,IAAA,CAAA/C,IAAA;UACA;UACA6V,OAAA,CAAAvR,IAAA,CAAA9F,MAAA,aAAAuX,UAAA;QACA;UACAnK,OAAA,CAAAsK,KAAA,4CAAA7b,MAAA,CAAAmE,MAAA,CAAA4B,QAAA;UACAwL,OAAA,CAAAuK,GAAA,CAAAxJ,GAAA,CAAAF,OAAA;UACAb,OAAA,CAAAwK,QAAA;QACA;MACA;IACA;IAEA;IAEA;IAEA;IACAD,GAAA,WAAAA,IAAA;MACA,SAAAE,MAAA,CAAAC,MAAA;QACA1K,OAAA,CAAAuK,GAAA,CAAAI,KAAA,OAAA9U,SAAA;MACA;IACA;IAEA+U,KAAA,WAAAA,MAAA;MACA;IACA;IAEA,wCACAC,iBAAA,WAAAA,kBAAA/S,GAAA,EAAAgN,GAAA,EAAAnP,EAAA;MACA,IAAAtF,YAAA,QAAAA,YAAA;QAAAD,QAAA,QAAAA,QAAA;MACA,IAAAtD,KAAA;QACAyH,KAAA,GAAAnE,QAAA,CAAAuF,EAAA,SAAApB,KAAA;QACAuW,SAAA;QACAC,kBAAA;QACAC,iBAAA,OAAAC,kBAAA;QACAC,KAAA;UACA;QACA;MACA;MACA,IAAAC,aAAA,GAAA9a,YAAA,CAAA8J,QAAA,CAAAxE,EAAA;MACA,IAAAwV,aAAA;QACAre,KAAA,CAAAoe,KAAA;MACA;QACApe,KAAA;MACA;MACA,OAAAA,KAAA;IACA;IAEA,oCACAme,kBAAA,WAAAA,mBAAAG,IAAA;MAAA,IAAAC,OAAA;MACA,IAAAhV,OAAA;QACA;QACA,IAAAgV,OAAA,CAAAC,GAAA,IAAAD,OAAA,CAAAC,GAAA,CAAAC,QAAA;UACA,OAAAF,OAAA,CAAAC,GAAA;QACA;QACA,IAAAE,GAAA,GAAAra,QAAA,CAAA4E,cAAA,CAAAsV,OAAA,CAAA7c,MAAA;QACA,IAAAgd,GAAA;UACA,OAAAA,GAAA;QACA;QACA,OAAAJ,IAAA,CAAAK,UAAA,CAAAA,UAAA,CAAAA,UAAA,CAAAA,UAAA,CAAAA,UAAA,CAAAA,UAAA;MACA;;MAEA;MACA,IAAAC,QAAA,YAAAA,SAAAC,KAAA;QACA,IAAAC,eAAA;QACA,IAAAD,KAAA;UACAC,eAAA,GAAAD,KAAA;QACA,WAAAlC,MAAA,CAAAoC,gBAAA;UACAD,eAAA,GAAAnC,MAAA,CAAAoC,gBAAA,CAAAF,KAAA;QACA;QACA,IAAAC,eAAA;UACA,IAAAA,eAAA;YACA;YACA,IAAA1R,KAAA,GAAAwR,QAAA,CAAAC,KAAA,CAAAF,UAAA;YACA,OAAAvR,KAAA,WAAAA,KAAA,GAAAyR,KAAA,CAAAF,UAAA;UACA;YACA;YACA,IAAAE,KAAA,CAAAF,UAAA,IAAAE,KAAA,CAAAF,UAAA,CAAAK,OAAA,CAAAC,iBAAA;cACA,OAAAL,QAAA,CAAAC,KAAA,CAAAF,UAAA;YACA;cACA;cACA;YACA;QACA;UACA,OAAAE,KAAA;QACA;MACA;MAEA,IAAAzR,IAAA,GAAAwR,QAAA,CAAArV,OAAA;MACA,OAAA6D,IAAA,WAAAA,IAAA,GAAA7D,OAAA;IACA;IAEA,sBACA4K,YAAA,WAAAA,aAAA6D,GAAA,EAAA/M,KAAA;MACA,IAAAA,KAAA,WAAAA,KAAA;QACAA,KAAA,GAAAA,KAAA,CAAAiU,OAAA,eAAAlH,GAAA,CAAAvQ,KAAA;QACAwD,KAAA,GAAAA,KAAA,CAAAiU,OAAA,aAAAlH,GAAA,CAAA1S,GAAA;QACA2F,KAAA,GAAAA,KAAA,CAAAiU,OAAA,sBAAAlH,GAAA,CAAA3M,YAAA;MACA;MACA,OAAAJ,KAAA;IACA;IAEA,2BACAkU,YAAA,WAAAA,aAAA3R,KAAA;MACA;QACA,UAAA7L,MAAA,CAAAnC,SAAA,GAAAgO,KAAA;MACA;IACA;IACA,2BACA4R,YAAA,WAAAA,aAAApH,GAAA;MACA,IAAAqH,YAAA,YAAAA,aAAAvZ,MAAA;QAAA,OAAAA,MAAA,CAAA5F,IAAA,KAAAvB,SAAA,CAAAsH,MAAA,IAAAH,MAAA,CAAAE,KAAA,cAAAF,MAAA,CAAAE,KAAA,YAAAF,MAAA,CAAAE,KAAA;MAAA;MAEA,IAAAhE,KAAA;MACA;MACA,IAAAgW,GAAA,CAAAhS,KAAA;QACAhE,KAAA,YAAAgW,GAAA,CAAAhS,KAAA;MACA,gBAAA/F,OAAA;QACA+B,KAAA,eAAAL,MAAA,sBAAA1B,OAAA,CAAAqf,MAAA,WAAAxZ,MAAA;UAAA,QAAAuZ,YAAA,CAAAvZ,MAAA;QAAA,GAAAjB,MAAA;MACA;QACA7C,KAAA;MACA;MACA;MACA;MACA,IAAAgW,GAAA,CAAA9X,IAAA,KAAAvB,SAAA,CAAAuN,QAAA;QACAlK,KAAA;MACA;MACA,IAAAgW,GAAA,CAAA9X,IAAA,KAAAvB,SAAA,CAAA2N,QAAA,KAAA0L,GAAA,CAAAhS,KAAA;QACAhE,KAAA;MACA;MACA,IAAAgW,GAAA,CAAA9X,IAAA,KAAAvB,SAAA,CAAA0N,UAAA,KAAA2L,GAAA,CAAAhS,KAAA;QACAhE,KAAA;MACA;MACA;;MAEA;MACA,IAAAud,UAAA,GAAAvH,GAAA,CAAA9X,IAAA,KAAAvB,SAAA,CAAAkN,QAAA;MACA,IAAA0T,UAAA;QACAvd,KAAA;QACAA,KAAA;QACAA,KAAA;QACAA,KAAA;MACA;MACA,IAAAqd,YAAA,CAAArH,GAAA;QACAhW,KAAA;QACAA,KAAA;MACA;MACA,OAAAA,KAAA;IACA;IACA,uBACAwd,UAAA,WAAAA,WAAAxU,GAAA,EAAAgN,GAAA;MACA,IAAAhY,KAAA;MACA;MACA,IAAA+O,OAAA,CAAAiJ,GAAA,CAAAhY,KAAA;QACA,SAAAyf,IAAA,IAAAzH,GAAA,CAAAhY,KAAA;UACA,IAAAgY,GAAA,CAAAhY,KAAA,CAAAuF,cAAA,CAAAka,IAAA;YACAzf,KAAA,CAAAyf,IAAA,SAAAtL,YAAA,CAAA6D,GAAA,EAAAA,GAAA,CAAAhY,KAAA,CAAAyf,IAAA;UACA;QACA;MACA;MACA;MACA,IAAAzH,GAAA,CAAA9X,IAAA,KAAAvB,SAAA,CAAAsI,MAAA,KAAA+Q,GAAA,CAAAL,UAAA,aAAAK,GAAA,CAAAN,WAAA;QACA1X,KAAA;MACA;;MAEA;MACAA,KAAA,sBAAAgY,GAAA,6BAAAA,GAAA,eAAAhY,KAAA;;MAEA;MACA,IAAAA,KAAA;QACAA,KAAA,qBAAAoE,cAAA,QAAA0I,OAAA,CAAA9B,GAAA,CAAAnC,EAAA;MACA;;MAEA;MACA,SAAA5H,QAAA;QACAjB,KAAA;MACA;MAEA,OAAAA,KAAA;IACA;IAEA,mCACAwO,iBAAA,WAAAA,kBAAA;MAAA,IAAAlJ,GAAA,GAAAyD,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MAAA,IAAA2W,EAAA,GAAA3W,SAAA,CAAAlE,MAAA,QAAAkE,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,IAAA4W,OAAA,GAAAxV,IAAA,CAAAyV,GAAA;MACA,IAAAC,QAAA,QAAAjc,eAAA,CAAA8B,GAAA,CAAAJ,GAAA;MACA,KAAAua,QAAA;QACAA,QAAA,GAAAF,OAAA;QACA,KAAA/b,eAAA,CAAAkc,GAAA,CAAAxa,GAAA,EAAAqa,OAAA;QACA;MACA;MACA,IAAAI,QAAA,GAAAJ,OAAA,GAAAE,QAAA;MACA,IAAAE,QAAA,IAAAL,EAAA;QACA,KAAAM,QAAA,CAAA7M,IAAA;QACA;MACA;MACA,KAAAvP,eAAA,CAAAkc,GAAA,CAAAxa,GAAA,EAAAqa,OAAA;MACA;IACA;IAEA,6BACAM,gBAAA,WAAAA,iBAAAjV,GAAA,EAAAlF,MAAA;MACA,IAAAoa,OAAA;MACA,IAAApa,MAAA,CAAAqa,KAAA;QACAD,OAAA,0BAAA1a,WAAA;MACA;MACA,OAAA0a,OAAA;IACA;IACA,aACAE,eAAA,WAAAA,gBAAAnV,KAAA;MACA,KAAAA,KAAA;QACA,OAAA0R,MAAA,CAAA0D,OAAA;MACA;QACA,OAAApV,KAAA;MACA;IACA;IACA,aACAqV,gBAAA,WAAAA,iBAAAzX,EAAA;MACA,IAAAiI,aAAA,QAAAnO,YAAA,CAAAkG,EAAA;MACA,IAAAiI,aAAA;QACA,IAAAA,aAAA;UACA,OAAAA,aAAA;QACA,WAAAA,aAAA;UACA,IAAAyP,QAAA,GAAAzP,aAAA,SAAA9E,KAAA;UACA,OAAA5M,oBAAA,CAAAmhB,QAAA;QACA;MACA;MACA;IACA;IACA,cACAC,aAAA,WAAAA,cAAAvV,KAAA,EAAAwV,MAAA,EAAA5X,EAAA,EAAAmC,GAAA,EAAAlF,MAAA,EAAA0H,KAAA;MACA;MACA,IAAAkT,UAAA,GAAAzV,KAAA;MACA,IAAAwV,MAAA;QACA,IAAApO,MAAA,QAAAvK,UAAA,CAAAkD,GAAA,CAAAnC,EAAA;QACA,IAAA8X,YAAA;UAAAtO,MAAA,EAAAA,MAAA;UAAAxC,MAAA;QAAA;QACA7O,MAAA,CAAA6V,IAAA,CAAA4J,MAAA,EAAA5a,OAAA,WAAAP,GAAA;UACA;UACA,IAAAA,GAAA,KAAAQ,MAAA,CAAAR,GAAA;YACAob,UAAA,GAAAD,MAAA,CAAAnb,GAAA;UACA;YACAqb,YAAA,CAAA9Q,MAAA,CAAAvK,GAAA,IAAAmb,MAAA,CAAAnb,GAAA;UACA;QACA;QACA,IAAAtE,MAAA,CAAA6V,IAAA,CAAA8J,YAAA,EAAA9b,MAAA;UACA,KAAAsN,SAAA,EAAAwO,YAAA;QACA;MACA;MACA,KAAA7N,WAAA,MAAAlQ,WAAA,EAAAiG,EAAA,EAAA6X,UAAA;MACA;MACA,KAAAnM,gBAAA,CAAAmM,UAAA,EAAA1V,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA;MACA,KAAAyP,eAAA,UAAAhI,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA,iBACA2V,aAAA,WAAAA,cAAA/X,EAAA;MACA,YAAAjG,WAAA,CAAAiG,EAAA;IACA;IACAgY,iBAAA,WAAAA,kBAAA5V,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAA/C,WAAA,QAAAgX,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAA6N,KAAA,EAAAxB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA6V,uBAAA,WAAAA,wBAAA7V,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAA7C,iBAAA,QAAA8W,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAAuI,UAAA,EAAA8D,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA8V,wBAAA,WAAAA,yBAAA9V,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAA5C,kBAAA,QAAA6W,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAAwI,UAAA,EAAA6D,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACA+V,6BAAA,WAAAA,8BAAA/V,KAAA,EAAApC,EAAA,EAAAmC,GAAA,EAAAlF,MAAA;MACA,KAAA3C,uBAAA,QAAA4W,gBAAA,CAAA9O,KAAA,EAAApC,EAAA;MACA,KAAA0L,gBAAA,CAAAtJ,KAAA,EAAAD,GAAA,EAAAlF,MAAA,OAAAvC,YAAA;MACA,KAAAyP,eAAA,CAAArU,SAAA,CAAA8N,gBAAA,EAAAzB,GAAA,EAAAlF,MAAA,EAAAmF,KAAA;IACA;IACAgW,YAAA,WAAAA,aAAAzJ,KAAA,EAAAC,MAAA;MACA,OAAAA,MAAA,CAAAG,gBAAA,CAAAC,QAAA,IAAArQ,IAAA,CAAAsQ,WAAA,GAAAhL,OAAA,CAAA0K,KAAA,CAAAM,WAAA;IACA;IACAoJ,eAAA,WAAAA,gBAAAjE,OAAA,EAAAkE,GAAA;MACA,KAAAlE,OAAA,IAAAA,OAAA,CAAApY,MAAA;QACA;MACA;MACA,IAAAoY,OAAA,CAAApY,MAAA,GAAAsc,GAAA;QACA,OAAAlE,OAAA,CAAAmE,MAAA,IAAAD,GAAA;MACA;MACA,OAAAlE,OAAA;IACA;IAEA;IAEA;IACAoE,sBAAA,WAAAA,uBAAApW,KAAA,EAAAD,GAAA,EAAAgN,GAAA;MACA;MACA,OAAA9Y,cAAA,CAAA8Y,GAAA,CAAA5Q,OAAA,EAAA6D,KAAA;IACA;IAEA;IACAqW,SAAA,WAAAA,UAAAtW,GAAA,EAAAgN,GAAA;MACA,SAAA3W,UAAA;QACA;MACA;MACA,IAAAkgB,OAAA,QAAA5d,eAAA,CAAAqH,GAAA,CAAAnC,EAAA;MACA,UAAA0Y,OAAA,IAAAA,OAAA,CAAAvJ,GAAA,CAAA1S,GAAA;IACA;IAEA;IAEA;IACAkc,aAAA,WAAAA,cAAAhd,KAAA;MACA,SAAAnD,UAAA,IAAAL,MAAA,CAAA6V,IAAA,MAAAlT,eAAA,EAAAkB,MAAA;QACA;MACA;MACA;MACA,IAAAuD,MAAA,GAAA5D,KAAA,CAAA4D,MAAA;MACA,KAAAA,MAAA;QACA;MACA;MACA,IAAAyT,SAAA,GAAAzT,MAAA,CAAAyT,SAAA;MACA,WAAAA,SAAA;QACA;QACA,IAAAA,SAAA,CAAAxO,QAAA,iBAAAwO,SAAA,CAAAxO,QAAA;UACA;QACA;QACA;QACA,IAAAwO,SAAA,CAAAxO,QAAA;UACA;QACA;MACA;;MAEA;MACA,IAAAH,IAAA,GAAApO,YAAA,CAAA0F,KAAA;MAAA,IAAAid,WAAA,GAAA1R,0BAAA,CACA7C,IAAA;QAAAwU,OAAA;MAAA;QAAA,KAAAD,WAAA,CAAApR,CAAA,MAAAqR,OAAA,GAAAD,WAAA,CAAAnR,CAAA,IAAAC,IAAA;UAAA,IAAAoR,CAAA,GAAAD,OAAA,CAAAzW,KAAA;UACA;UACA,KAAA0W,CAAA,CAAA9Y,EAAA,QAAAyT,UAAA,IAAA3a,MAAA,MAAAD,MAAA;YACA;UACA;UACA,IAAAkgB,UAAA,GAAAD,CAAA,CAAA9F,SAAA;UACA+F,UAAA,UAAAA,UAAA,gBAAAA,UAAA,GAAAA,UAAA,CAAAxW,QAAA;;UAEA;;UAEA;UACA,IAAAwW,UAAA,CAAAvU,QAAA;YACA;UACA;UACA;UACA,IAAAuU,UAAA,CAAAvU,QAAA;YACA;UACA;UACA;UACA,IAAAuU,UAAA,CAAAvU,QAAA,qBAAAuU,UAAA,CAAAvU,QAAA;YACA;UACA;QAEA;QACA;MAAA,SAAAoD,GAAA;QAAAgR,WAAA,CAAA/Q,CAAA,CAAAD,GAAA;MAAA;QAAAgR,WAAA,CAAA9Q,CAAA;MAAA;MACA,KAAAhN,eAAA;IACA;IAEA;IACAgF,gBAAA,WAAAA,iBAAA;MACAgU,MAAA,CAAAhU,gBAAA,iBAAA6Y,aAAA;IACA;IACA;IACAK,mBAAA,WAAAA,oBAAA;MACAlF,MAAA,CAAAkF,mBAAA,iBAAAL,aAAA;IACA;IACA;IAEA;IACAxa,eAAA,WAAAA,gBAAA;MACA,UAAA1F,OAAA,SAAAA,OAAA,CAAAuD,MAAA;QACA,KAAAd,WAAA;MACA;QACA,IAAA+d,GAAA,QAAAxgB,OAAA;QACA,KAAAwgB,GAAA,CAAA5b,QAAA;UACA4b,GAAA;QACA;QACA,KAAA/d,WAAA,GAAAxE,aAAA,CAAAuiB,GAAA;MACA;IACA;IACA;IACAC,gBAAA,WAAAA,iBAAAC,IAAA;MACA,UAAAje,WAAA,SAAAA,WAAA,CAAAc,MAAA;QACA;MACA;QACA,YAAAd,WAAA,CAAA+I,OAAA,CAAAkV,IAAA;MACA;IACA;EAEA;EACAC,aAAA,WAAAA,cAAA;IACA,KAAAJ,mBAAA;IACA,KAAA9hB,wBAAA;EACA;AAEA","ignoreList":[]}]}