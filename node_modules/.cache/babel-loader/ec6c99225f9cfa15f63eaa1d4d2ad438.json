{"remainingRequest":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!D:\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\知识库系统\\admin\\src\\components\\jeecg\\JVxeTable\\utils\\cellUtils.js","dependencies":[{"path":"D:\\知识库系统\\admin\\src\\components\\jeecg\\JVxeTable\\utils\\cellUtils.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { AllCells, JVXETypes } from '@/components/jeecg/JVxeTable';\nimport JVxeCellMixins from '../mixins/JVxeCellMixins';\nexport var JVXERenderType = {\n  editer: 'editer',\n  spaner: 'spaner',\n  default: 'default'\n};\n\n/** 安装所有vxe组件 */\nexport function installAllCell(VXETable) {\n  // 遍历所有组件批量注册\n  Object.keys(AllCells).forEach(function (type) {\n    return installOneCell(VXETable, type);\n  });\n}\n\n/** 安装单个vxe组件 */\nexport function installOneCell(VXETable, type) {\n  var switches = getEnhancedMixins(type, 'switches');\n  if (switches.editRender === false) {\n    installCellRender(VXETable, type, AllCells[type]);\n  } else {\n    installEditRender(VXETable, type, AllCells[type]);\n  }\n}\n\n/** 注册可编辑组件 */\nexport function installEditRender(VXETable, type, comp, spanComp) {\n  // 获取当前组件的增强\n  var enhanced = getEnhancedMixins(type);\n  // span 组件\n  if (!spanComp && AllCells[type + ':span']) {\n    spanComp = AllCells[type + ':span'];\n  } else {\n    spanComp = AllCells[JVXETypes.normal];\n  }\n  // 添加渲染\n  VXETable.renderer.add(JVXETypes._prefix + type, _objectSpread({\n    // 可编辑模板\n    renderEdit: createRender(comp, enhanced, JVXERenderType.editer),\n    // 显示模板\n    renderCell: createRender(spanComp, enhanced, JVXERenderType.spaner)\n  }, enhanced.installOptions));\n}\n\n/** 注册普通组件 */\nexport function installCellRender(VXETable, type) {\n  var comp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AllCells[JVXETypes.normal];\n  // 获取当前组件的增强\n  var enhanced = getEnhancedMixins(type);\n  VXETable.renderer.add(JVXETypes._prefix + type, _objectSpread({\n    // 默认显示模板\n    renderDefault: createRender(comp, enhanced, JVXERenderType.default)\n  }, enhanced.installOptions));\n}\nfunction createRender(comp, enhanced, renderType) {\n  return function (h, renderOptions, params) {\n    return [h(comp, {\n      props: {\n        value: params.row[params.column.property],\n        row: params.row,\n        column: params.column,\n        params: params,\n        renderOptions: renderOptions,\n        renderType: renderType\n      }\n    })];\n  };\n}\n\n// 已混入的组件增强\nvar AllCellsMixins = new Map();\n\n/** 获取某个组件的增强 */\nexport function getEnhanced(type) {\n  var cell = AllCells[type];\n  if (cell && cell.enhanced) {\n    return cell.enhanced;\n  }\n  return null;\n}\n\n/**\n * 获取某个组件的增强（混入默认值）\n *\n * @param type JVXETypes\n * @param name 可空，增强名称，留空返回所有增强\n */\nexport function getEnhancedMixins(type, name) {\n  var getByName = function getByName(e) {\n    return name ? e[name] : e;\n  };\n  if (AllCellsMixins.has(type)) {\n    return getByName(AllCellsMixins.get(type));\n  }\n  var defEnhanced = JVxeCellMixins.enhanced;\n  var enhanced = getEnhanced(type);\n  if (enhanced) {\n    Object.keys(defEnhanced).forEach(function (key) {\n      var def = defEnhanced[key];\n      if (enhanced.hasOwnProperty(key)) {\n        // 方法如果存在就不覆盖\n        if (typeof def !== 'function' && typeof def !== 'string') {\n          enhanced[key] = Object.assign({}, def, enhanced[key]);\n        }\n      } else {\n        enhanced[key] = def;\n      }\n    });\n    AllCellsMixins.set(type, enhanced);\n    return getByName(enhanced);\n  }\n  AllCellsMixins.set(type, defEnhanced);\n  return getByName(defEnhanced);\n}\n\n/** 辅助方法：替换${...}变量 */\nexport function replaceProps(col, value) {\n  if (value && typeof value === 'string') {\n    var text = value;\n    text = text.replace(/\\${title}/g, col.title);\n    text = text.replace(/\\${key}/g, col.key);\n    text = text.replace(/\\${defaultValue}/g, col.defaultValue);\n    return text;\n  }\n  return value;\n}",{"version":3,"names":["AllCells","JVXETypes","JVxeCellMixins","JVXERenderType","editer","spaner","default","installAllCell","VXETable","Object","keys","forEach","type","installOneCell","switches","getEnhancedMixins","editRender","installCellRender","installEditRender","comp","spanComp","enhanced","normal","renderer","add","_prefix","_objectSpread","renderEdit","createRender","renderCell","installOptions","arguments","length","undefined","renderDefault","renderType","h","renderOptions","params","props","value","row","column","property","AllCellsMixins","Map","getEnhanced","cell","name","getByName","e","has","get","defEnhanced","key","def","hasOwnProperty","assign","set","replaceProps","col","text","replace","title","defaultValue"],"sources":["D:/知识库系统/admin/src/components/jeecg/JVxeTable/utils/cellUtils.js"],"sourcesContent":["import { AllCells, JVXETypes } from '@/components/jeecg/JVxeTable'\nimport JVxeCellMixins from '../mixins/JVxeCellMixins'\n\nexport const JVXERenderType = {\n  editer: 'editer',\n  spaner: 'spaner',\n  default: 'default',\n}\n\n/** 安装所有vxe组件 */\nexport function installAllCell(VXETable) {\n  // 遍历所有组件批量注册\n  Object.keys(AllCells).forEach(type => installOneCell(VXETable, type))\n}\n\n/** 安装单个vxe组件 */\nexport function installOneCell(VXETable, type) {\n  const switches = getEnhancedMixins(type, 'switches')\n  if (switches.editRender === false) {\n    installCellRender(VXETable, type, AllCells[type])\n  } else {\n    installEditRender(VXETable, type, AllCells[type])\n  }\n}\n\n/** 注册可编辑组件 */\nexport function installEditRender(VXETable, type, comp, spanComp) {\n  // 获取当前组件的增强\n  const enhanced = getEnhancedMixins(type)\n  // span 组件\n  if (!spanComp && AllCells[type + ':span']) {\n    spanComp = AllCells[type + ':span']\n  } else {\n    spanComp = AllCells[JVXETypes.normal]\n  }\n  // 添加渲染\n  VXETable.renderer.add(JVXETypes._prefix + type, {\n    // 可编辑模板\n    renderEdit: createRender(comp, enhanced, JVXERenderType.editer),\n    // 显示模板\n    renderCell: createRender(spanComp, enhanced, JVXERenderType.spaner),\n    // 增强注册\n    ...enhanced.installOptions,\n  })\n}\n\n/** 注册普通组件 */\nexport function installCellRender(VXETable, type, comp = AllCells[JVXETypes.normal]) {\n  // 获取当前组件的增强\n  const enhanced = getEnhancedMixins(type)\n  VXETable.renderer.add(JVXETypes._prefix + type, {\n    // 默认显示模板\n    renderDefault: createRender(comp, enhanced, JVXERenderType.default),\n    // 增强注册\n    ...enhanced.installOptions,\n  })\n}\n\nfunction createRender(comp, enhanced, renderType) {\n  return function (h, renderOptions, params) {\n    return [h(comp, {\n      props: {\n        value: params.row[params.column.property],\n        row: params.row,\n        column: params.column,\n        params: params,\n        renderOptions: renderOptions,\n        renderType: renderType,\n      }\n    })]\n  }\n}\n\n// 已混入的组件增强\nconst AllCellsMixins = new Map()\n\n/** 获取某个组件的增强 */\nexport function getEnhanced(type) {\n  let cell = AllCells[type]\n  if (cell && cell.enhanced) {\n    return cell.enhanced\n  }\n  return null\n}\n\n/**\n * 获取某个组件的增强（混入默认值）\n *\n * @param type JVXETypes\n * @param name 可空，增强名称，留空返回所有增强\n */\nexport function getEnhancedMixins(type, name) {\n  const getByName = (e) => name ? e[name] : e\n  if (AllCellsMixins.has(type)) {\n    return getByName(AllCellsMixins.get(type))\n  }\n  let defEnhanced = JVxeCellMixins.enhanced\n  let enhanced = getEnhanced(type)\n  if (enhanced) {\n    Object.keys(defEnhanced).forEach(key => {\n      let def = defEnhanced[key]\n      if (enhanced.hasOwnProperty(key)) {\n        // 方法如果存在就不覆盖\n        if (typeof def !== 'function' && typeof def !== 'string') {\n          enhanced[key] = Object.assign({}, def, enhanced[key])\n        }\n      } else {\n        enhanced[key] = def\n      }\n    })\n    AllCellsMixins.set(type, enhanced)\n    return getByName(enhanced)\n  }\n  AllCellsMixins.set(type, defEnhanced)\n  return getByName(defEnhanced)\n}\n\n\n/** 辅助方法：替换${...}变量 */\nexport function replaceProps(col, value) {\n  if (value && typeof value === 'string') {\n    let text = value\n    text = text.replace(/\\${title}/g, col.title)\n    text = text.replace(/\\${key}/g, col.key)\n    text = text.replace(/\\${defaultValue}/g, col.defaultValue)\n    return text\n  }\n  return value\n}\n"],"mappings":"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","ignoreList":[]}]}