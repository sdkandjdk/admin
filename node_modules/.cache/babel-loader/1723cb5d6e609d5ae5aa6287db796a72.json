{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work-25\\知识库系统\\admin\\src\\views\\modules\\monitor\\RedisInfo.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\views\\modules\\monitor\\RedisInfo.vue","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nimport moment from 'moment';\nimport { getAction } from '@/api/manage';\nimport AreaChartTy from '@/components/chart/AreaChartTy';\nexport default {\n  name: 'RedisInfo',\n  components: {\n    AreaChartTy: AreaChartTy\n  },\n  data: function data() {\n    return {\n      loading: true,\n      tableLoading: true,\n      // 定时器ID\n      timer: null,\n      // 定时器周期\n      millisec: 3000,\n      // Key 实时数量\n      key: {\n        title: 'Radis Key 实时数量（个）',\n        dataSource: [],\n        y: '数量（个）',\n        height: 340,\n        min: 0,\n        max: 100,\n        color: '#FF6987',\n        lineSize: 8,\n        lineColor: '#DC143C'\n      },\n      // 内存实时占用情况\n      memory: {\n        title: 'Radis 内存实时占用情况（KB）',\n        dataSource: [],\n        y: '内存（KB）',\n        min: 0,\n        max: 3000,\n        height: 340,\n        lineSize: 8\n      },\n      redisInfo: [],\n      columns: [{\n        title: 'Key',\n        align: 'center',\n        dataIndex: 'key'\n      }, {\n        title: 'Description',\n        align: 'left',\n        dataIndex: 'description'\n      }, {\n        title: 'Value',\n        align: 'center',\n        dataIndex: 'value'\n      }],\n      url: {\n        keysSize: '/sys/actuator/redis/keysSize',\n        memoryInfo: '/sys/actuator/redis/memoryInfo',\n        info: '/sys/actuator/redis/info'\n      },\n      path: '/monitor/redis/info'\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.openTimer();\n    this.loadRedisInfo();\n    setTimeout(function () {\n      _this.loadData();\n    }, 1000);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.closeTimer();\n  },\n  methods: {\n    /** 开启定时器 */openTimer: function openTimer() {\n      var _this2 = this;\n      this.loadData();\n      this.closeTimer();\n      this.timer = setInterval(function () {\n        if (_this2.$route.path === _this2.path) {\n          _this2.loadData();\n        }\n      }, this.millisec);\n    },\n    /** 关闭定时器 */closeTimer: function closeTimer() {\n      if (this.timer) clearInterval(this.timer);\n    },\n    /** 查询数据 */loadData: function loadData() {\n      var _this3 = this;\n      Promise.all([getAction(this.url.keysSize), getAction(this.url.memoryInfo)]).then(function (res) {\n        var time = moment().format('hh:mm:ss');\n        var _res = _slicedToArray(res, 2),\n          currentSize = _res[0].dbSize,\n          memoryInfo = _res[1];\n        var currentMemory = memoryInfo.used_memory / 1000;\n\n        // push 数据\n        _this3.key.dataSource.push({\n          x: time,\n          y: currentSize\n        });\n        _this3.memory.dataSource.push({\n          x: time,\n          y: currentMemory\n        });\n        // 最大长度为6\n        if (_this3.key.dataSource.length > 6) {\n          _this3.key.dataSource.splice(0, 1);\n          _this3.memory.dataSource.splice(0, 1);\n        }\n\n        // 计算 Key 最大最小值\n        var keyPole = _this3.getMaxAndMin(_this3.key.dataSource, 'y');\n        _this3.key.max = Math.floor(keyPole[0]) + 10;\n        _this3.key.min = Math.floor(keyPole[1]) - 10;\n        if (_this3.key.min < 0) _this3.key.min = 0;\n\n        // 计算 Memory 最大最小值\n        var memoryPole = _this3.getMaxAndMin(_this3.memory.dataSource, 'y');\n        _this3.memory.max = Math.floor(memoryPole[0]) + 100;\n        _this3.memory.min = Math.floor(memoryPole[1]) - 100;\n        if (_this3.memory.min < 0) _this3.memory.min = 0;\n      }).catch(function (e) {\n        console.error(e);\n        _this3.closeTimer();\n        _this3.$message.error('获取 Redis 信息失败');\n      }).finally(function () {\n        _this3.loading = false;\n      });\n    },\n    // 获取一组数据中最大和最小的值\n    getMaxAndMin: function getMaxAndMin(dataSource, field) {\n      var maxValue = null,\n        minValue = null;\n      dataSource.forEach(function (item) {\n        var value = Number.parseInt(item[field]);\n        // max\n        if (maxValue == null) {\n          maxValue = value;\n        } else if (value > maxValue) {\n          maxValue = value;\n        }\n        // min\n        if (minValue == null) {\n          minValue = value;\n        } else if (value < minValue) {\n          minValue = value;\n        }\n      });\n      return [maxValue, minValue];\n    },\n    loadRedisInfo: function loadRedisInfo() {\n      var _this4 = this;\n      this.tableLoading = true;\n      getAction(this.url.info).then(function (res) {\n        _this4.redisInfo = res.result;\n      }).finally(function () {\n        _this4.tableLoading = false;\n      });\n    }\n  }\n};",{"version":3,"names":["moment","getAction","AreaChartTy","name","components","data","loading","tableLoading","timer","millisec","key","title","dataSource","y","height","min","max","color","lineSize","lineColor","memory","redisInfo","columns","align","dataIndex","url","keysSize","memoryInfo","info","path","mounted","_this","openTimer","loadRedisInfo","setTimeout","loadData","beforeDestroy","closeTimer","methods","_this2","setInterval","$route","clearInterval","_this3","Promise","all","then","res","time","format","_res","_slicedToArray","currentSize","dbSize","currentMemory","used_memory","push","x","length","splice","keyPole","getMaxAndMin","Math","floor","memoryPole","catch","e","console","error","$message","finally","field","maxValue","minValue","forEach","item","value","Number","parseInt","_this4","result"],"sources":["src/views/modules/monitor/RedisInfo.vue"],"sourcesContent":["<template>\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\n    <a-card>\n      <!-- Radis 信息实时监控 -->\n      <a-row :gutter=\"8\">\n        <a-col :sm=\"24\" :xl=\"12\">\n          <area-chart-ty v-bind=\"memory\"/>\n        </a-col>\n        <a-col :sm=\"24\" :xl=\"12\">\n          <area-chart-ty v-bind=\"key\"/>\n        </a-col>\n      </a-row>\n\n      <h3>Redis 详细信息</h3>\n      <a-table\n        :loading=\"tableLoading\"\n        :columns=\"columns\"\n        :dataSource=\"redisInfo\"\n        :pagination=\"false\"/>\n\n    </a-card>\n  </a-skeleton>\n</template>\n<script>\n  import moment from 'moment'\n  import { getAction } from '@/api/manage'\n  import AreaChartTy from '@/components/chart/AreaChartTy'\n\n  export default {\n    name: 'RedisInfo',\n    components: {\n      AreaChartTy\n    },\n    data() {\n      return {\n        loading: true,\n        tableLoading: true,\n        // 定时器ID\n        timer: null,\n        // 定时器周期\n        millisec: 3000,\n        // Key 实时数量\n        key: {\n          title: 'Radis Key 实时数量（个）',\n          dataSource: [],\n          y: '数量（个）',\n          height: 340,\n          min: 0,\n          max: 100,\n          color: '#FF6987',\n          lineSize: 8,\n          lineColor: '#DC143C'\n        },\n        // 内存实时占用情况\n        memory: {\n          title: 'Radis 内存实时占用情况（KB）',\n          dataSource: [],\n          y: '内存（KB）',\n          min: 0,\n          max: 3000,\n          height: 340,\n          lineSize: 8\n        },\n        redisInfo: [],\n        columns: [{\n          title: 'Key',\n          align: 'center',\n          dataIndex: 'key'\n        }, {\n          title: 'Description',\n          align: 'left',\n          dataIndex: 'description'\n        }, {\n          title: 'Value',\n          align: 'center',\n          dataIndex: 'value'\n        }],\n        url: {\n          keysSize: '/sys/actuator/redis/keysSize',\n          memoryInfo: '/sys/actuator/redis/memoryInfo',\n          info: '/sys/actuator/redis/info'\n        },\n        path: '/monitor/redis/info'\n      }\n    },\n    mounted() {\n      this.openTimer()\n      this.loadRedisInfo()\n      setTimeout(() => {\n        this.loadData()\n      }, 1000)\n    },\n    beforeDestroy() {\n      this.closeTimer()\n    },\n    methods: {\n\n      /** 开启定时器 */\n      openTimer() {\n        this.loadData()\n        this.closeTimer()\n        this.timer = setInterval(() => {\n          if (this.$route.path === this.path) {\n            this.loadData()\n          }\n        }, this.millisec)\n      },\n\n      /** 关闭定时器 */\n      closeTimer() {\n        if (this.timer) clearInterval(this.timer)\n      },\n\n      /** 查询数据 */\n      loadData() {\n        Promise.all([\n          getAction(this.url.keysSize),\n          getAction(this.url.memoryInfo)\n        ]).then((res) => {\n          let time = moment().format('hh:mm:ss')\n\n          let [{ dbSize: currentSize }, memoryInfo] = res\n          let currentMemory = memoryInfo.used_memory / 1000\n\n          // push 数据\n          this.key.dataSource.push({ x: time, y: currentSize })\n          this.memory.dataSource.push({ x: time, y: currentMemory })\n          // 最大长度为6\n          if (this.key.dataSource.length > 6) {\n            this.key.dataSource.splice(0, 1)\n            this.memory.dataSource.splice(0, 1)\n          }\n\n          // 计算 Key 最大最小值\n          let keyPole = this.getMaxAndMin(this.key.dataSource, 'y')\n          this.key.max = Math.floor(keyPole[0]) + 10\n          this.key.min = Math.floor(keyPole[1]) - 10\n          if (this.key.min < 0) this.key.min = 0\n\n          // 计算 Memory 最大最小值\n          let memoryPole = this.getMaxAndMin(this.memory.dataSource, 'y')\n          this.memory.max = Math.floor(memoryPole[0]) + 100\n          this.memory.min = Math.floor(memoryPole[1]) - 100\n          if (this.memory.min < 0) this.memory.min = 0\n\n        }).catch((e) => {\n          console.error(e)\n          this.closeTimer()\n          this.$message.error('获取 Redis 信息失败')\n        }).finally(() => {\n          this.loading = false\n        })\n\n      },\n\n      // 获取一组数据中最大和最小的值\n      getMaxAndMin(dataSource, field) {\n        let maxValue = null, minValue = null\n        dataSource.forEach(item => {\n          let value = Number.parseInt(item[field])\n          // max\n          if (maxValue == null) {\n            maxValue = value\n          } else if (value > maxValue) {\n            maxValue = value\n          }\n          // min\n          if (minValue == null) {\n            minValue = value\n          } else if (value < minValue) {\n            minValue = value\n          }\n        })\n        return [maxValue, minValue]\n      },\n\n      loadRedisInfo() {\n        this.tableLoading = true\n        getAction(this.url.info).then((res) => {\n          this.redisInfo = res.result\n        }).finally(() => {\n          this.tableLoading = false\n        })\n      }\n\n    }\n  }\n</script>\n<style></style>\n"],"mappings":"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","ignoreList":[]}]}