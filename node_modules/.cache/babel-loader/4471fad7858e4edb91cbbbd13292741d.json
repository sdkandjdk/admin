{"remainingRequest":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!D:\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\知识库系统\\admin\\src\\utils\\JEditableTableUtil.js","dependencies":[{"path":"D:\\知识库系统\\admin\\src\\utils\\JEditableTableUtil.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nimport { getVmParentByName } from '@/utils/util';\nvar FormTypes = {\n  normal: 'normal',\n  input: 'input',\n  inputNumber: 'inputNumber',\n  checkbox: 'checkbox',\n  select: 'select',\n  date: 'date',\n  datetime: 'datetime',\n  upload: 'upload',\n  file: 'file',\n  image: 'image',\n  popup: 'popup',\n  list_multi: \"list_multi\",\n  sel_search: \"sel_search\",\n  sel_search_async: \"sel_search_async\",\n  radio: 'radio',\n  checkbox_meta: \"checkbox_meta\",\n  input_pop: 'input_pop',\n  sel_depart: 'sel_depart',\n  sel_user: 'sel_user',\n  slot: 'slot',\n  hidden: 'hidden'\n};\nvar VALIDATE_NO_PASSED = Symbol();\nexport { FormTypes, VALIDATE_NO_PASSED };\n\n/**\n * 获取指定的 $refs 对象\n * 有时候可能会遇到组件未挂载到页面中的情况，导致无法获取 $refs 中的某个对象\n * 这个方法可以等待挂载完成之后再返回 $refs 的对象，避免报错\n * @author sunjianlei\n **/\nexport function getRefPromise(vm, name) {\n  return new Promise(function (resolve) {\n    (function next() {\n      var ref = vm.$refs[name];\n      if (ref) {\n        resolve(ref);\n      } else {\n        setTimeout(function () {\n          next();\n        }, 10);\n      }\n    })();\n  });\n}\n\n/**\n * 一次性验证主表单和所有的次表单\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\nexport function validateFormAndTables(form, cases) {\n  if (!(form && typeof form.validateFields === 'function')) {\n    throw \"form \\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2Aform\\u5BF9\\u8C61\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(form));\n  }\n  var options = {};\n  return new Promise(function (resolve, reject) {\n    // 验证主表表单\n    form.validateFields(function (err, values) {\n      err ? reject({\n        error: VALIDATE_NO_PASSED\n      }) : resolve(values);\n    });\n  }).then(function (values) {\n    Object.assign(options, {\n      formValue: values\n    });\n    // 验证所有子表的表单\n    return validateTables(cases);\n  }).then(function (all) {\n    Object.assign(options, {\n      tablesValue: all\n    });\n    return Promise.resolve(options);\n  }).catch(function (error) {\n    return Promise.reject(error);\n  });\n}\n/**\n * 一次性验证主表单和所有的次表单(新版本)\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\nexport function validateFormModelAndTables(form, values, cases) {\n  if (!(form && typeof form.validate === 'function')) {\n    throw \"form \\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2Aform\\u5BF9\\u8C61\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(form));\n  }\n  var options = {};\n  return new Promise(function (resolve, reject) {\n    // 验证主表表单\n    form.validate(function (valid, obj) {\n      valid ? resolve(values) : reject({\n        error: VALIDATE_NO_PASSED\n      });\n    });\n  }).then(function (values) {\n    Object.assign(options, {\n      formValue: values\n    });\n    // 验证所有子表的表单\n    return validateTables(cases);\n  }).then(function (all) {\n    Object.assign(options, {\n      tablesValue: all\n    });\n    return Promise.resolve(options);\n  }).catch(function (error) {\n    return Promise.reject(error);\n  });\n}\n\n/**\n * 验证并获取一个或多个表格的所有值\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @param deleteTempId 是否删除临时ID，如果设为true，行编辑就不返回新增行的ID，ID需要后台生成\n * @author sunjianlei\n */\nexport function validateTables(cases, deleteTempId) {\n  if (!(cases instanceof Array)) {\n    throw \"'validateTables'\\u51FD\\u6570\\u7684'cases'\\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2A\\u6570\\u7EC4\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(cases));\n  }\n  return new Promise(function (resolve, reject) {\n    var tables = [];\n    var index = 0;\n    if (!cases || cases.length === 0) {\n      resolve();\n    }\n    (function next() {\n      var vm = cases[index];\n      vm.getAll(true, deleteTempId).then(function (all) {\n        tables[index] = all;\n        // 判断校验是否全部完成，完成返回成功，否则继续进行下一步校验\n        if (++index === cases.length) {\n          resolve(tables);\n        } else next();\n      }, function (error) {\n        // 出现未验证通过的表单，不再进行下一步校验，直接返回失败并跳转到该表格\n        if (error === VALIDATE_NO_PASSED) {\n          // 尝试获取tabKey，如果在ATab组件内即可获取\n          var paneKey;\n          var tabPane = getVmParentByName(vm, 'ATabPane');\n          if (tabPane) {\n            paneKey = tabPane.$vnode.key;\n          }\n          reject({\n            error: VALIDATE_NO_PASSED,\n            index: index,\n            paneKey: paneKey\n          });\n        }\n        reject(error);\n      });\n    })();\n  });\n}",{"version":3,"names":["getVmParentByName","FormTypes","normal","input","inputNumber","checkbox","select","date","datetime","upload","file","image","popup","list_multi","sel_search","sel_search_async","radio","checkbox_meta","input_pop","sel_depart","sel_user","slot","hidden","VALIDATE_NO_PASSED","Symbol","getRefPromise","vm","name","Promise","resolve","next","ref","$refs","setTimeout","validateFormAndTables","form","cases","validateFields","concat","_typeof","options","reject","err","values","error","then","Object","assign","formValue","validateTables","all","tablesValue","catch","validateFormModelAndTables","validate","valid","obj","deleteTempId","Array","tables","index","length","getAll","paneKey","tabPane","$vnode","key"],"sources":["D:/知识库系统/admin/src/utils/JEditableTableUtil.js"],"sourcesContent":["import { getVmParentByName } from '@/utils/util'\n\nconst FormTypes = {\n  normal: 'normal',\n  input: 'input',\n  inputNumber: 'inputNumber',\n  checkbox: 'checkbox',\n  select: 'select',\n  date: 'date',\n  datetime: 'datetime',\n  upload: 'upload',\n  file: 'file',\n  image: 'image',\n  popup:'popup',\n  list_multi:\"list_multi\",\n  sel_search:\"sel_search\",\n  sel_search_async:\"sel_search_async\",\n  radio:'radio',\n  checkbox_meta:\"checkbox_meta\",\n  input_pop:'input_pop',\n  sel_depart: 'sel_depart',\n  sel_user: 'sel_user',\n  slot: 'slot',\n  hidden: 'hidden'\n}\nconst VALIDATE_NO_PASSED = Symbol()\nexport { FormTypes, VALIDATE_NO_PASSED }\n\n/**\n * 获取指定的 $refs 对象\n * 有时候可能会遇到组件未挂载到页面中的情况，导致无法获取 $refs 中的某个对象\n * 这个方法可以等待挂载完成之后再返回 $refs 的对象，避免报错\n * @author sunjianlei\n **/\nexport function getRefPromise(vm, name) {\n  return new Promise((resolve) => {\n    (function next() {\n      let ref = vm.$refs[name]\n      if (ref) {\n        resolve(ref)\n      } else {\n        setTimeout(() => {\n          next()\n        }, 10)\n      }\n    })()\n  })\n}\n\n/**\n * 一次性验证主表单和所有的次表单\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\nexport function validateFormAndTables(form, cases) {\n\n  if (!(form && typeof form.validateFields === 'function')) {\n    throw `form 参数需要的是一个form对象，而传入的却是${typeof form}`\n  }\n\n  let options = {}\n  return new Promise((resolve, reject) => {\n    // 验证主表表单\n    form.validateFields((err, values) => {\n      err ? reject({ error: VALIDATE_NO_PASSED }) : resolve(values)\n    })\n  }).then(values => {\n    Object.assign(options, { formValue: values })\n    // 验证所有子表的表单\n    return validateTables(cases)\n  }).then(all => {\n    Object.assign(options, { tablesValue: all })\n    return Promise.resolve(options)\n  }).catch(error => {\n    return Promise.reject(error)\n  })\n\n}\n/**\n * 一次性验证主表单和所有的次表单(新版本)\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\nexport function validateFormModelAndTables(form,values, cases) {\n\n  if (!(form && typeof form.validate === 'function')) {\n    throw `form 参数需要的是一个form对象，而传入的却是${typeof form}`\n  }\n  let options = {}\n  return new Promise((resolve, reject) => {\n    // 验证主表表单\n    form.validate((valid,obj) => {\n      valid ?resolve(values):reject({ error: VALIDATE_NO_PASSED })\n    })\n  }).then(values => {\n    Object.assign(options, { formValue: values })\n    // 验证所有子表的表单\n    return validateTables(cases)\n  }).then(all => {\n    Object.assign(options, { tablesValue: all })\n    return Promise.resolve(options)\n  }).catch(error => {\n    return Promise.reject(error)\n  })\n\n}\n\n/**\n * 验证并获取一个或多个表格的所有值\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @param deleteTempId 是否删除临时ID，如果设为true，行编辑就不返回新增行的ID，ID需要后台生成\n * @author sunjianlei\n */\nexport function validateTables(cases, deleteTempId) {\n  if (!(cases instanceof Array)) {\n    throw `'validateTables'函数的'cases'参数需要的是一个数组，而传入的却是${typeof cases}`\n  }\n  return new Promise((resolve, reject) => {\n    let tables = []\n    let index = 0;\n    if(!cases || cases.length === 0){\n      resolve()\n    }\n    (function next() {\n      let vm = cases[index]\n      vm.getAll(true, deleteTempId).then(all => {\n        tables[index] = all\n        // 判断校验是否全部完成，完成返回成功，否则继续进行下一步校验\n        if (++index === cases.length) {\n          resolve(tables)\n        } else (\n          next()\n        )\n      }, error => {\n        // 出现未验证通过的表单，不再进行下一步校验，直接返回失败并跳转到该表格\n        if (error === VALIDATE_NO_PASSED) {\n          // 尝试获取tabKey，如果在ATab组件内即可获取\n          let paneKey;\n          let tabPane = getVmParentByName(vm, 'ATabPane')\n          if (tabPane) {\n            paneKey = tabPane.$vnode.key\n          }\n          reject({error: VALIDATE_NO_PASSED, index, paneKey})\n        }\n        reject(error)\n      })\n    })()\n  })\n}"],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,cAAc;AAEhD,IAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,OAAO;EACdC,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,UAAU;EACpBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAC,OAAO;EACbC,UAAU,EAAC,YAAY;EACvBC,UAAU,EAAC,YAAY;EACvBC,gBAAgB,EAAC,kBAAkB;EACnCC,KAAK,EAAC,OAAO;EACbC,aAAa,EAAC,eAAe;EAC7BC,SAAS,EAAC,WAAW;EACrBC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE;AACV,CAAC;AACD,IAAMC,kBAAkB,GAAGC,MAAM,CAAC,CAAC;AACnC,SAASvB,SAAS,EAAEsB,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,aAAaA,CAACC,EAAE,EAAEC,IAAI,EAAE;EACtC,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;IAC9B,CAAC,SAASC,IAAIA,CAAA,EAAG;MACf,IAAIC,GAAG,GAAGL,EAAE,CAACM,KAAK,CAACL,IAAI,CAAC;MACxB,IAAII,GAAG,EAAE;QACPF,OAAO,CAACE,GAAG,CAAC;MACd,CAAC,MAAM;QACLE,UAAU,CAAC,YAAM;UACfH,IAAI,CAAC,CAAC;QACR,CAAC,EAAE,EAAE,CAAC;MACR;IACF,CAAC,EAAE,CAAC;EACN,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,qBAAqBA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAEjD,IAAI,EAAED,IAAI,IAAI,OAAOA,IAAI,CAACE,cAAc,KAAK,UAAU,CAAC,EAAE;IACxD,wHAAAC,MAAA,CAAAC,OAAA,CAA0CJ,IAAI;EAChD;EAEA,IAAIK,OAAO,GAAG,CAAC,CAAC;EAChB,OAAO,IAAIZ,OAAO,CAAC,UAACC,OAAO,EAAEY,MAAM,EAAK;IACtC;IACAN,IAAI,CAACE,cAAc,CAAC,UAACK,GAAG,EAAEC,MAAM,EAAK;MACnCD,GAAG,GAAGD,MAAM,CAAC;QAAEG,KAAK,EAAErB;MAAmB,CAAC,CAAC,GAAGM,OAAO,CAACc,MAAM,CAAC;IAC/D,CAAC,CAAC;EACJ,CAAC,CAAC,CAACE,IAAI,CAAC,UAAAF,MAAM,EAAI;IAChBG,MAAM,CAACC,MAAM,CAACP,OAAO,EAAE;MAAEQ,SAAS,EAAEL;IAAO,CAAC,CAAC;IAC7C;IACA,OAAOM,cAAc,CAACb,KAAK,CAAC;EAC9B,CAAC,CAAC,CAACS,IAAI,CAAC,UAAAK,GAAG,EAAI;IACbJ,MAAM,CAACC,MAAM,CAACP,OAAO,EAAE;MAAEW,WAAW,EAAED;IAAI,CAAC,CAAC;IAC5C,OAAOtB,OAAO,CAACC,OAAO,CAACW,OAAO,CAAC;EACjC,CAAC,CAAC,CAACY,KAAK,CAAC,UAAAR,KAAK,EAAI;IAChB,OAAOhB,OAAO,CAACa,MAAM,CAACG,KAAK,CAAC;EAC9B,CAAC,CAAC;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,0BAA0BA,CAAClB,IAAI,EAACQ,MAAM,EAAEP,KAAK,EAAE;EAE7D,IAAI,EAAED,IAAI,IAAI,OAAOA,IAAI,CAACmB,QAAQ,KAAK,UAAU,CAAC,EAAE;IAClD,wHAAAhB,MAAA,CAAAC,OAAA,CAA0CJ,IAAI;EAChD;EACA,IAAIK,OAAO,GAAG,CAAC,CAAC;EAChB,OAAO,IAAIZ,OAAO,CAAC,UAACC,OAAO,EAAEY,MAAM,EAAK;IACtC;IACAN,IAAI,CAACmB,QAAQ,CAAC,UAACC,KAAK,EAACC,GAAG,EAAK;MAC3BD,KAAK,GAAE1B,OAAO,CAACc,MAAM,CAAC,GAACF,MAAM,CAAC;QAAEG,KAAK,EAAErB;MAAmB,CAAC,CAAC;IAC9D,CAAC,CAAC;EACJ,CAAC,CAAC,CAACsB,IAAI,CAAC,UAAAF,MAAM,EAAI;IAChBG,MAAM,CAACC,MAAM,CAACP,OAAO,EAAE;MAAEQ,SAAS,EAAEL;IAAO,CAAC,CAAC;IAC7C;IACA,OAAOM,cAAc,CAACb,KAAK,CAAC;EAC9B,CAAC,CAAC,CAACS,IAAI,CAAC,UAAAK,GAAG,EAAI;IACbJ,MAAM,CAACC,MAAM,CAACP,OAAO,EAAE;MAAEW,WAAW,EAAED;IAAI,CAAC,CAAC;IAC5C,OAAOtB,OAAO,CAACC,OAAO,CAACW,OAAO,CAAC;EACjC,CAAC,CAAC,CAACY,KAAK,CAAC,UAAAR,KAAK,EAAI;IAChB,OAAOhB,OAAO,CAACa,MAAM,CAACG,KAAK,CAAC;EAC9B,CAAC,CAAC;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,cAAcA,CAACb,KAAK,EAAEqB,YAAY,EAAE;EAClD,IAAI,EAAErB,KAAK,YAAYsB,KAAK,CAAC,EAAE;IAC7B,wJAAApB,MAAA,CAAAC,OAAA,CAA2DH,KAAK;EAClE;EACA,OAAO,IAAIR,OAAO,CAAC,UAACC,OAAO,EAAEY,MAAM,EAAK;IACtC,IAAIkB,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,CAAC;IACb,IAAG,CAACxB,KAAK,IAAIA,KAAK,CAACyB,MAAM,KAAK,CAAC,EAAC;MAC9BhC,OAAO,CAAC,CAAC;IACX;IACA,CAAC,SAASC,IAAIA,CAAA,EAAG;MACf,IAAIJ,EAAE,GAAGU,KAAK,CAACwB,KAAK,CAAC;MACrBlC,EAAE,CAACoC,MAAM,CAAC,IAAI,EAAEL,YAAY,CAAC,CAACZ,IAAI,CAAC,UAAAK,GAAG,EAAI;QACxCS,MAAM,CAACC,KAAK,CAAC,GAAGV,GAAG;QACnB;QACA,IAAI,EAAEU,KAAK,KAAKxB,KAAK,CAACyB,MAAM,EAAE;UAC5BhC,OAAO,CAAC8B,MAAM,CAAC;QACjB,CAAC,MACC7B,IAAI,CAAC,CAAC;MAEV,CAAC,EAAE,UAAAc,KAAK,EAAI;QACV;QACA,IAAIA,KAAK,KAAKrB,kBAAkB,EAAE;UAChC;UACA,IAAIwC,OAAO;UACX,IAAIC,OAAO,GAAGhE,iBAAiB,CAAC0B,EAAE,EAAE,UAAU,CAAC;UAC/C,IAAIsC,OAAO,EAAE;YACXD,OAAO,GAAGC,OAAO,CAACC,MAAM,CAACC,GAAG;UAC9B;UACAzB,MAAM,CAAC;YAACG,KAAK,EAAErB,kBAAkB;YAAEqC,KAAK,EAALA,KAAK;YAAEG,OAAO,EAAPA;UAAO,CAAC,CAAC;QACrD;QACAtB,MAAM,CAACG,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC;EACN,CAAC,CAAC;AACJ","ignoreList":[]}]}