{"remainingRequest":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\知识库系统\\admin\\src\\views\\modules\\monitor\\TomcatInfo.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\知识库系统\\admin\\src\\views\\modules\\monitor\\TomcatInfo.vue","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import moment from 'moment';\nimport { getAction } from '@/api/manage';\nmoment.locale('zh-cn');\nexport default {\n  data: function data() {\n    return {\n      time: '',\n      loading: true,\n      tableLoading: true,\n      columns: [{\n        title: '参数',\n        width: '30%',\n        dataIndex: 'param',\n        scopedSlots: {\n          customRender: 'param'\n        }\n      }, {\n        title: '描述',\n        width: '40%',\n        dataIndex: 'text',\n        scopedSlots: {\n          customRender: 'text'\n        }\n      }, {\n        title: '当前值',\n        width: '30%',\n        dataIndex: 'value',\n        scopedSlots: {\n          customRender: 'value'\n        }\n      }],\n      dataSource: [],\n      // 列表通过 textInfo 渲染出颜色、描述和单位\n      textInfo: {\n        'tomcat.sessions.created': {\n          color: 'green',\n          text: 'tomcat 已创建 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.expired': {\n          color: 'green',\n          text: 'tomcat 已过期 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.active.current': {\n          color: 'green',\n          text: 'tomcat 当前活跃 session 数',\n          unit: '个'\n        },\n        'tomcat.sessions.active.max': {\n          color: 'green',\n          text: 'tomcat 活跃 session 数峰值',\n          unit: '个'\n        },\n        'tomcat.sessions.rejected': {\n          color: 'green',\n          text: '超过session 最大配置后，拒绝的 session 个数',\n          unit: '个'\n        },\n        'tomcat.global.sent': {\n          color: 'purple',\n          text: '发送的字节数',\n          unit: 'bytes'\n        },\n        'tomcat.global.request.max': {\n          color: 'purple',\n          text: 'request 请求最长耗时',\n          unit: '秒'\n        },\n        'tomcat.global.request.count': {\n          color: 'purple',\n          text: '全局 request 请求次数',\n          unit: '次'\n        },\n        'tomcat.global.request.totalTime': {\n          color: 'purple',\n          text: '全局 request 请求总耗时',\n          unit: '秒'\n        },\n        'tomcat.servlet.request.max': {\n          color: 'cyan',\n          text: 'servlet 请求最长耗时',\n          unit: '秒'\n        },\n        'tomcat.servlet.request.count': {\n          color: 'cyan',\n          text: 'servlet 总请求次数',\n          unit: '次'\n        },\n        'tomcat.servlet.request.totalTime': {\n          color: 'cyan',\n          text: 'servlet 请求总耗时',\n          unit: '秒'\n        },\n        'tomcat.threads.current': {\n          color: 'pink',\n          text: 'tomcat 当前线程数（包括守护线程）',\n          unit: '个'\n        },\n        'tomcat.threads.config.max': {\n          color: 'pink',\n          text: 'tomcat 配置的线程最大数',\n          unit: '个'\n        }\n      },\n      // 当一条记录中需要取出多条数据的时候需要配置该字段\n      moreInfo: {\n        'tomcat.global.request': ['.count', '.totalTime'],\n        'tomcat.servlet.request': ['.count', '.totalTime']\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadTomcatInfo();\n  },\n  methods: {\n    handleClickUpdate: function handleClickUpdate() {\n      this.loadTomcatInfo();\n    },\n    loadTomcatInfo: function loadTomcatInfo() {\n      var _this = this;\n      this.tableLoading = true;\n      this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒');\n      Promise.all([getAction('actuator/metrics/tomcat.sessions.created'), getAction('actuator/metrics/tomcat.sessions.expired'), getAction('actuator/metrics/tomcat.sessions.active.current'), getAction('actuator/metrics/tomcat.sessions.active.max'), getAction('actuator/metrics/tomcat.sessions.rejected')\n      // 2.3.5.RELEASE 无此API\n      // getAction('actuator/metrics/tomcat.global.sent'),\n      // getAction('actuator/metrics/tomcat.global.request.max'),\n      // getAction('actuator/metrics/tomcat.global.request'),\n      // getAction('actuator/metrics/tomcat.threads.current'),\n      // getAction('actuator/metrics/tomcat.threads.config.max')\n      // 2.1.3.RELEASE 无此API\n      //getAction('actuator/metrics/tomcat.servlet.request'),\n      // getAction('actuator/metrics/tomcat.servlet.request.max'),\n      ]).then(function (res) {\n        var tomcatInfo = [];\n        res.forEach(function (value, id) {\n          var more = _this.moreInfo[value.name];\n          if (!(more instanceof Array)) {\n            more = [''];\n          }\n          more.forEach(function (item, idx) {\n            var param = value.name + item;\n            tomcatInfo.push({\n              id: param + id,\n              param: param,\n              text: 'false value',\n              value: value.measurements[idx].value\n            });\n          });\n        });\n        _this.dataSource = tomcatInfo;\n      }).catch(function (e) {\n        console.error(e);\n        _this.$message.error('获取Tomcat信息失败');\n      }).finally(function () {\n        _this.loading = false;\n        _this.tableLoading = false;\n      });\n    }\n  }\n};",{"version":3,"names":["moment","getAction","locale","data","time","loading","tableLoading","columns","title","width","dataIndex","scopedSlots","customRender","dataSource","textInfo","color","text","unit","moreInfo","mounted","loadTomcatInfo","methods","handleClickUpdate","_this","format","Promise","all","then","res","tomcatInfo","forEach","value","id","more","name","Array","item","idx","param","push","measurements","catch","e","console","error","$message","finally"],"sources":["src/views/modules/monitor/TomcatInfo.vue"],"sourcesContent":["<template>\n  <a-skeleton active :loading=\"loading\" :paragraph=\"{rows: 17}\">\n    <a-card :bordered=\"false\">\n\n      <a-alert type=\"info\" :showIcon=\"true\">\n        <div slot=\"message\">\n          上次更新时间：{{ this.time }}\n          <a-divider type=\"vertical\"/>\n          <a @click=\"handleClickUpdate\">立即更新</a>\n        </div>\n      </a-alert>\n\n      <a-table\n        rowKey=\"id\"\n        size=\"middle\"\n        :columns=\"columns\"\n        :dataSource=\"dataSource\"\n        :pagination=\"false\"\n        :loading=\"tableLoading\"\n        style=\"margin-top: 20px;\">\n\n        <template slot=\"param\" slot-scope=\"text, record\">\n          <a-tag :color=\"textInfo[record.param].color\">{{ text }}</a-tag>\n        </template>\n\n        <template slot=\"text\" slot-scope=\"text, record\">\n          {{ textInfo[record.param].text }}\n        </template>\n\n        <template slot=\"value\" slot-scope=\"text, record\">\n          {{ text }} {{ textInfo[record.param].unit }}\n        </template>\n\n      </a-table>\n\n    </a-card>\n  </a-skeleton>\n</template>\n<script>\n  import moment from 'moment'\n  import { getAction } from '@/api/manage'\n\n  moment.locale('zh-cn')\n\n  export default {\n    data() {\n      return {\n        time: '',\n        loading: true,\n        tableLoading: true,\n        columns: [{\n          title: '参数',\n          width: '30%',\n          dataIndex: 'param',\n          scopedSlots: { customRender: 'param' }\n        }, {\n          title: '描述',\n          width: '40%',\n          dataIndex: 'text',\n          scopedSlots: { customRender: 'text' }\n        }, {\n          title: '当前值',\n          width: '30%',\n          dataIndex: 'value',\n          scopedSlots: { customRender: 'value' }\n        }],\n        dataSource: [],\n        // 列表通过 textInfo 渲染出颜色、描述和单位\n        textInfo: {\n          'tomcat.sessions.created': { color: 'green', text: 'tomcat 已创建 session 数', unit: '个' },\n          'tomcat.sessions.expired': { color: 'green', text: 'tomcat 已过期 session 数', unit: '个' },\n          'tomcat.sessions.active.current': { color: 'green', text: 'tomcat 当前活跃 session 数', unit: '个' },\n          'tomcat.sessions.active.max': { color: 'green', text: 'tomcat 活跃 session 数峰值', unit: '个' },\n          'tomcat.sessions.rejected': { color: 'green', text: '超过session 最大配置后，拒绝的 session 个数', unit: '个' },\n\n          'tomcat.global.sent': { color: 'purple', text: '发送的字节数', unit: 'bytes' },\n          'tomcat.global.request.max': { color: 'purple', text: 'request 请求最长耗时', unit: '秒' },\n          'tomcat.global.request.count': { color: 'purple', text: '全局 request 请求次数', unit: '次' },\n          'tomcat.global.request.totalTime': { color: 'purple', text: '全局 request 请求总耗时', unit: '秒' },\n\n          'tomcat.servlet.request.max': { color: 'cyan', text: 'servlet 请求最长耗时', unit: '秒' },\n          'tomcat.servlet.request.count': { color: 'cyan', text: 'servlet 总请求次数', unit: '次' },\n          'tomcat.servlet.request.totalTime': { color: 'cyan', text: 'servlet 请求总耗时', unit: '秒' },\n\n          'tomcat.threads.current': { color: 'pink', text: 'tomcat 当前线程数（包括守护线程）', unit: '个' },\n          'tomcat.threads.config.max': { color: 'pink', text: 'tomcat 配置的线程最大数', unit: '个' }\n        },\n        // 当一条记录中需要取出多条数据的时候需要配置该字段\n        moreInfo: {\n          'tomcat.global.request': ['.count', '.totalTime'],\n          'tomcat.servlet.request': ['.count', '.totalTime']\n        }\n      }\n    },\n    mounted() {\n      this.loadTomcatInfo()\n    },\n    methods: {\n\n      handleClickUpdate() {\n        this.loadTomcatInfo()\n      },\n\n      loadTomcatInfo() {\n        this.tableLoading = true\n        this.time = moment().format('YYYY年MM月DD日 HH时mm分ss秒')\n        Promise.all([\n          getAction('actuator/metrics/tomcat.sessions.created'),\n          getAction('actuator/metrics/tomcat.sessions.expired'),\n          getAction('actuator/metrics/tomcat.sessions.active.current'),\n          getAction('actuator/metrics/tomcat.sessions.active.max'),\n          getAction('actuator/metrics/tomcat.sessions.rejected'),\n          // 2.3.5.RELEASE 无此API\n          // getAction('actuator/metrics/tomcat.global.sent'),\n          // getAction('actuator/metrics/tomcat.global.request.max'),\n          // getAction('actuator/metrics/tomcat.global.request'),\n          // getAction('actuator/metrics/tomcat.threads.current'),\n          // getAction('actuator/metrics/tomcat.threads.config.max')\n          // 2.1.3.RELEASE 无此API\n          //getAction('actuator/metrics/tomcat.servlet.request'),\n          // getAction('actuator/metrics/tomcat.servlet.request.max'),\n        ]).then((res) => {\n          let tomcatInfo = []\n          res.forEach((value, id) => {\n            let more = this.moreInfo[value.name]\n            if (!(more instanceof Array)) {\n              more = ['']\n            }\n            more.forEach((item, idx) => {\n              let param = value.name + item\n              tomcatInfo.push({\n                id: param + id, param,\n                text: 'false value',\n                value: value.measurements[idx].value\n              })\n            })\n          })\n          this.dataSource = tomcatInfo\n        }).catch((e) => {\n          console.error(e)\n          this.$message.error('获取Tomcat信息失败')\n        }).finally(() => {\n          this.loading = false\n          this.tableLoading = false\n        })\n      }\n    }\n  }\n</script>\n<style></style>\n"],"mappings":"AAuCA,OAAAA,MAAA;AACA,SAAAC,SAAA;AAEAD,MAAA,CAAAE,MAAA;AAEA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,IAAA;MACAC,OAAA;MACAC,YAAA;MACAC,OAAA;QACAC,KAAA;QACAC,KAAA;QACAC,SAAA;QACAC,WAAA;UAAAC,YAAA;QAAA;MACA;QACAJ,KAAA;QACAC,KAAA;QACAC,SAAA;QACAC,WAAA;UAAAC,YAAA;QAAA;MACA;QACAJ,KAAA;QACAC,KAAA;QACAC,SAAA;QACAC,WAAA;UAAAC,YAAA;QAAA;MACA;MACAC,UAAA;MACA;MACAC,QAAA;QACA;UAAAC,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QAEA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QAEA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QAEA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;QACA;UAAAF,KAAA;UAAAC,IAAA;UAAAC,IAAA;QAAA;MACA;MACA;MACAC,QAAA;QACA;QACA;MACA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,cAAA;EACA;EACAC,OAAA;IAEAC,iBAAA,WAAAA,kBAAA;MACA,KAAAF,cAAA;IACA;IAEAA,cAAA,WAAAA,eAAA;MAAA,IAAAG,KAAA;MACA,KAAAjB,YAAA;MACA,KAAAF,IAAA,GAAAJ,MAAA,GAAAwB,MAAA;MACAC,OAAA,CAAAC,GAAA,EACAzB,SAAA,8CACAA,SAAA,8CACAA,SAAA,qDACAA,SAAA,iDACAA,SAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAAA,CACA,EAAA0B,IAAA,WAAAC,GAAA;QACA,IAAAC,UAAA;QACAD,GAAA,CAAAE,OAAA,WAAAC,KAAA,EAAAC,EAAA;UACA,IAAAC,IAAA,GAAAV,KAAA,CAAAL,QAAA,CAAAa,KAAA,CAAAG,IAAA;UACA,MAAAD,IAAA,YAAAE,KAAA;YACAF,IAAA;UACA;UACAA,IAAA,CAAAH,OAAA,WAAAM,IAAA,EAAAC,GAAA;YACA,IAAAC,KAAA,GAAAP,KAAA,CAAAG,IAAA,GAAAE,IAAA;YACAP,UAAA,CAAAU,IAAA;cACAP,EAAA,EAAAM,KAAA,GAAAN,EAAA;cAAAM,KAAA,EAAAA,KAAA;cACAtB,IAAA;cACAe,KAAA,EAAAA,KAAA,CAAAS,YAAA,CAAAH,GAAA,EAAAN;YACA;UACA;QACA;QACAR,KAAA,CAAAV,UAAA,GAAAgB,UAAA;MACA,GAAAY,KAAA,WAAAC,CAAA;QACAC,OAAA,CAAAC,KAAA,CAAAF,CAAA;QACAnB,KAAA,CAAAsB,QAAA,CAAAD,KAAA;MACA,GAAAE,OAAA;QACAvB,KAAA,CAAAlB,OAAA;QACAkB,KAAA,CAAAjB,YAAA;MACA;IACA;EACA;AACA","ignoreList":[]}]}