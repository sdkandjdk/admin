{"remainingRequest":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\layouts\\TabLayout.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\src\\components\\layouts\\TabLayout.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\km_community-main\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport GlobalLayout from '@/components/page/GlobalLayout';\nimport Contextmenu from '@/components/menu/Contextmenu';\nimport { mixin, mixinDevice } from '@/utils/mixin.js';\nimport { triggerWindowResizeEvent } from '@/utils/util';\nimport Vue from 'vue';\nimport { CACHE_INCLUDED_ROUTES } from '@/store/mutation-types';\nvar indexKey = '/dashboard/analysis';\nexport default {\n  name: 'TabLayout',\n  components: {\n    GlobalLayout: GlobalLayout,\n    Contextmenu: Contextmenu\n  },\n  mixins: [mixin, mixinDevice],\n  data: function data() {\n    return {\n      pageList: [],\n      linkList: [],\n      activePage: '',\n      menuVisible: false,\n      menuItemList: [{\n        key: '4',\n        icon: 'reload',\n        text: '刷 新'\n      }, {\n        key: '1',\n        icon: 'arrow-left',\n        text: '关闭左侧'\n      }, {\n        key: '2',\n        icon: 'arrow-right',\n        text: '关闭右侧'\n      }, {\n        key: '3',\n        icon: 'close',\n        text: '关闭其它'\n      }],\n      reloadFlag: true\n    };\n  },\n  /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */provide: function provide() {\n    return {\n      closeCurrent: this.closeCurrent\n    };\n  },\n  /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n  computed: {\n    multipage: function multipage() {\n      //判断如果是手机模式，自动切换为单页面模式\n      if (this.isMobile()) {\n        return false;\n      } else {\n        return this.$store.state.app.multipage;\n      }\n    }\n  },\n  created: function created() {\n    if (this.$route.path != indexKey) {\n      this.addIndexToFirst();\n    }\n    // 复制一个route对象出来，不能影响原route\n    var currentRoute = Object.assign({}, this.$route);\n    currentRoute.meta = Object.assign({}, currentRoute.meta);\n    this.pageList.push(currentRoute);\n    this.linkList.push(currentRoute.fullPath);\n    this.activePage = currentRoute.fullPath;\n  },\n  mounted: function mounted() {},\n  watch: {\n    '$route': function $route(newRoute) {\n      //console.log(\"新的路由\",newRoute)\n      this.activePage = newRoute.fullPath;\n      if (!this.multipage) {\n        this.linkList = [newRoute.fullPath];\n        this.pageList = [Object.assign({}, newRoute)];\n        // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n      } else if (indexKey == newRoute.fullPath) {\n        //首页时 判断是否缓存 没有缓存 刷新之\n        if (newRoute.meta.keepAlive === false) {\n          this.routeReload();\n        }\n        // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n      } else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n        this.linkList.push(newRoute.fullPath);\n        this.pageList.push(Object.assign({}, newRoute));\n        //// update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\n        // if (newRoute.meta.keepAlive) {\n        //   this.routeReload()\n        // }\n        //// update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\n      } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n        var oldIndex = this.linkList.indexOf(newRoute.fullPath);\n        var oldPositionRoute = this.pageList[oldIndex];\n        this.pageList.splice(oldIndex, 1, Object.assign({}, newRoute, {\n          meta: oldPositionRoute.meta\n        }));\n      }\n    },\n    'activePage': function activePage(key) {\n      var index = this.linkList.lastIndexOf(key);\n      var waitRouter = this.pageList[index];\n      // 【TESTA-523】修复：不允许重复跳转路由异常\n      if (waitRouter.fullPath !== this.$route.fullPath) {\n        this.$router.push(Object.assign({}, waitRouter));\n      }\n      this.changeTitle(waitRouter.meta.title);\n    },\n    'multipage': function multipage(newVal) {\n      if (this.reloadFlag) {\n        if (!newVal) {\n          this.linkList = [this.$route.fullPath];\n          this.pageList = [this.$route];\n        }\n      }\n    },\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    device: function device() {\n      if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\n        this.addIndexToFirst();\n      }\n    } // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n  },\n  methods: {\n    // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    // 将首页添加到第一位\n    addIndexToFirst: function addIndexToFirst() {\n      this.pageList.splice(0, 0, {\n        name: 'dashboard-analysis',\n        path: indexKey,\n        fullPath: indexKey,\n        meta: {\n          icon: 'dashboard',\n          title: '首页'\n        }\n      });\n      this.linkList.splice(0, 0, indexKey);\n    },\n    // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\n    changeTitle: function changeTitle(title) {\n      var projectTitle = \"科亿知识库\";\n      // 首页特殊处理\n      if (this.$route.path === indexKey) {\n        document.title = projectTitle;\n      } else {\n        document.title = title + ' · ' + projectTitle;\n      }\n    },\n    // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\n    changePage: function changePage(key) {\n      this.activePage = key;\n    },\n    tabCallBack: function tabCallBack() {\n      this.$nextTick(function () {\n        //update-begin-author:taoyan date: 20201211 for:【新版】online报错 JT-100\n        setTimeout(function () {\n          //省市区组件里面给window绑定了个resize事件 导致切换页面的时候触发了他的resize，但是切换页面，省市区组件还没被销毁前就触发了该事件，导致控制台报错，加个延迟\n          triggerWindowResizeEvent();\n        }, 20);\n        //update-end-author:taoyan date: 20201211 for:【新版】online报错 JT-100\n      });\n    },\n    editPage: function editPage(key, action) {\n      this[action](key);\n    },\n    remove: function remove(key) {\n      if (key == indexKey) {\n        this.$message.warning('首页不能关闭!');\n        return;\n      }\n      if (this.pageList.length === 1) {\n        this.$message.warning('这是最后一页，不能再关闭了啦');\n        return;\n      }\n      console.log(\"this.pageList \", this.pageList);\n      var removeRoute = this.pageList.filter(function (item) {\n        return item.fullPath == key;\n      });\n      this.pageList = this.pageList.filter(function (item) {\n        return item.fullPath !== key;\n      });\n      var index = this.linkList.indexOf(key);\n      this.linkList = this.linkList.filter(function (item) {\n        return item !== key;\n      });\n      index = index >= this.linkList.length ? this.linkList.length - 1 : index;\n      this.activePage = this.linkList[index];\n\n      //update-begin--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\n      //关闭页面则从缓存cache_included_routes中删除路由，下次点击菜单会重新加载页面\n      var cacheRouterArray = Vue.ls.get(CACHE_INCLUDED_ROUTES) || [];\n      if (removeRoute && removeRoute[0]) {\n        var componentName = removeRoute[0].meta.componentName;\n        console.log(\"key: \", key);\n        console.log(\"componentName: \", componentName);\n        if (cacheRouterArray.includes(componentName)) {\n          cacheRouterArray.splice(cacheRouterArray.findIndex(function (item) {\n            return item === componentName;\n          }), 1);\n          Vue.ls.set(CACHE_INCLUDED_ROUTES, cacheRouterArray);\n        }\n      }\n      //update-end--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\n    },\n    onContextmenu: function onContextmenu(e) {\n      var pagekey = this.getPageKey(e.target);\n      if (pagekey !== null) {\n        e.preventDefault();\n        this.menuVisible = true;\n      }\n    },\n    getPageKey: function getPageKey(target, depth) {\n      depth = depth || 0;\n      if (depth > 2) {\n        return null;\n      }\n      var pageKey = target.getAttribute('pagekey');\n      pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null);\n      return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null);\n    },\n    onMenuSelect: function onMenuSelect(key, target) {\n      var pageKey = this.getPageKey(target);\n      switch (key) {\n        case '1':\n          this.closeLeft(pageKey);\n          break;\n        case '2':\n          this.closeRight(pageKey);\n          break;\n        case '3':\n          this.closeOthers(pageKey);\n          break;\n        case '4':\n          this.routeReload();\n          break;\n        default:\n          break;\n      }\n    },\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */closeCurrent: function closeCurrent() {\n      this.remove(this.activePage);\n    },\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */closeOthers: function closeOthers(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n      if (pageKey == indexKey || pageKey.indexOf('?ticke=') >= 0) {\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.activePage = this.linkList[0];\n      } else {\n        var indexContent = this.pageList.slice(0, 1)[0];\n        this.linkList = this.linkList.slice(index, index + 1);\n        this.pageList = this.pageList.slice(index, index + 1);\n        this.linkList.unshift(indexContent.fullPath);\n        this.pageList.unshift(indexContent);\n        this.activePage = this.linkList[1];\n      }\n    },\n    closeLeft: function closeLeft(pageKey) {\n      if (pageKey == indexKey) {\n        return;\n      }\n      var tempList = _toConsumableArray(this.pageList);\n      var indexContent = tempList.slice(0, 1)[0];\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(index);\n      this.pageList = this.pageList.slice(index);\n      this.linkList.unshift(indexContent.fullPath);\n      this.pageList.unshift(indexContent);\n      if (this.linkList.indexOf(this.activePage) < 0) {\n        this.activePage = this.linkList[0];\n      }\n    },\n    closeRight: function closeRight(pageKey) {\n      var index = this.linkList.indexOf(pageKey);\n      this.linkList = this.linkList.slice(0, index + 1);\n      this.pageList = this.pageList.slice(0, index + 1);\n      if (this.linkList.indexOf(this.activePage < 0)) {\n        this.activePage = this.linkList[this.linkList.length - 1];\n      }\n    },\n    //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    dynamicRouterShow: function dynamicRouterShow(key, title) {\n      var keyIndex = this.linkList.indexOf(key);\n      if (keyIndex >= 0) {\n        var currRouter = this.pageList[keyIndex];\n        var meta = Object.assign({}, currRouter.meta, {\n          title: title\n        });\n        this.pageList.splice(keyIndex, 1, Object.assign({}, currRouter, {\n          meta: meta\n        }));\n        if (key === this.activePage) {\n          this.changeTitle(title);\n        }\n      }\n    },\n    //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n    //update-begin-author:taoyan date:20191008 for:路由刷新\n    routeReload: function routeReload() {\n      var _this = this;\n      this.reloadFlag = false;\n      var ToggleMultipage = \"ToggleMultipage\";\n      this.$store.dispatch(ToggleMultipage, false);\n      this.$nextTick(function () {\n        _this.$store.dispatch(ToggleMultipage, true);\n        _this.reloadFlag = true;\n      });\n    },\n    //update-end-author:taoyan date:20191008 for:路由刷新\n    //新增一个返回方法\n    excuteCallback: function excuteCallback(callback) {\n      callback();\n    }\n  }\n};",{"version":3,"names":["GlobalLayout","Contextmenu","mixin","mixinDevice","triggerWindowResizeEvent","Vue","CACHE_INCLUDED_ROUTES","indexKey","name","components","mixins","data","pageList","linkList","activePage","menuVisible","menuItemList","key","icon","text","reloadFlag","provide","closeCurrent","computed","multipage","isMobile","$store","state","app","created","$route","path","addIndexToFirst","currentRoute","Object","assign","meta","push","fullPath","mounted","watch","newRoute","keepAlive","routeReload","indexOf","oldIndex","oldPositionRoute","splice","index","lastIndexOf","waitRouter","$router","changeTitle","title","newVal","device","methods","projectTitle","document","changePage","tabCallBack","$nextTick","setTimeout","editPage","action","remove","$message","warning","length","console","log","removeRoute","filter","item","cacheRouterArray","ls","get","componentName","includes","findIndex","set","onContextmenu","e","pagekey","getPageKey","target","preventDefault","depth","pageKey","getAttribute","previousElementSibling","firstElementChild","onMenuSelect","closeLeft","closeRight","closeOthers","slice","indexContent","unshift","tempList","_toConsumableArray","dynamicRouterShow","keyIndex","currRouter","_this","ToggleMultipage","dispatch","excuteCallback","callback"],"sources":["src/components/layouts/TabLayout.vue"],"sourcesContent":["<template>\n  <global-layout @dynamicRouterShow=\"dynamicRouterShow\">\n    <!-- update-begin- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" style=\"z-index: 9999;\" @select=\"onMenuSelect\"/>\n    <!-- update-end- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\n    <a-tabs\n      @contextmenu.native=\"e => onContextmenu(e)\"\n      v-if=\"multipage\"\n      :active-key=\"activePage\"\n      class=\"tab-layout-tabs\"\n      style=\"height:52px\"\n      :hide-add=\"true\"\n      type=\"editable-card\"\n      @change=\"changePage\"\n      @tabClick=\"tabCallBack\"\n      @edit=\"editPage\">\n      <a-tab-pane :id=\"page.fullPath\" :key=\"page.fullPath\" v-for=\"page in pageList\" :closable=\"!(page.meta.title=='首页')\">\n        <span slot=\"tab\" :pagekey=\"page.fullPath\">{{ page.meta.title }}</span>\n      </a-tab-pane>\n    </a-tabs>\n    <div style=\"margin: 12px 12px 0;\">\n      <!-- update-begin-author:taoyan date:20201221 for:此处删掉transition标签 不知道为什么加上后 页面路由切换的时候即1及菜单切到2及菜单的时候 两个菜单页面会同时出现300-500秒左右 -->\n      <keep-alive v-if=\"multipage\">\n        <router-view v-if=\"reloadFlag\"/>\n      </keep-alive>\n      <template v-else>\n        <router-view v-if=\"reloadFlag\"/>\n      </template>\n      <!-- update-end-author:taoyan date:20201221 for:此处删掉transition标签 不知道为什么加上后 页面路由切换的时候即1及菜单切到2及菜单的时候 两个菜单页面会同时出现300-500秒左右 -->\n    </div>\n  </global-layout>\n</template>\n\n<script>\n  import GlobalLayout from '@/components/page/GlobalLayout'\n  import Contextmenu from '@/components/menu/Contextmenu'\n  import { mixin, mixinDevice } from '@/utils/mixin.js'\n  import { triggerWindowResizeEvent } from '@/utils/util'\n  import Vue from 'vue'\n  import { CACHE_INCLUDED_ROUTES } from '@/store/mutation-types'\n\n  const indexKey = '/dashboard/analysis'\n\n  export default {\n    name: 'TabLayout',\n    components: {\n      GlobalLayout,\n      Contextmenu\n    },\n    mixins: [mixin, mixinDevice],\n    data() {\n      return {\n        pageList: [],\n        linkList: [],\n        activePage: '',\n        menuVisible: false,\n        menuItemList: [\n          { key: '4', icon: 'reload', text: '刷 新' },\n          { key: '1', icon: 'arrow-left', text: '关闭左侧' },\n          { key: '2', icon: 'arrow-right', text: '关闭右侧' },\n          { key: '3', icon: 'close', text: '关闭其它' }\n        ],\n        reloadFlag:true\n      }\n    },\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    provide(){\n      return{\n        closeCurrent:this.closeCurrent\n      }\n    },\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    computed: {\n      multipage() {\n        //判断如果是手机模式，自动切换为单页面模式\n        if (this.isMobile()) {\n          return false\n        } else {\n          return this.$store.state.app.multipage\n        }\n      }\n    },\n    created() {\n      if (this.$route.path != indexKey) {\n        this.addIndexToFirst()\n      }\n      // 复制一个route对象出来，不能影响原route\n      let currentRoute = Object.assign({}, this.$route)\n      currentRoute.meta = Object.assign({}, currentRoute.meta)\n      this.pageList.push(currentRoute)\n      this.linkList.push(currentRoute.fullPath)\n      this.activePage = currentRoute.fullPath\n    },\n    mounted() {\n    },\n    watch: {\n      '$route': function(newRoute) {\n        //console.log(\"新的路由\",newRoute)\n        this.activePage = newRoute.fullPath\n        if (!this.multipage) {\n          this.linkList = [newRoute.fullPath]\n          this.pageList = [Object.assign({},newRoute)]\n        // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n        } else if(indexKey==newRoute.fullPath) {\n          //首页时 判断是否缓存 没有缓存 刷新之\n          if (newRoute.meta.keepAlive === false) {\n            this.routeReload()\n          }\n        // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n        }else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n          this.linkList.push(newRoute.fullPath)\n          this.pageList.push(Object.assign({},newRoute))\n          //// update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\n          // if (newRoute.meta.keepAlive) {\n          //   this.routeReload()\n          // }\n          //// update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\n        } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n          let oldIndex = this.linkList.indexOf(newRoute.fullPath)\n          let oldPositionRoute = this.pageList[oldIndex]\n          this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\n        }\n      },\n      'activePage': function(key) {\n        let index = this.linkList.lastIndexOf(key)\n        let waitRouter = this.pageList[index]\n        // 【TESTA-523】修复：不允许重复跳转路由异常\n        if (waitRouter.fullPath !== this.$route.fullPath) {\n          this.$router.push(Object.assign({}, waitRouter))\n        }\n        this.changeTitle(waitRouter.meta.title)\n      },\n      'multipage': function(newVal) {\n        if(this.reloadFlag){\n          if (!newVal) {\n            this.linkList = [this.$route.fullPath]\n            this.pageList = [this.$route]\n          }\n        }\n      },\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n      device() {\n        if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\n          this.addIndexToFirst()\n        }\n      },\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    },\n    methods: {\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n      // 将首页添加到第一位\n      addIndexToFirst() {\n        this.pageList.splice(0, 0, {\n          name: 'dashboard-analysis',\n          path: indexKey,\n          fullPath: indexKey,\n          meta: {\n            icon: 'dashboard',\n            title: '首页'\n          }\n        })\n        this.linkList.splice(0, 0, indexKey)\n      },\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n\n      // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\n      changeTitle(title) {\n        let projectTitle = \"科亿知识库\"\n        // 首页特殊处理\n        if (this.$route.path === indexKey) {\n          document.title = projectTitle\n        } else {\n          document.title = title + ' · ' + projectTitle\n        }\n      },\n      // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\n\n      changePage(key) {\n        this.activePage = key\n      },\n      tabCallBack() {\n        this.$nextTick(() => {\n          //update-begin-author:taoyan date: 20201211 for:【新版】online报错 JT-100\n         setTimeout(()=>{\n           //省市区组件里面给window绑定了个resize事件 导致切换页面的时候触发了他的resize，但是切换页面，省市区组件还没被销毁前就触发了该事件，导致控制台报错，加个延迟\n           triggerWindowResizeEvent()\n         },20)\n          //update-end-author:taoyan date: 20201211 for:【新版】online报错 JT-100\n        })\n      },\n      editPage(key, action) {\n        this[action](key)\n      },\n      remove(key) {\n        if (key == indexKey) {\n          this.$message.warning('首页不能关闭!')\n          return\n        }\n        if (this.pageList.length === 1) {\n          this.$message.warning('这是最后一页，不能再关闭了啦')\n          return\n        }\n        console.log(\"this.pageList \",this.pageList );\n        let removeRoute = this.pageList.filter(item => item.fullPath == key)\n        this.pageList = this.pageList.filter(item => item.fullPath !== key)\n        let index = this.linkList.indexOf(key)\n        this.linkList = this.linkList.filter(item => item !== key)\n        index = index >= this.linkList.length ? this.linkList.length - 1 : index\n        this.activePage = this.linkList[index]\n\n        //update-begin--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\n        //关闭页面则从缓存cache_included_routes中删除路由，下次点击菜单会重新加载页面\n        let cacheRouterArray = Vue.ls.get(CACHE_INCLUDED_ROUTES) || []\n        if (removeRoute && removeRoute[0]) {\n          let componentName = removeRoute[0].meta.componentName\n          console.log(\"key: \", key);\n          console.log(\"componentName: \", componentName);\n          if(cacheRouterArray.includes(componentName)){\n            cacheRouterArray.splice(cacheRouterArray.findIndex(item => item === componentName), 1)\n            Vue.ls.set(CACHE_INCLUDED_ROUTES, cacheRouterArray)\n          }\n        }\n        //update-end--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\n\n      },\n      onContextmenu(e) {\n        const pagekey = this.getPageKey(e.target)\n        if (pagekey !== null) {\n          e.preventDefault()\n          this.menuVisible = true\n        }\n      },\n      getPageKey(target, depth) {\n        depth = depth || 0\n        if (depth > 2) {\n          return null\n        }\n        let pageKey = target.getAttribute('pagekey')\n        pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\n        return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\n      },\n      onMenuSelect(key, target) {\n        let pageKey = this.getPageKey(target)\n        switch (key) {\n          case '1':\n            this.closeLeft(pageKey)\n            break\n          case '2':\n            this.closeRight(pageKey)\n            break\n          case '3':\n            this.closeOthers(pageKey)\n            break\n          case '4':\n            this.routeReload()\n            break\n          default:\n            break\n        }\n      },\n      /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n      closeCurrent(){\n        this.remove(this.activePage);\n      },\n      /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n      closeOthers(pageKey) {\n        let index = this.linkList.indexOf(pageKey)\n        if (pageKey == indexKey || pageKey.indexOf('?ticke=')>=0) {\n          this.linkList = this.linkList.slice(index, index + 1)\n          this.pageList = this.pageList.slice(index, index + 1)\n          this.activePage = this.linkList[0]\n        } else {\n          let indexContent = this.pageList.slice(0, 1)[0]\n          this.linkList = this.linkList.slice(index, index + 1)\n          this.pageList = this.pageList.slice(index, index + 1)\n          this.linkList.unshift(indexContent.fullPath)\n          this.pageList.unshift(indexContent)\n          this.activePage = this.linkList[1]\n        }\n      },\n      closeLeft(pageKey) {\n        if (pageKey == indexKey) {\n          return\n        }\n        let tempList = [...this.pageList]\n        let indexContent = tempList.slice(0, 1)[0]\n        let index = this.linkList.indexOf(pageKey)\n        this.linkList = this.linkList.slice(index)\n        this.pageList = this.pageList.slice(index)\n        this.linkList.unshift(indexContent.fullPath)\n        this.pageList.unshift(indexContent)\n        if (this.linkList.indexOf(this.activePage) < 0) {\n          this.activePage = this.linkList[0]\n        }\n      },\n      closeRight(pageKey) {\n        let index = this.linkList.indexOf(pageKey)\n        this.linkList = this.linkList.slice(0, index + 1)\n        this.pageList = this.pageList.slice(0, index + 1)\n        if (this.linkList.indexOf(this.activePage < 0)) {\n          this.activePage = this.linkList[this.linkList.length - 1]\n        }\n      },\n      //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n      dynamicRouterShow(key,title){\n        let keyIndex = this.linkList.indexOf(key)\n        if(keyIndex>=0){\n          let currRouter = this.pageList[keyIndex]\n          let meta = Object.assign({},currRouter.meta,{title:title})\n          this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\n          if (key === this.activePage) {\n            this.changeTitle(title)\n          }\n        }\n      },\n      //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n\n      //update-begin-author:taoyan date:20191008 for:路由刷新\n      routeReload(){\n        this.reloadFlag = false\n        let ToggleMultipage = \"ToggleMultipage\"\n        this.$store.dispatch(ToggleMultipage,false)\n        this.$nextTick(()=>{\n          this.$store.dispatch(ToggleMultipage,true)\n          this.reloadFlag = true\n        })\n      },\n      //update-end-author:taoyan date:20191008 for:路由刷新\n      //新增一个返回方法\n      excuteCallback(callback){\n        callback()\n      },\n    }\n  }\n</script>\n\n<style lang=\"less\">\n  /*\n * The following styles are auto-applied to elements with\n * transition=\"page-transition\" when their visibility is toggled\n * by Vue.js.\n *\n * You can easily play with the page transition by editing\n * these styles.\n */\n\n  /* 吉奥 */\n  div .ant-menu-submenu-title{\n    padding: 0 16px;\n  }\n\n\n\n  .page-transition-enter {\n    opacity: 0;\n  }\n\n  .page-transition-leave-active {\n    opacity: 0;\n  }\n\n  .page-transition-enter .page-transition-container,\n  .page-transition-leave-active .page-transition-container {\n    -webkit-transform: scale(1.1);\n    transform: scale(1.1);\n  }\n\n  /*美化弹出Tab样式*/\n  .ant-tabs-nav-container {\n    margin-top: 4px;\n  }\n\n  /* 修改 ant-tabs 样式 */\n  .tab-layout-tabs.ant-tabs {\n    border-bottom: 1px solid #ccc;\n    border-left: 1px solid #ccc;\n    background-color: white;\n    padding: 0 16px;\n    .ant-tabs-bar {\n      margin: 4px 0 0;\n      border: none;\n    }\n\n  }\n\n  .tab-layout-tabs.ant-tabs {\n\n    &.ant-tabs-card .ant-tabs-tab {\n\n      padding: 0 24px !important;\n      background-color: white !important;\n      margin-right: 10px !important;\n\n      .ant-tabs-close-x {\n        width: 12px !important;\n        height: 12px !important;\n        opacity: 0 !important;\n        cursor: pointer !important;\n        font-size: 12px !important;\n        margin: 0 !important;\n        position: absolute;\n        top: 36%;\n        right: 6px;\n      }\n\n      &:hover .ant-tabs-close-x {\n        opacity: 1 !important;\n      }\n\n    }\n\n  }\n\n  .tab-layout-tabs.ant-tabs.ant-tabs-card > .ant-tabs-bar {\n    .ant-tabs-tab {\n      border: none !important;\n      border-bottom: 1px solid transparent !important;\n    }\n    .ant-tabs-tab-active {\n      border-color: @primary-color!important;\n    }\n  }\n\n\n\n</style>\n"],"mappings":"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","ignoreList":[]}]}