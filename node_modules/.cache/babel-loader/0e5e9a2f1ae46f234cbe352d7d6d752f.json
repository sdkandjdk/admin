{"remainingRequest":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\知识库系统\\admin\\src\\views\\user\\Login.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\知识库系统\\admin\\src\\views\\user\\Login.vue","mtime":1709890831744},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport { ACCESS_TOKEN, ENCRYPTED_STRING } from \"@/store/mutation-types\";\nimport ThirdLogin from './third/ThirdLogin';\nimport LoginSelectTenant from \"./LoginSelectTenant\";\nimport TwoStepCaptcha from '@/components/tools/TwoStepCaptcha';\nimport { encryption, getEncryptedString } from '@/utils/encryption/aesEncrypt';\nimport { timeFix } from \"@/utils/util\";\nimport LoginAccount from './LoginAccount';\nimport LoginPhone from './LoginPhone';\nexport default {\n  components: {\n    LoginSelectTenant: LoginSelectTenant,\n    TwoStepCaptcha: TwoStepCaptcha,\n    ThirdLogin: ThirdLogin,\n    LoginAccount: LoginAccount,\n    LoginPhone: LoginPhone\n  },\n  data: function data() {\n    return {\n      customActiveKey: 'tab1',\n      rememberMe: true,\n      loginBtn: false,\n      requiredTwoStepCaptcha: false,\n      stepCaptchaVisible: false,\n      encryptedString: {\n        key: \"\",\n        iv: \"\"\n      }\n    };\n  },\n  created: function created() {\n    Vue.ls.remove(ACCESS_TOKEN);\n    this.getRouterData();\n    this.rememberMe = true;\n  },\n  methods: {\n    handleTabClick: function handleTabClick(key) {\n      this.customActiveKey = key;\n    },\n    handleRememberMeChange: function handleRememberMeChange(e) {\n      this.rememberMe = e.target.checked;\n    },\n    /**跳转到登录页面的参数-账号获取*/getRouterData: function getRouterData() {\n      var _this = this;\n      this.$nextTick(function () {\n        var temp = _this.$route.params.username || _this.$route.query.username || '';\n        if (temp) {\n          _this.$refs.alogin.acceptUsername(temp);\n        }\n      });\n    },\n    //登录\n    handleSubmit: function handleSubmit() {\n      this.loginBtn = true;\n      if (this.customActiveKey === 'tab1') {\n        // 使用账户密码登录\n        this.$refs.alogin.handleLogin(this.rememberMe);\n      } else {\n        //手机号码登录\n        this.$refs.plogin.handleLogin(this.rememberMe);\n      }\n    },\n    // 校验失败\n    validateFail: function validateFail() {\n      this.loginBtn = false;\n    },\n    // 登录后台成功\n    requestSuccess: function requestSuccess(loginResult) {\n      this.$refs.loginSelect.show(loginResult);\n    },\n    //登录后台失败\n    requestFailed: function requestFailed(err) {\n      var description = ((err.response || {}).data || {}).message || err.message || \"请求出现错误，请稍后再试\";\n      this.$notification['error']({\n        message: '登录失败',\n        description: description,\n        duration: 4\n      });\n      //账户密码登录错误后更新验证码\n      if (this.customActiveKey === 'tab1' && description.indexOf('密码错误') > 0) {\n        this.$refs.alogin.handleChangeCheckCode();\n      }\n      this.loginBtn = false;\n    },\n    loginSelectOk: function loginSelectOk() {\n      this.loginSuccess();\n    },\n    //登录成功\n    loginSuccess: function loginSuccess() {\n      this.$router.push({\n        path: \"/defaultDocSearch\"\n      }).catch(function () {\n        console.log('登录跳转首页出错,这个错误从哪里来的');\n      });\n      this.$notification.success({\n        message: '欢迎',\n        description: \"\".concat(timeFix(), \"\\uFF0C\\u6B22\\u8FCE\\u56DE\\u6765\")\n      });\n    },\n    stepCaptchaSuccess: function stepCaptchaSuccess() {\n      this.loginSuccess();\n    },\n    stepCaptchaCancel: function stepCaptchaCancel() {\n      var _this2 = this;\n      this.Logout().then(function () {\n        _this2.loginBtn = false;\n        _this2.stepCaptchaVisible = false;\n      });\n    },\n    //获取密码加密规则\n    getEncrypte: function getEncrypte() {\n      var _this3 = this;\n      var encryptedString = Vue.ls.get(ENCRYPTED_STRING);\n      if (encryptedString == null) {\n        getEncryptedString().then(function (data) {\n          _this3.encryptedString = data;\n        });\n      } else {\n        this.encryptedString = encryptedString;\n      }\n    }\n  }\n};",{"version":3,"names":["Vue","ACCESS_TOKEN","ENCRYPTED_STRING","ThirdLogin","LoginSelectTenant","TwoStepCaptcha","encryption","getEncryptedString","timeFix","LoginAccount","LoginPhone","components","data","customActiveKey","rememberMe","loginBtn","requiredTwoStepCaptcha","stepCaptchaVisible","encryptedString","key","iv","created","ls","remove","getRouterData","methods","handleTabClick","handleRememberMeChange","e","target","checked","_this","$nextTick","temp","$route","params","username","query","$refs","alogin","acceptUsername","handleSubmit","handleLogin","plogin","validateFail","requestSuccess","loginResult","loginSelect","show","requestFailed","err","description","response","message","$notification","duration","indexOf","handleChangeCheckCode","loginSelectOk","loginSuccess","$router","push","path","catch","console","log","success","concat","stepCaptchaSuccess","stepCaptchaCancel","_this2","Logout","then","getEncrypte","_this3","get"],"sources":["src/views/user/Login.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n    <a-form-model class=\"user-layout-login\" @keyup.enter.native=\"handleSubmit\">\n      <a-tabs :activeKey=\"customActiveKey\" :tabBarStyle=\"{ textAlign: 'center', borderBottom: 'unset' }\"  @change=\"handleTabClick\">\n        <a-tab-pane key=\"tab1\" tab=\"账号密码登录\">\n          <login-account ref=\"alogin\" @validateFail=\"validateFail\" @success=\"requestSuccess\" @fail=\"requestFailed\"></login-account>\n        </a-tab-pane>\n\n        <a-tab-pane key=\"tab2\" tab=\"用户注册\">\n          <login-phone ref=\"plogin\" @validateFail=\"validateFail\" @success=\"requestSuccess\" @fail=\"requestFailed\"></login-phone>\n        </a-tab-pane>\n      </a-tabs>\n\n      <!--<a-form-model-item>-->\n        <!--<a-checkbox @change=\"handleRememberMeChange\" default-checked>自动登录</a-checkbox>-->\n        <!--<router-link :to=\"{ name: 'alteration'}\" class=\"forge-password\" style=\"float: right;\">-->\n          <!--忘记密码-->\n        <!--</router-link>-->\n<!--        <router-link :to=\"{ name: 'user/register'}\" class=\"forge-password\" style=\"float: right;margin-right: 10px\" >-->\n<!--          注册账户-->\n<!--        </router-link>-->\n      <!--</a-form-model-item>-->\n\n      <a-form-item style=\"margin-top:24px\">\n        <a-button size=\"large\"  type=\"primary\"  htmlType=\"submit\"  class=\"login-button\"  :loading=\"loginBtn\"  @click.stop.prevent=\"handleSubmit\" :disabled=\"loginBtn\">确定\n        </a-button>\n      </a-form-item>\n\n    </a-form-model>\n\n    <two-step-captcha v-if=\"requiredTwoStepCaptcha\" :visible=\"stepCaptchaVisible\" @success=\"stepCaptchaSuccess\" @cancel=\"stepCaptchaCancel\"></two-step-captcha>\n    <login-select-tenant ref=\"loginSelect\" @success=\"loginSelectOk\"></login-select-tenant>\n    <!--<third-login ref=\"thirdLogin\"></third-login>-->\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import { ACCESS_TOKEN ,ENCRYPTED_STRING} from \"@/store/mutation-types\"\n  import ThirdLogin from './third/ThirdLogin'\n  import LoginSelectTenant from \"./LoginSelectTenant\"\n  import TwoStepCaptcha from '@/components/tools/TwoStepCaptcha'\n  import { encryption , getEncryptedString } from '@/utils/encryption/aesEncrypt'\n  import { timeFix } from \"@/utils/util\"\n\n  import LoginAccount from './LoginAccount'\n  import LoginPhone from './LoginPhone'\n\n  export default {\n    components: {\n      LoginSelectTenant,\n      TwoStepCaptcha,\n      ThirdLogin,\n      LoginAccount,\n      LoginPhone\n    },\n    data () {\n      return {\n        customActiveKey: 'tab1',\n        rememberMe: true,\n        loginBtn: false,\n        requiredTwoStepCaptcha: false,\n        stepCaptchaVisible: false,\n        encryptedString:{\n          key:\"\",\n          iv:\"\",\n        },\n      }\n    },\n    created() {\n      Vue.ls.remove(ACCESS_TOKEN)\n      this.getRouterData();\n      this.rememberMe = true\n    },\n    methods:{\n      handleTabClick(key){\n        this.customActiveKey = key\n      },\n      handleRememberMeChange(e){\n        this.rememberMe = e.target.checked\n      },\n      /**跳转到登录页面的参数-账号获取*/\n      getRouterData(){\n        this.$nextTick(() => {\n          let temp = this.$route.params.username || this.$route.query.username || ''\n          if (temp) {\n            this.$refs.alogin.acceptUsername(temp)\n          }\n        })\n      },\n\n      //登录\n      handleSubmit () {\n        this.loginBtn = true;\n        if (this.customActiveKey === 'tab1') {\n          // 使用账户密码登录\n          this.$refs.alogin.handleLogin(this.rememberMe)\n        } else {\n          //手机号码登录\n          this.$refs.plogin.handleLogin(this.rememberMe)\n        }\n      },\n      // 校验失败\n      validateFail(){\n        this.loginBtn = false;\n      },\n      // 登录后台成功\n      requestSuccess(loginResult){\n        this.$refs.loginSelect.show(loginResult)\n      },\n      //登录后台失败\n      requestFailed (err) {\n        let description = ((err.response || {}).data || {}).message || err.message || \"请求出现错误，请稍后再试\"\n        this.$notification[ 'error' ]({\n          message: '登录失败',\n          description: description,\n          duration: 4,\n        });\n        //账户密码登录错误后更新验证码\n        if(this.customActiveKey === 'tab1' && description.indexOf('密码错误')>0){\n          this.$refs.alogin.handleChangeCheckCode()\n        }\n        this.loginBtn = false;\n      },\n      loginSelectOk(){\n        this.loginSuccess()\n      },\n      //登录成功\n      loginSuccess () {\n        this.$router.push({ path: \"/defaultDocSearch\" }).catch(()=>{\n          console.log('登录跳转首页出错,这个错误从哪里来的')\n        })\n        this.$notification.success({\n          message: '欢迎',\n          description: `${timeFix()}，欢迎回来`,\n        });\n      },\n\n      stepCaptchaSuccess () {\n        this.loginSuccess()\n      },\n      stepCaptchaCancel () {\n        this.Logout().then(() => {\n          this.loginBtn = false\n          this.stepCaptchaVisible = false\n        })\n      },\n      //获取密码加密规则\n      getEncrypte(){\n        var encryptedString = Vue.ls.get(ENCRYPTED_STRING);\n        if(encryptedString == null){\n          getEncryptedString().then((data) => {\n            this.encryptedString = data\n          });\n        }else{\n          this.encryptedString = encryptedString;\n        }\n      }\n\n    }\n\n  }\n</script>\n<style lang=\"less\" scoped>\n  .user-layout-login {\n    label {\n      font-size: 14px;\n    }\n  .getCaptcha {\n      display: block;\n      width: 100%;\n      height: 40px;\n    }\n\n  .forge-password {\n      font-size: 14px;\n    }\n\n    button.login-button {\n      padding: 0 15px;\n      font-size: 16px;\n      height: 40px;\n      width: 100%;\n    }\n\n  .user-login-other {\n      text-align: left;\n      margin-top: 24px;\n      line-height: 22px;\n\n    .item-icon {\n        font-size: 24px;\n        color: rgba(0,0,0,.2);\n        margin-left: 16px;\n        vertical-align: middle;\n        cursor: pointer;\n        transition: color .3s;\n\n      &:hover {\n          color: #1890ff;\n        }\n      }\n\n    .register {\n        float: right;\n      }\n    }\n  }\n</style>\n<style>\n  .valid-error .ant-select-selection__placeholder{\n    color: #f5222d;\n  }\n</style>"],"mappings":"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","ignoreList":[]}]}