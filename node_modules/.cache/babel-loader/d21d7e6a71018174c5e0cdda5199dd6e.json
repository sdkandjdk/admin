{"remainingRequest":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\jeecgbiz\\JSelectBizComponent\\JSelectBizComponentModal.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\jeecgbiz\\JSelectBizComponent\\JSelectBizComponentModal.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { getAction } from '@/api/manage';\nimport Ellipsis from '@/components/Ellipsis';\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nimport { cloneObject, pushIfNotExist } from '@/utils/util';\nimport JSelectBizQueryItem from './JSelectBizQueryItem';\nexport default {\n  name: 'JSelectBizComponentModal',\n  mixins: [JeecgListMixin],\n  components: {\n    Ellipsis: Ellipsis,\n    JSelectBizQueryItem: JSelectBizQueryItem\n  },\n  props: {\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    valueKey: {\n      type: String,\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    width: {\n      type: Number,\n      default: 900\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    listUrl: {\n      type: String,\n      required: true,\n      default: ''\n    },\n    // 根据 value 获取显示文本的地址，例如存的是 username，可以通过该地址获取到 realname\n    valueUrl: {\n      type: String,\n      default: ''\n    },\n    displayKey: {\n      type: String,\n      default: null\n    },\n    columns: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 查询条件Code\n    queryParamCode: {\n      type: String,\n      default: null\n    },\n    // 查询条件文字\n    queryParamText: {\n      type: String,\n      default: null\n    },\n    // 查询配置\n    queryConfig: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    rowKey: {\n      type: String,\n      default: 'id'\n    },\n    // 过长裁剪长度，设置为 -1 代表不裁剪\n    ellipsisLength: {\n      type: Number,\n      default: 12\n    }\n  },\n  data: function data() {\n    var _this = this;\n    var h = this.$createElement;\n    return {\n      innerValue: [],\n      // 已选择列表\n      selectedTable: {\n        pagination: false,\n        scroll: {\n          y: 240\n        },\n        columns: [_objectSpread(_objectSpread({}, this.columns[0]), {}, {\n          width: this.columns[0].widthRight || this.columns[0].width\n        }), {\n          title: '操作',\n          dataIndex: 'action',\n          align: 'center',\n          width: 60,\n          scopedSlots: {\n            customRender: 'action'\n          }\n        }],\n        dataSource: []\n      },\n      renderEllipsis: function renderEllipsis(value) {\n        return h(\"ellipsis\", {\n          \"attrs\": {\n            \"length\": _this.ellipsisLength\n          }\n        }, [value]);\n      },\n      url: {\n        list: this.listUrl\n      },\n      /* 分页参数 */\n      ipagination: {\n        current: 1,\n        pageSize: 5,\n        pageSizeOptions: ['5', '10', '20', '30'],\n        showTotal: function showTotal(total, range) {\n          return range[0] + '-' + range[1] + ' 共' + total + '条';\n        },\n        showQuickJumper: true,\n        showSizeChanger: true,\n        total: 0\n      },\n      options: [],\n      dataSourceMap: {},\n      showMoreQueryItems: false\n    };\n  },\n  computed: {\n    // 表头\n    innerColumns: function innerColumns() {\n      var _this2 = this;\n      var columns = cloneObject(this.columns);\n      columns.forEach(function (column) {\n        // 给所有的列加上过长裁剪\n        if (_this2.ellipsisLength !== -1) {\n          column.customRender = function (text) {\n            return _this2.renderEllipsis(text);\n          };\n        }\n      });\n      return columns;\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      immediate: true,\n      handler: function handler(val) {\n        this.innerValue = cloneObject(val);\n        this.selectedRowKeys = [];\n        this.valueWatchHandler(val);\n        this.queryOptionsByValue(val);\n      }\n    },\n    dataSource: {\n      deep: true,\n      handler: function handler(val) {\n        this.emitOptions(val);\n        this.valueWatchHandler(this.innerValue);\n      }\n    },\n    selectedRowKeys: {\n      immediate: true,\n      deep: true,\n      handler: function handler(val) {\n        var _this3 = this;\n        //update--begin--autor:scott-----date:20200927------for：选取职务名称出现全选 #1753-----\n        if (this.innerValue) {\n          this.innerValue.length = 0;\n        }\n        //update--end--autor:scott-----date:20200927------for：选取职务名称出现全选 #1753-----\n        this.selectedTable.dataSource = val.map(function (key) {\n          var _iterator = _createForOfIteratorHelper(_this3.dataSource),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var data = _step.value;\n              if (data[_this3.rowKey] === key) {\n                pushIfNotExist(_this3.innerValue, data[_this3.valueKey]);\n                return data;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var _iterator2 = _createForOfIteratorHelper(_this3.selectedTable.dataSource),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _data = _step2.value;\n              if (_data[_this3.rowKey] === key) {\n                pushIfNotExist(_this3.innerValue, _data[_this3.valueKey]);\n                return _data;\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          console.warn('未找到选择的行信息，key：' + key);\n          return {};\n        });\n      }\n    }\n  },\n  methods: {\n    /** 关闭弹窗 */close: function close() {\n      this.$emit('update:visible', false);\n    },\n    valueWatchHandler: function valueWatchHandler(val) {\n      var _this4 = this;\n      val.forEach(function (item) {\n        _this4.dataSource.concat(_this4.selectedTable.dataSource).forEach(function (data) {\n          if (data[_this4.valueKey] === item) {\n            pushIfNotExist(_this4.selectedRowKeys, data[_this4.rowKey]);\n          }\n        });\n      });\n    },\n    queryOptionsByValue: function queryOptionsByValue(value) {\n      var _this5 = this;\n      if (!value || value.length === 0) {\n        return;\n      }\n      // 判断options是否存在value，如果已存在数据就不再请求后台了\n      var notExist = false;\n      var _iterator3 = _createForOfIteratorHelper(value),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var val = _step3.value;\n          var find = false;\n          var _iterator4 = _createForOfIteratorHelper(this.options),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var option = _step4.value;\n              if (val === option.value) {\n                find = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          if (!find) {\n            notExist = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (!notExist) return;\n      getAction(this.valueUrl || this.listUrl, _defineProperty(_defineProperty(_defineProperty({}, this.valueKey, value.join(',') + ','), \"pageNo\", 1), \"pageSize\", value.length)).then(function (res) {\n        if (res.success) {\n          var dataSource = res.result;\n          if (!(dataSource instanceof Array)) {\n            dataSource = res.result.records;\n          }\n          _this5.emitOptions(dataSource, function (data) {\n            pushIfNotExist(_this5.innerValue, data[_this5.valueKey]);\n            pushIfNotExist(_this5.selectedRowKeys, data[_this5.rowKey]);\n            pushIfNotExist(_this5.selectedTable.dataSource, data, _this5.rowKey);\n          });\n        }\n      });\n    },\n    emitOptions: function emitOptions(dataSource, callback) {\n      var _this6 = this;\n      dataSource.forEach(function (data) {\n        var key = data[_this6.valueKey];\n        _this6.dataSourceMap[key] = data;\n        pushIfNotExist(_this6.options, {\n          label: data[_this6.displayKey || _this6.valueKey],\n          value: key\n        }, 'value');\n        typeof callback === 'function' ? callback(data) : '';\n      });\n      this.$emit('options', this.options, this.dataSourceMap);\n    },\n    /** 完成选择 */handleOk: function handleOk() {\n      var _this7 = this;\n      var value = this.selectedTable.dataSource.map(function (data) {\n        return data[_this7.valueKey];\n      });\n      this.$emit('input', value);\n      this.close();\n    },\n    /** 删除已选择的 */handleDeleteSelected: function handleDeleteSelected(record, index) {\n      this.selectedRowKeys.splice(this.selectedRowKeys.indexOf(record[this.rowKey]), 1);\n      //update--begin--autor:wangshuai-----date:20200722------for：JSelectBizComponent组件切换页数值问题------\n      this.selectedTable.dataSource.splice(this.selectedTable.dataSource.indexOf(record), 1);\n      this.innerValue.splice(this.innerValue.indexOf(record[this.valueKey]), 1);\n      console.log(\"this.selectedRowKeys:\", this.selectedRowKeys);\n      console.log(\"this.selectedTable.dataSource:\", this.selectedTable.dataSource);\n      //update--begin--autor:wangshuai-----date:20200722------for：JSelectBizComponent组件切换页数值问题------\n    },\n    customRowFn: function customRowFn(record) {\n      var _this8 = this;\n      return {\n        on: {\n          click: function click() {\n            var key = record[_this8.rowKey];\n            if (!_this8.multiple) {\n              _this8.selectedRowKeys = [key];\n              _this8.selectedTable.dataSource = [record];\n            } else {\n              var index = _this8.selectedRowKeys.indexOf(key);\n              if (index === -1) {\n                _this8.selectedRowKeys.push(key);\n                _this8.selectedTable.dataSource.push(record);\n              } else {\n                _this8.handleDeleteSelected(record, index);\n              }\n            }\n          }\n        }\n      };\n    }\n  }\n};",{"version":3,"names":["getAction","Ellipsis","JeecgListMixin","cloneObject","pushIfNotExist","JSelectBizQueryItem","name","mixins","components","props","value","type","Array","default","_default","visible","Boolean","valueKey","String","required","multiple","width","Number","listUrl","valueUrl","displayKey","columns","queryParamCode","queryParamText","queryConfig","rowKey","ellipsisLength","data","_this","h","$createElement","innerValue","selectedTable","pagination","scroll","y","_objectSpread","widthRight","title","dataIndex","align","scopedSlots","customRender","dataSource","renderEllipsis","url","list","ipagination","current","pageSize","pageSizeOptions","showTotal","total","range","showQuickJumper","showSizeChanger","options","dataSourceMap","showMoreQueryItems","computed","innerColumns","_this2","forEach","column","text","watch","deep","immediate","handler","val","selectedRowKeys","valueWatchHandler","queryOptionsByValue","emitOptions","_this3","length","map","key","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","_iterator2","_step2","console","warn","methods","close","$emit","_this4","item","concat","_this5","notExist","_iterator3","_step3","find","_iterator4","_step4","option","_defineProperty","join","then","res","success","result","records","callback","_this6","label","handleOk","_this7","handleDeleteSelected","record","index","splice","indexOf","log","customRowFn","_this8","on","click","push"],"sources":["src/components/jeecgbiz/JSelectBizComponent/JSelectBizComponentModal.vue"],"sourcesContent":["<template>\n  <j-modal\n    centered\n    :title=\"name + '选择'\"\n    :width=\"width\"\n    :visible=\"visible\"\n    switchFullscreen\n    @ok=\"handleOk\"\n    @cancel=\"close\"\n    cancelText=\"关闭\">\n\n    <a-row :gutter=\"18\">\n      <a-col :span=\"16\">\n        <!-- 查询区域 -->\n        <a-form layout=\"inline\" class=\"j-inline-form\">\n          <!-- 固定条件 -->\n          <a-form-item :label=\"(queryParamText||name)\">\n            <a-input v-model=\"queryParam[queryParamCode||valueKey]\" :placeholder=\"'请输入' + (queryParamText||name)\" @pressEnter=\"searchQuery\"/>\n          </a-form-item>\n          <!-- 动态生成的查询条件 -->\n          <j-select-biz-query-item v-if=\"queryConfig.length>0\" v-show=\"showMoreQueryItems\" :queryParam=\"queryParam\" :queryConfig=\"queryConfig\" @pressEnter=\"searchQuery\"/>\n          <!-- 按钮 -->\n          <a-button type=\"primary\" @click=\"searchQuery\" icon=\"search\">查询</a-button>\n          <a-button  @click=\"searchReset\" icon=\"reload\" style=\"margin-left: 8px\">重置</a-button>\n          <a v-if=\"queryConfig.length>0\" @click=\"showMoreQueryItems=!showMoreQueryItems\" style=\"margin-left: 8px\">\n            {{ showMoreQueryItems ? '收起' : '展开' }}\n            <a-icon :type=\"showMoreQueryItems ? 'up' : 'down'\"/>\n          </a>\n        </a-form>\n\n        <a-table\n          size=\"middle\"\n          bordered\n          :rowKey=\"rowKey\"\n          :columns=\"innerColumns\"\n          :dataSource=\"dataSource\"\n          :pagination=\"ipagination\"\n          :loading=\"loading\"\n          :scroll=\"{ y: 240 }\"\n          :rowSelection=\"{selectedRowKeys, onChange: onSelectChange, type: multiple ? 'checkbox':'radio'}\"\n          :customRow=\"customRowFn\"\n          @change=\"handleTableChange\">\n        </a-table>\n\n      </a-col>\n      <a-col :span=\"8\">\n        <a-card :title=\"'已选' + name\" :bordered=\"false\" :head-style=\"{padding:0}\" :body-style=\"{padding:0}\">\n\n          <a-table size=\"middle\" :rowKey=\"rowKey\" bordered v-bind=\"selectedTable\">\n              <span slot=\"action\" slot-scope=\"text, record, index\">\n                <a @click=\"handleDeleteSelected(record, index)\">删除</a>\n              </span>\n          </a-table>\n\n        </a-card>\n      </a-col>\n    </a-row>\n  </j-modal>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n  import Ellipsis from '@/components/Ellipsis'\n  import { JeecgListMixin } from '@/mixins/JeecgListMixin'\n  import { cloneObject, pushIfNotExist } from '@/utils/util'\n  import JSelectBizQueryItem from './JSelectBizQueryItem'\n\n  export default {\n    name: 'JSelectBizComponentModal',\n    mixins: [JeecgListMixin],\n    components: {Ellipsis, JSelectBizQueryItem},\n    props: {\n      value: {\n        type: Array,\n        default: () => []\n      },\n      visible: {\n        type: Boolean,\n        default: false\n      },\n      valueKey: {\n        type: String,\n        required: true\n      },\n      multiple: {\n        type: Boolean,\n        default: true\n      },\n      width: {\n        type: Number,\n        default: 900\n      },\n\n      name: {\n        type: String,\n        default: ''\n      },\n      listUrl: {\n        type: String,\n        required: true,\n        default: ''\n      },\n      // 根据 value 获取显示文本的地址，例如存的是 username，可以通过该地址获取到 realname\n      valueUrl: {\n        type: String,\n        default: ''\n      },\n      displayKey: {\n        type: String,\n        default: null\n      },\n      columns: {\n        type: Array,\n        required: true,\n        default: () => []\n      },\n      // 查询条件Code\n      queryParamCode: {\n        type: String,\n        default: null\n      },\n      // 查询条件文字\n      queryParamText: {\n        type: String,\n        default: null\n      },\n      // 查询配置\n      queryConfig: {\n        type: Array,\n        default: () => []\n      },\n      rowKey: {\n        type: String,\n        default: 'id'\n      },\n      // 过长裁剪长度，设置为 -1 代表不裁剪\n      ellipsisLength: {\n        type: Number,\n        default: 12\n      },\n    },\n    data() {\n      return {\n        innerValue: [],\n        // 已选择列表\n        selectedTable: {\n          pagination: false,\n          scroll: { y: 240 },\n          columns: [\n            {\n              ...this.columns[0],\n              width: this.columns[0].widthRight || this.columns[0].width,\n            },\n            { title: '操作', dataIndex: 'action', align: 'center', width: 60, scopedSlots: { customRender: 'action' }, }\n          ],\n          dataSource: [],\n        },\n        renderEllipsis: (value) => (<ellipsis length={this.ellipsisLength}>{value}</ellipsis>),\n        url: { list: this.listUrl },\n        /* 分页参数 */\n        ipagination: {\n          current: 1,\n          pageSize: 5,\n          pageSizeOptions: ['5', '10', '20', '30'],\n          showTotal: (total, range) => {\n            return range[0] + '-' + range[1] + ' 共' + total + '条'\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        },\n        options: [],\n        dataSourceMap: {},\n        showMoreQueryItems: false,\n      }\n    },\n    computed: {\n      // 表头\n      innerColumns() {\n        let columns = cloneObject(this.columns)\n        columns.forEach(column => {\n          // 给所有的列加上过长裁剪\n          if (this.ellipsisLength !== -1) {\n            column.customRender = (text) => this.renderEllipsis(text)\n          }\n        })\n        return columns\n      },\n    },\n    watch: {\n      value: {\n        deep: true,\n        immediate: true,\n        handler(val) {\n          this.innerValue = cloneObject(val)\n          this.selectedRowKeys = []\n          this.valueWatchHandler(val)\n          this.queryOptionsByValue(val)\n        }\n      },\n      dataSource: {\n        deep: true,\n        handler(val) {\n          this.emitOptions(val)\n          this.valueWatchHandler(this.innerValue)\n        }\n      },\n      selectedRowKeys: {\n        immediate: true,\n        deep: true,\n        handler(val) {\n          //update--begin--autor:scott-----date:20200927------for：选取职务名称出现全选 #1753-----\n          if(this.innerValue){\n            this.innerValue.length=0;\n          }\n          //update--end--autor:scott-----date:20200927------for：选取职务名称出现全选 #1753-----\n          this.selectedTable.dataSource = val.map(key => {\n            for (let data of this.dataSource) {\n              if (data[this.rowKey] === key) {\n                pushIfNotExist(this.innerValue, data[this.valueKey])\n                return data\n              }\n            }\n            for (let data of this.selectedTable.dataSource) {\n              if (data[this.rowKey] === key) {\n                pushIfNotExist(this.innerValue, data[this.valueKey])\n                return data\n              }\n            }\n            console.warn('未找到选择的行信息，key：' + key)\n            return {}\n          })\n        },\n      }\n    },\n\n    methods: {\n\n      /** 关闭弹窗 */\n      close() {\n        this.$emit('update:visible', false)\n      },\n\n      valueWatchHandler(val) {\n        val.forEach(item => {\n          this.dataSource.concat(this.selectedTable.dataSource).forEach(data => {\n            if (data[this.valueKey] === item) {\n              pushIfNotExist(this.selectedRowKeys, data[this.rowKey])\n            }\n          })\n        })\n      },\n\n      queryOptionsByValue(value) {\n        if (!value || value.length === 0) {\n          return\n        }\n        // 判断options是否存在value，如果已存在数据就不再请求后台了\n        let notExist = false\n        for (let val of value) {\n          let find = false\n          for (let option of this.options) {\n            if (val === option.value) {\n              find = true\n              break\n            }\n          }\n          if (!find) {\n            notExist = true\n            break\n          }\n        }\n        if (!notExist) return\n        getAction(this.valueUrl || this.listUrl, {\n          // 这里最后加一个 , 的原因是因为无论如何都要使用 in 查询，防止后台进行了模糊匹配，导致查询结果不准确\n          [this.valueKey]: value.join(',') + ',',\n          pageNo: 1,\n          pageSize: value.length\n        }).then((res) => {\n          if (res.success) {\n            let dataSource = res.result\n            if (!(dataSource instanceof Array)) {\n              dataSource = res.result.records\n            }\n            this.emitOptions(dataSource, (data) => {\n              pushIfNotExist(this.innerValue, data[this.valueKey])\n              pushIfNotExist(this.selectedRowKeys, data[this.rowKey])\n              pushIfNotExist(this.selectedTable.dataSource, data, this.rowKey)\n            })\n          }\n        })\n      },\n\n      emitOptions(dataSource, callback) {\n        dataSource.forEach(data => {\n          let key = data[this.valueKey]\n          this.dataSourceMap[key] = data\n          pushIfNotExist(this.options, { label: data[this.displayKey || this.valueKey], value: key }, 'value')\n          typeof callback === 'function' ? callback(data) : ''\n        })\n        this.$emit('options', this.options, this.dataSourceMap)\n      },\n\n      /** 完成选择 */\n      handleOk() {\n        let value = this.selectedTable.dataSource.map(data => data[this.valueKey])\n        this.$emit('input', value)\n        this.close()\n      },\n      /** 删除已选择的 */\n      handleDeleteSelected(record, index) {\n        this.selectedRowKeys.splice(this.selectedRowKeys.indexOf(record[this.rowKey]), 1)\n        //update--begin--autor:wangshuai-----date:20200722------for：JSelectBizComponent组件切换页数值问题------\n        this.selectedTable.dataSource.splice(this.selectedTable.dataSource.indexOf(record), 1)\n        this.innerValue.splice(this.innerValue.indexOf(record[this.valueKey]), 1)\n        console.log(\"this.selectedRowKeys:\",this.selectedRowKeys)\n        console.log(\"this.selectedTable.dataSource:\",this.selectedTable.dataSource)\n        //update--begin--autor:wangshuai-----date:20200722------for：JSelectBizComponent组件切换页数值问题------\n      },\n\n      customRowFn(record) {\n        return {\n          on: {\n            click: () => {\n              let key = record[this.rowKey]\n              if (!this.multiple) {\n                this.selectedRowKeys = [key]\n                this.selectedTable.dataSource = [record]\n              } else {\n                let index = this.selectedRowKeys.indexOf(key)\n                if (index === -1) {\n                  this.selectedRowKeys.push(key)\n                  this.selectedTable.dataSource.push(record)\n                } else {\n                  this.handleDeleteSelected(record, index)\n                }\n              }\n            }\n          }\n        }\n      },\n\n    }\n  }\n</script>\n<style lang=\"less\" scoped>\n  .full-form-item {\n    display: flex;\n    margin-right: 0;\n\n    /deep/ .ant-form-item-control-wrapper {\n      flex: 1 1;\n      display: inline-block;\n    }\n  }\n\n  .j-inline-form {\n    /deep/ .ant-form-item {\n      margin-bottom: 12px;\n    }\n\n    /deep/ .ant-form-item-label {\n      line-height: 32px;\n      width: auto;\n    }\n\n    /deep/ .ant-form-item-control {\n      height: 32px;\n      line-height: 32px;\n    }\n  }\n</style>"],"mappings":"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","ignoreList":[]}]}