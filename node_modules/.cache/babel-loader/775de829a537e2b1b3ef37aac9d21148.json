{"remainingRequest":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\知识库系统\\admin\\src\\views\\km\\search\\DocSearch.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\知识库系统\\admin\\src\\views\\km\\search\\DocSearch.vue","mtime":1740928051209},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nimport { ACCESS_TOKEN } from \"@/store/mutation-types\";\nimport { httpPostAction, getAction, downloadFileName, getActionPDF, getKeyword, abstractKmDoc as _abstractKmDoc } from \"../../../api/manage\";\nimport { AJeecgListMixin } from '@/mixins/AJeecgListMixin';\nimport Vue from \"vue\";\nimport IframePageContent from \"../../../components/layouts/IframeFReportView\";\nimport SearchHeader from '../Common/SearchHeader';\nexport default {\n  name: \"docSearch\",\n  mixins: [AJeecgListMixin],\n  components: {\n    IframePageContent: IframePageContent,\n    SearchHeader: SearchHeader\n  },\n  data: function data() {\n    return {\n      suggestions: [],\n      pageTitle: \"检索结果\",\n      boolCheckChange: true,\n      knowledgeTitle: \"知识专题\",\n      checkedArray: [],\n      topicCodesTree: {\n        checked: [],\n        halfChecked: []\n      },\n      topicCodes: \"\",\n      // businessTypes:\"1\",\n      boolSelect: false,\n      treeData: [],\n      confirmLoading: false,\n      PDFurl: '',\n      visible: false,\n      pdfLoading: false,\n      pdfShow: true,\n      isorter: {\n        column: '_score',\n        order: 'desc'\n      },\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      },\n      checkboxVuale: [],\n      title: \"预览\",\n      width: 900,\n      // hotTopicReportList: [],\n      defaultBusinessTypeList: [],\n      docDataSource: [],\n      loadedRatio: 0,\n      isSearchResult: false,\n      filterOptions: [],\n      //要filter的字段\n      filterDictCode: 'km_dict_source',\n      //表头\n      columns: [],\n      //列设置\n      settingColumns: [],\n      //列定义\n      defColumns: [{\n        title: '#',\n        dataIndex: '',\n        key: 'rowIndex',\n        width: 60,\n        align: \"center\",\n        scopedSlots: {\n          customRender: 'indexNum'\n        }\n      }, {\n        title: '标题',\n        align: \"left\",\n        dataIndex: 'title',\n        scopedSlots: {\n          customRender: 'docTitle'\n        }\n      }, {\n        title: '文档来源',\n        align: \"center\",\n        dataIndex: 'source_dictText',\n        width: 150,\n        filters: []\n        // scopedSlots: {\n        //   filterDropdown: 'filterSource',\n        //   filterIcon: 'filterIcon'\n        // },\n      }, {\n        title: '研究类型',\n        align: \"left\",\n        dataIndex: 'businessType_dictText',\n        customCell: function customCell() {\n          return {\n            style: {\n              'max-width': '6em',\n              overflow: 'hidden',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis'\n            }\n          };\n        }\n      }, {\n        title: '操作',\n        dataIndex: 'action',\n        align: \"center\",\n        fixed: \"right\",\n        width: 180,\n        scopedSlots: {\n          filterDropdown: 'filterDropdown',\n          filterIcon: 'filterIcon',\n          customRender: 'action'\n        }\n      }],\n      options: [],\n      content: '',\n      checkedValues: '',\n      itemList: [],\n      // 要加载多选的字典\n      dictCode: 'km_dict_category',\n      url: {\n        rootList: \"/sys/category/loadTreeRoot\",\n        list: '/KM/kmDoc/searchDoc',\n        hotTopicReport: '/KM/kmSearchRecord/hotTopicReport',\n        defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n        previewKmDoc: '/KM/kmDoc/previewKmDoc',\n        downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n        addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n        delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\n        selectKeyword: '/KM/kmSearchRecord/selectKeyword',\n        abstractKmDoc: '/KM/kmDoc/abstractKmDoc'\n      },\n      visible1: false,\n      // 控制模态框显示\n      buttonLoading: false,\n      // 按钮加载状态\n      loading1: true,\n      // 模态框加载状态\n      fullText: \"\",\n      // 后端返回的完整文章摘要\n      displayedText: \"\",\n      // 逐字显示的内容\n      typingSpeed: 50,\n      // 打字速度（毫秒）\n      isGenerating: false // 是否正在生成中\n    };\n  },\n  computed: {\n    // 动态模态框标题\n    modalTitle: function modalTitle() {\n      return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\n    }\n  },\n  created: function created() {\n    this.loadTree();\n    // 调用初始化自定义table列表函数\n    this.initColumns();\n    this.initFilterDict();\n\n    //设置全局token\n    Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n    window._CONFIG['token'] = Vue.prototype.token;\n    // this.hotTopicReportFun();\n    this.initDict();\n    var params = this.$route.params;\n    console.log(\"params：\", params);\n    this.topicCodes = params.topicCodes;\n    this.businessTypes = params.businessTypes;\n\n    // if(this.businessTypes)\n    //   this.loadDefaultBusinessTypeFunc()\n\n    if (this.topicCodes == null) {\n      if (Object.keys(params).length > 0) {\n        this.boolCheckChange = params.boolCheckChange;\n        this.content = params.content;\n        var replaceTitle = this.content;\n        if (replaceTitle) replaceTitle = replaceTitle.replace(/，/g, ',');\n        // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n        // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n        if (this.boolCheckChange) {\n          params[\"content\"] = replaceTitle;\n        } else {\n          delete params[\"content\"];\n          delete params[\"boolCheckChange\"];\n        }\n        params[\"title\"] = replaceTitle;\n        params[\"keywords\"] = replaceTitle;\n        params[\"advSearchFlag\"] = 0;\n        if (params.category !== \"\" && params.category != null) {\n          this.checkboxVuale = params.category.split(\",\");\n          this.checkedValues = params.category;\n        }\n        this.searchFun(params);\n      }\n    } else {\n      this.topicCodesTree = params.topicCodesTree;\n      this.knowledgeTitle = params.knowledgeTitle;\n      var param = {};\n      param[\"topicCodes\"] = this.topicCodes;\n      this.searchFun(param);\n    }\n  },\n  watch: {\n    loadedRatio: {\n      handler: function handler(newVal, oldVal) {\n        console.log(newVal);\n        if (newVal === 1) {\n          this.pdfLoading = false;\n        }\n      }\n    }\n  },\n  methods: {\n    // 加载filter字段选项\n    initFilterDict: function initFilterDict() {\n      var _this = this;\n      //优先从缓存中读取字典配置\n      // if (getDictItemsFromCache(this.dictCode)) {\n      var options = getDictItemsFromCache(this.filterDictCode);\n      if (options) {\n        options.forEach(function (item, index) {\n          var filterOption = {};\n          filterOption.text = item.title;\n          filterOption.value = item.value;\n          _this.filterOptions.push(filterOption);\n        });\n        console.log(this.filterOptions);\n        this.defColumns[2].filters = this.filterOptions;\n        return;\n      }\n\n      //根据字典Code, 初始化字典数组\n      ajaxGetDictItems(this.filterDictCode, null).then(function (res) {\n        if (res.success) {\n          var _options = res.result;\n          console.log(_options);\n          _options.forEach(function (item, index) {\n            var filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            _this.filterOptions.push(filterOption);\n          });\n          _this.defColumns[2].filters = _this.filterOptions;\n        }\n      });\n    },\n    // 显示模态框\n    showModal: function showModal(record) {\n      this.visible1 = true;\n      this.buttonLoading = true;\n      this.isGenerating = true; // 显示“生成中”提示\n      this.abstractKmDoc(record);\n    },\n    abstractKmDoc: function abstractKmDoc(record) {\n      var _this2 = this;\n      var params = {\n        docId: record.id\n      };\n      _abstractKmDoc(this.url.abstractKmDoc, params).then(function (res) {\n        if (res.success) {\n          _this2.fullText = res.result;\n          _this2.buttonLoading = false;\n          _this2.loading1 = false;\n          _this2.isGenerating = false; // 关闭“生成中”提示\n\n          // 开始逐字显示\n          _this2.typeText();\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      }).finally(function () {});\n    },\n    // 模拟调用后端接口\n    // 逐字显示内容\n    typeText: function typeText() {\n      var _this3 = this;\n      var index = 0;\n      var timer = setInterval(function () {\n        if (index < _this3.fullText.length) {\n          _this3.displayedText += _this3.fullText.charAt(index);\n          index++;\n        } else {\n          clearInterval(timer); // 停止定时器\n        }\n      }, this.typingSpeed);\n    },\n    // 关闭模态框\n    handleCancel1: function handleCancel1() {\n      this.visible1 = false;\n      this.displayedText = \"\"; // 清空内容\n      this.loading1 = true; // 重置加载状态\n      this.isGenerating = false; // 关闭“生成中”提示\n    },\n    onInput: function onInput() {\n      console.log(\"=============\");\n      if (this.content) {\n        this.fetchSuggestions(this.content);\n      } else {\n        this.suggestions = [];\n      }\n    },\n    fetchSuggestions: function fetchSuggestions(keyword) {\n      var _this4 = this;\n      console.log(\"2222\");\n\n      // 调用后端API获取推荐术语\n      getKeyword(this.url.selectKeyword + '?' + 'keyword=' + keyword, keyword).then(function (res) {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            var a = [];\n            for (var index = 0; index < res.result.length; index++) {\n              a.push(res.result[index].corword);\n            }\n            _this4.suggestions = a;\n          } else {\n            _this4.suggestions = [];\n          }\n        } else {\n          _this4.$message.warning(res.message);\n        }\n      }).finally(function () {});\n    },\n    selectSuggestion: function selectSuggestion(suggestion) {\n      this.content = suggestion;\n      this.suggestions = [];\n      // 这里可以触发搜索操作\n    },\n    // 是否全文检索\n    onCheckChange: function onCheckChange(e) {\n      this.boolCheckChange = e.target.checked;\n      console.log(\"checked = \".concat(e.target.checked));\n    },\n    // 加载树节点，获取树数据\n    loadTree: function loadTree() {\n      var _this5 = this;\n      var params = {\n        async: false,\n        pcode: \"\"\n      };\n      getAction(this.url.rootList, params).then(function (res) {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            _this5.treeData = res.result;\n          } else {\n            _this5.treeData = [];\n          }\n        } else {\n          _this5.$message.warning(res.message);\n        }\n      }).finally(function () {});\n    },\n    // 查找一个节点的所有父节点\n    familyTree: function familyTree(treeData, id) {\n      var arrTree = [];\n      var _forFn = function forFn(arr, key) {\n        for (var i = 0; i < arr.length; i++) {\n          var item = arr[i];\n          if (item.key === key) {\n            if (item.parentId === \"0\") {\n              break;\n            } else {\n              console.log(\"父节点\", item.parentId);\n              arrTree.push(item.parentId);\n              _forFn(treeData, item.parentId);\n            }\n            break;\n          } else {\n            if (item.children != null) {\n              _forFn(item.children, key);\n            }\n          }\n        }\n      };\n      _forFn(treeData, id);\n      return arrTree;\n    },\n    // 树节点选择触发\n    onCheck: function onCheck(checkedKeys, checkedNodes) {\n      if (checkedKeys.checked.length > 1) {\n        var checkKeys = checkedKeys.checked[1];\n        checkedKeys.checked = [];\n        checkedKeys.checked.push(checkKeys);\n        var checkNodesTitle = checkedNodes.checkedNodes[1];\n        checkedNodes.checkedNodes = [];\n        checkedNodes.checkedNodes.push(checkNodesTitle);\n      }\n      console.log(\"checkedKeys\", checkedKeys);\n      console.log(\"checkedNodes\", checkedNodes);\n      var temp = new Array();\n      var tempArray = new Array();\n      this.checkedArray = checkedKeys.checked;\n      for (var i = 0; i < this.checkedArray.length; i++) {\n        var arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n        temp = temp.concat(arrTemp);\n      }\n      // 数组去重\n      tempArray = _toConsumableArray(new Set(temp));\n      console.log(\"tempArray\", tempArray);\n      checkedKeys.halfChecked = tempArray;\n      var checkedTitle = checkedNodes.checkedNodes;\n      this.knowledgeTitle = \"\";\n      for (var _i = 0; _i < checkedTitle.length; _i++) {\n        if (this.knowledgeTitle === \"\") {\n          this.knowledgeTitle = checkedTitle[_i].data.props.title;\n        } else {\n          if (checkedTitle[_i].data.props.data != null) {\n            this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[_i].data.props.title;\n          }\n        }\n      }\n      if (this.knowledgeTitle === \"\") {\n        this.knowledgeTitle = \"知识专题\";\n        this.topicCodes = null;\n      }\n      var param = this.getQueryParams(); //查询条件互相影响\n      // let param={};\n      this.topicCodes = checkedTitle[0].data.props.code;\n      param[\"topicCodes\"] = this.topicCodes;\n      this.searchFun(param);\n      // this.businessTypes=null;\n    },\n    // 自定义列表  列设置更改事件\n    onColSettingsChange: function onColSettingsChange(checkedValues) {\n      var _this6 = this;\n      var key = this.$route.name + \":colsettings\";\n      console.log(\"colsettings\", key);\n      Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000);\n      this.settingColumns = checkedValues;\n      var cols = this.defColumns.filter(function (item) {\n        if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n          return true;\n        }\n        if (_this6.settingColumns.includes(item.dataIndex)) {\n          return true;\n        }\n        return false;\n      });\n      this.columns = cols;\n    },\n    // 自定义列表  初始化\n    initColumns: function initColumns() {\n      //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n      //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n      var key = this.$route.name + \":colsettings\";\n      console.log(\"colsettings\", key);\n      var colSettings = Vue.ls.get(key);\n      if (colSettings == null || colSettings == undefined) {\n        var allSettingColumns = [];\n        this.defColumns.forEach(function (item, i, array) {\n          allSettingColumns.push(item.dataIndex);\n        });\n        this.settingColumns = allSettingColumns;\n        this.columns = this.defColumns;\n      } else {\n        this.settingColumns = colSettings;\n        var cols = this.defColumns.filter(function (item) {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true;\n          }\n          if (colSettings.includes(item.dataIndex)) {\n            return true;\n          }\n          return false;\n        });\n        this.columns = cols;\n      }\n    },\n    searchFun: function searchFun(params) {\n      var _this7 = this;\n      getAction(this.url.list, params).then(function (res) {\n        if (res.success) {\n          _this7.dataSource = res.result.kmSearchResultVOPage.records;\n          _this7.itemList = res.result.paramPath;\n          if (res.result.kmSearchResultVOPage.total) {\n            _this7.ipagination.total = res.result.kmSearchResultVOPage.total;\n          } else {\n            _this7.ipagination.total = 0;\n          }\n        } else {\n          _this7.$message.error(\"检索失败\");\n        }\n      });\n    },\n    loadData: function loadData() {\n      this.searchDocFun('2');\n    },\n    // 加载 分类数据\n    initDict: function initDict() {\n      var _this8 = this;\n      this.options = [];\n\n      //优先从缓存中读取字典配置\n      if (getDictItemsFromCache(this.dictCode)) {\n        var options = getDictItemsFromCache(this.dictCode);\n        options.forEach(function (item, index) {\n          var person = {};\n          person.label = item.title;\n          person.value = item.value;\n          _this8.options.push(person);\n        });\n        return;\n      }\n\n      //根据字典Code, 初始化字典数组\n      ajaxGetDictItems(this.dictCode, null).then(function (res) {\n        if (res.success) {\n          var _options2 = res.result;\n          _options2.forEach(function (item, index) {\n            var person = {};\n            person.label = item.title;\n            person.value = item.value;\n            _this8.options.push(person);\n          });\n        }\n      });\n    },\n    // 多选框选择触发\n    onChange: function onChange(checkedValues) {\n      this.checkedValues = checkedValues.toString();\n      console.log('checked = ', checkedValues);\n    },\n    // 按回车键触发方法\n    pressEnterFun: function pressEnterFun(e) {\n      var _this9 = this;\n      this.$nextTick(function () {\n        _this9.searchDocFun('0');\n      });\n    },\n    // 检索\n    searchDocFun: function searchDocFun(type) {\n      var _this10 = this;\n      // this.businessTypes=null;\n\n      var params = {};\n      params = this.getQueryParams(); //查询条件\n      if (type === '0') {\n        this.isSearchResult = false;\n        this.ipagination.current = 1;\n        //启用用过滤\n        this.defColumns[2].filters = this.filterOptions;\n      } else if (type === '1') {\n        this.isSearchResult = true;\n        this.ipagination.current = 1;\n        //禁用过滤\n        this.defColumns[2].filters = [];\n      }\n      this.loading = true;\n      if (this.content !== \"\" && this.content != null) {\n        var replaceTitle = this.content;\n        if (replaceTitle) replaceTitle = replaceTitle.replace(/，/g, ',');\n        // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n        // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n        if (this.boolCheckChange) {\n          params[\"content\"] = replaceTitle;\n        } else {\n          delete params[\"content\"];\n        }\n        params[\"title\"] = replaceTitle;\n        params[\"keywords\"] = replaceTitle;\n      }\n      params[\"advSearchFlag\"] = 0;\n      if (this.checkedValues !== \"\" && this.checkedValues != null) {\n        params['category'] = this.checkedValues;\n      }\n      if (this.topicCodes != null) {\n        params['topicCodes'] = this.topicCodes;\n      }\n      if (this.businessTypes != null) {\n        params['businessTypes'] = this.businessTypes;\n      }\n\n      // 判断参数是否为空\n      if (this.empty(params)) {\n        if (this.isSearchResult) {\n          params.withinSearchFlag = '1';\n        }\n        params.field = this.getQueryField();\n        params.pageNo = this.ipagination.current;\n        params.pageSize = this.ipagination.pageSize;\n        this.loading = true;\n        getAction(this.url.list, params).then(function (res) {\n          if (res.success) {\n            _this10.dataSource = res.result.kmSearchResultVOPage.records;\n            _this10.itemList = res.result.paramPath;\n            if (res.result.kmSearchResultVOPage.total) {\n              _this10.ipagination.total = res.result.kmSearchResultVOPage.total;\n            } else {\n              _this10.ipagination.total = 0;\n            }\n          } else {\n            _this10.$message.error(\"检索失败\");\n          }\n          _this10.loading = false;\n        });\n      } else {\n        this.loading = false;\n        this.$message.info(\"请输入搜索条件\");\n      }\n    },\n    loadDefaultBusinessTypeFunc: function loadDefaultBusinessTypeFunc() {\n      var _this11 = this;\n      getAction(this.url.defaultBusinessTypeList).then(function (res) {\n        if (res.success) {\n          _this11.defaultBusinessTypeList = res.result;\n        } else {\n          _this11.$message.error(\"业务加载失败\");\n        }\n      });\n    },\n    //  判断对象是否为空\n    empty: function empty(obj) {\n      for (var key in obj) {\n        return true;\n      }\n      return false;\n    },\n    //批量下载\n    downloadKmDocBatch: function downloadKmDocBatch() {\n      console.log(\"批量下载\");\n      if (!this.url.downloadKmDoc) {\n        this.$message.error(\"请设置url.downloadKmDoc属性!\");\n        return;\n      }\n      if (this.selectionRows.length <= 0) {\n        this.$message.warning('请选择一条记录！');\n        return;\n      } else {\n        var that = this;\n        this.$confirm({\n          title: \"确认下载\",\n          content: \"是否下载选中数据?\",\n          onOk: function onOk() {\n            for (var i = 0; i < that.selectionRows.length; i++) {\n              var fileName = i;\n              downloadFileName(that.url.downloadKmDoc, {\n                docId: that.selectionRows[i].id\n              });\n            }\n            that.onClearSelected();\n          }\n        });\n      }\n    },\n    //加收藏夹\n    addFavouriteKmDoc: function addFavouriteKmDoc(record) {\n      var _this12 = this;\n      var httpurl = '';\n      var method = '';\n      httpurl += this.url.addFavouriteKmDoc;\n      method = 'post';\n      httpPostAction(httpurl, {\n        docId: record.id\n      }, method).then(function (res) {\n        if (res.success) {\n          _this12.$message.success(\"收藏成功!\");\n          //this.loadData();\n          record.favourite = 1;\n        } else {\n          _this12.$message.warning(\"收藏失败!\");\n        }\n      }).finally(function () {});\n    },\n    //取消收藏夹\n    delFavouriteKmDoc: function delFavouriteKmDoc(record) {\n      var _this13 = this;\n      var httpurl = '';\n      var method = '';\n      httpurl += this.url.delFavouriteKmDoc;\n      method = 'delete';\n      httpPostAction(httpurl, {\n        docId: record.id\n      }, method).then(function (res) {\n        if (res.success) {\n          _this13.$message.success(\"取消收藏成功!\");\n          // this.loadData();\n          record.favourite = 0;\n        } else {\n          _this13.$message.warning(\"取消收藏失败!\");\n        }\n      }).finally(function () {});\n    },\n    // 显示预览窗口，初始化\n    previewKmDoc: function previewKmDoc(record) {\n      // this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n      this.PDFurl = this.url.previewKmDoc + \"?docId=\" + record.id;\n      this.visible = true;\n      this.pdfLoading = true;\n      this.pdfShow = true;\n    },\n    //关闭预览窗口\n    handleCancel: function handleCancel() {\n      this.visible = false;\n    },\n    //下载文件\n    downloadKmDoc: function downloadKmDoc(record) {\n      this.$notification.success({\n        message: '文件开始下载...',\n        duration: 1\n      });\n      downloadFileName(this.url.downloadKmDoc, {\n        docId: record.id\n      });\n    },\n    // 返回\n    backHomepage: function backHomepage() {\n      this.$router.push('/defaultDocSearch');\n    },\n    // 跳转到收藏夹\n    jumpKmDocFavouritePage: function jumpKmDocFavouritePage() {\n      this.$router.push('/km/filemanagement/KmDocFavouriteList');\n    },\n    // 跳转到个人草稿文件夹\n    jumpDraftsPage: function jumpDraftsPage() {\n      this.$router.push('/km/filemanagement/DraftsList');\n    },\n    historyBack: function historyBack() {\n      history.back();\n    },\n    // 点击个人登录，跳转页面\n    login: function login() {\n      this.$router.push('/dashboard/analysis');\n    }\n  }\n};",{"version":3,"names":["ajaxGetDictItems","getDictItemsFromCache","ACCESS_TOKEN","httpPostAction","getAction","downloadFileName","getActionPDF","getKeyword","abstractKmDoc","AJeecgListMixin","Vue","IframePageContent","SearchHeader","name","mixins","components","data","suggestions","pageTitle","boolCheckChange","knowledgeTitle","checkedArray","topicCodesTree","checked","halfChecked","topicCodes","boolSelect","treeData","confirmLoading","PDFurl","visible","pdfLoading","pdfShow","isorter","column","order","labelCol","xs","span","sm","wrapperCol","checkboxVuale","title","width","defaultBusinessTypeList","docDataSource","loadedRatio","isSearchResult","filterOptions","filterDictCode","columns","settingColumns","defColumns","dataIndex","key","align","scopedSlots","customRender","filters","customCell","style","overflow","whiteSpace","textOverflow","fixed","filterDropdown","filterIcon","options","content","checkedValues","itemList","dictCode","url","rootList","list","hotTopicReport","previewKmDoc","downloadKmDoc","addFavouriteKmDoc","delFavouriteKmDoc","selectKeyword","visible1","buttonLoading","loading1","fullText","displayedText","typingSpeed","isGenerating","computed","modalTitle","created","loadTree","initColumns","initFilterDict","prototype","token","ls","get","window","_CONFIG","initDict","params","$route","console","log","businessTypes","Object","keys","length","replaceTitle","replace","category","split","searchFun","param","watch","handler","newVal","oldVal","methods","_this","forEach","item","index","filterOption","text","value","push","then","res","success","result","showModal","record","_this2","docId","id","typeText","$message","warning","message","finally","_this3","timer","setInterval","charAt","clearInterval","handleCancel1","onInput","fetchSuggestions","keyword","_this4","a","corword","selectSuggestion","suggestion","onCheckChange","e","target","concat","_this5","async","pcode","familyTree","arrTree","forFn","arr","i","parentId","children","onCheck","checkedKeys","checkedNodes","checkKeys","checkNodesTitle","temp","Array","tempArray","arrTemp","_toConsumableArray","Set","checkedTitle","props","getQueryParams","code","onColSettingsChange","_this6","set","cols","filter","includes","colSettings","undefined","allSettingColumns","array","_this7","dataSource","kmSearchResultVOPage","records","paramPath","total","ipagination","error","loadData","searchDocFun","_this8","person","label","onChange","toString","pressEnterFun","_this9","$nextTick","type","_this10","current","loading","empty","withinSearchFlag","field","getQueryField","pageNo","pageSize","info","loadDefaultBusinessTypeFunc","_this11","obj","downloadKmDocBatch","selectionRows","that","$confirm","onOk","fileName","onClearSelected","_this12","httpurl","method","favourite","_this13","handleCancel","$notification","duration","backHomepage","$router","jumpKmDocFavouritePage","jumpDraftsPage","historyBack","history","back","login"],"sources":["src/views/km/search/DocSearch.vue"],"sourcesContent":["<template>\n  <a-layout class=\"layout\">\n\n    <a-layout-header  class=\"searchHeader\" style=\" background-color: #1a53ba;width: 100%; height: 60px\" >\n\n      <SearchHeader :title='pageTitle'/>\n\n    </a-layout-header>\n    <a-layout-content :style=\"{ background: '#fff',  minHeight: '680px' }\">\n\n      <div :bordered=\"false\" :style=\"{backgroundColor: '#f2f2f2',height: '100%'}\">\n        <!--<SearchHeader/>-->\n        <div  :style=\"{backgroundColor: '#1a53ba',padding: '10px',minWidth: '900px',height: '150px'}\">\n          <!-- 查询区域 -->\n          <div class=\"table-page-search-wrapper\">\n            <a-form layout=\"inline\">\n              <a-row>\n                <a-col :span=\"24\" style=\"text-align: center;\">\n                  <div style=\"display:inline-block\">\n                    <div style=\"float: left\">\n                      <a-input style=\"width: 800px;\" size=\"large\" placeholder=\"标题、关键字、全文\" v-model=\"content\"\n                               @pressEnter=\"pressEnterFun\" @input=\"onInput\">\n\n                        <a-icon slot=\"suffix\" @click=\"searchDocFun('0')\" type=\"search\" style=\"color:#1890FF;fontSize:22px\"/>\n                      </a-input>\n                      <ul v-if=\"suggestions.length\" class=\"suggestions-list\">\n                        <li\n                          v-for=\"(suggestion, index) in suggestions\"\n                          :key=\"index\"\n                          @click=\"selectSuggestion(suggestion)\"\n                          class=\"suggestion-item\"\n                        >\n                          {{ suggestion }}\n                        </li>\n                      </ul>\n                      <div class=\"checkbox\" style=\"width: 750px;text-align: center;margin-top: 10px;margin-left: 20px\">\n                        <a-checkbox-group :options=\"options\" v-model=\"checkboxVuale\" @change=\"onChange\"/>\n                      </div>\n                    </div>\n                    <div style=\"float: left;width: 100px;text-align: left;margin-top: -2px\">\n                  <span style=\"color: white;margin-left: 20px\">\n                   <span>全文检索</span>\n                   <a-checkbox class=\"checkbox\" v-model=\"boolCheckChange\" style=\"margin-left: 8px\"\n                               @change=\"onCheckChange\"/>\n                  </span>\n                    </div>\n                  </div>\n                </a-col>\n              </a-row>\n            </a-form>\n          </div>\n          <!-- 查询区域-END -->\n        </div>\n        <!-- 表格区域 -->\n        <div style=\"background-color:white;margin: 15px;padding: 15px\">\n          <!-- 操作按钮区域 -->\n          <div class=\"table-operator\">\n            <!--      <a-button type=\"primary\" icon=\"download\" @click=\"handleExportXls('草稿文件夹')\">导出</a-button>-->\n            <a-dropdown v-has=\"'searchList:batchDownload'\" v-if=\"selectedRowKeys.length > 0\">\n              <a-menu slot=\"overlay\">\n                <a-menu-item key=\"1\" @click=\"downloadKmDocBatch\">\n                  <a-icon type=\"vertical-align-bottom\"/>\n                  批量下载\n                </a-menu-item>\n              </a-menu>\n              <a-button style=\"margin-left: 8px\"> 批量操作\n                <a-icon type=\"down\"/>\n              </a-button>\n            </a-dropdown>\n          </div>\n\n          <!-- table区域-begin -->\n          <div>\n            <div  class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 15px;color: #303133;\">\n          <span v-for=\"(item,index) in itemList\" :key=\"index\">\n            <span><b v-if=\"index==0\">检索范围: </b><span v-if=\"index==itemList.length-1\">{{item}}</span> <span v-else>{{item}}<span\n              style=\"font-weight: bold;color: red\">-></span>  </span></span>\n          </span>\n            </div>\n\n            <!--<div v-else class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 15px;color: #303133;\">-->\n            <!--<span v-for=\"(item,index) in defaultBusinessTypeList\" :xl=\"4\" :lg=\"4\" :md=\"4\" :sm=\"4\" :key=\"index\">-->\n            <!--<span style=\"text-align: left;margin-left: 10px\">-->\n            <!--<span @click=\"searchBusinessType(item.value)\">-->\n            <!--<a v-if=\"item.value === businessTypes\" style=\"color: #303133;font-weight: bold\">{{item.text}}</a>-->\n            <!--<a v-else style=\"color: #303133\">{{item.text}}</a></span>-->\n            <!--</span>-->\n            <!--</span>-->\n            <!--</div>-->\n\n            <a-table\n              ref=\"table\"\n              size=\"middle\"\n              rowKey=\"id\"\n              :columns=\"columns\"\n              :dataSource=\"dataSource\"\n              :pagination=\"ipagination\"\n              :loading=\"loading\"\n              :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange}\"\n              @change=\"handleTableChange\">\n\n\n              // 添加自定义列表插槽\n              <div slot=\"filterDropdown\">\n                <a-card style=\"width: 350px\">\n                  <a-checkbox-group @change=\"onColSettingsChange\" v-model=\"settingColumns\" :defaultValue=\"settingColumns\">\n                    <a-row>\n                      <template v-for=\"(item,index) in defColumns\">\n                        <template v-if=\"item.key!='rowIndex'&& item.dataIndex!='action'\">\n                          <a-col :span=\"12\">\n                            <a-checkbox :value=\"item.dataIndex\">{{ item.title }}</a-checkbox>\n                          </a-col>\n                        </template>\n                      </template>\n                    </a-row>\n                  </a-checkbox-group>\n                </a-card>\n              </div>\n              <a-icon slot=\"filterIcon\" type='setting' title=\"自定义列\"\n                      :style=\"{ fontSize:'18px',color:  '#108ee9',minWidth:'35px'}\"/>\n\n              <span slot=\"indexNum\" slot-scope=\"text, record,index\">\n                  <p>{{index+1+(ipagination.current-1)*ipagination.pageSize}}</p>\n               </span>\n              <span slot=\"action\" slot-scope=\"text, record\" style=\"width: 150px;\">\n\n           <!--<a-icon type=\"read\" title=\"预览\" @click=\"previewKmDoc(record)\"-->\n                <!--:style=\"{ fontSize: '18px', color: '#1890FF', }\"/>-->\n\t\t\t\t\t<img src=\"../../../assets/gpt.png\" style=\"width: 25px;height: 25px;\"@click=\"showModal(record)\" />\n\t\t\t\t\t<a-divider type=\"vertical\"/>\t\n\n          <a-icon v-if=\"record.downloadFlag==1\" type=\"download\" title=\"下载\" @click=\"downloadKmDoc(record)\"\n                  :style=\"{ fontSize: '18px', color: '#1890FF'}\"/>\n          <a-icon v-else type=\"download\" title=\"禁止下载\" :style=\"{ fontSize: '18px', color: '#909399'}\"/>\n\n          <a-divider type=\"vertical\"/>\n\n          <a-icon v-if=\"record.favourite==0\" type=\"star\" title=\"收藏\" @click=\"addFavouriteKmDoc(record)\"\n                  :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n          <a-icon v-else type=\"star\" theme=\"filled\" title=\"取消收藏\" @click=\"delFavouriteKmDoc(record)\"\n                  :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n\n        </span>\n\n              <span slot=\"docTitle\" slot-scope=\"text,record\">\n           <span @click=\"previewKmDoc(record,true)\"><a style=\"color: #303133\">\n             <span v-html=\" record.title \"></span></a></span>\n        </span>\n              <!--<span slot=\"test\" slot-scope=\"text, record\">-->\n              <!--<span v-html=\"record.title\"></span>-->\n              <!--</span>-->\n\n            </a-table>\n          </div>\n\n          <div>\n\n            <!-- 模态框 -->\n            <a-modal\n              :title=\"modalTitle\"\n              :visible=\"visible1\"\n              :footer=\"null\"\n              @cancel=\"handleCancel1\"\n              :maskClosable=\"false\"\n            >\n              <!-- 加载动画 -->\n              <a-spin v-if=\"loading1\" size=\"large\" />\n\n              <!-- 文章摘要内容 -->\n              <div v-else class=\"content\">\n                <p>{{ displayedText }}</p>\n              </div>\n            </a-modal>\n          </div>\n\n\n\n          <b-j-modal :title=\"title\"\n                     :width=\"width\"\n                     :visible=\"visible\"\n                     @cancel=\"handleCancel\"\n                     cancelText=\"关闭\"\n                     :okButtonProps=\"{ class:{'jee-hidden': true} }\">\n            <p-d-f-modal :p-d-furl=\"PDFurl\" :iframeWidth=\"width\"/>\n          </b-j-modal>\n\n        </div>\n      </div>\n    </a-layout-content>\n  </a-layout>\n</template>\n\n<script>\nimport {ajaxGetDictItems, getDictItemsFromCache} from '@/api/api'\nimport {ACCESS_TOKEN} from \"@/store/mutation-types\"\nimport {httpPostAction, getAction, downloadFileName, getActionPDF,getKeyword,abstractKmDoc} from \"../../../api/manage\";\nimport {AJeecgListMixin} from '@/mixins/AJeecgListMixin'\nimport Vue from \"vue\";\nimport IframePageContent from \"../../../components/layouts/IframeFReportView\";\nimport SearchHeader from '../Common/SearchHeader'\n\nexport default {\n  name: \"docSearch\",\n  mixins: [AJeecgListMixin],\n  components: {IframePageContent,SearchHeader},\n  data() {\n    return {\n      suggestions:[],\n      pageTitle:\"检索结果\",\n      boolCheckChange: true,\n      knowledgeTitle: \"知识专题\",\n      checkedArray: [],\n      topicCodesTree: {\n        checked: [],\n        halfChecked: [],\n      },\n      topicCodes:\"\",\n      // businessTypes:\"1\",\n      boolSelect: false,\n      treeData: [],\n      confirmLoading: false,\n      PDFurl: '',\n      visible: false,\n      pdfLoading: false,\n      pdfShow: true,\n      isorter: {\n        column: '_score',\n        order: 'desc',\n      },\n      labelCol: {\n        xs: {span: 24},\n        sm: {span: 5},\n      },\n      wrapperCol: {\n        xs: {span: 24},\n        sm: {span: 16},\n      },\n      checkboxVuale: [],\n      title: \"预览\",\n      width: 900,\n      // hotTopicReportList: [],\n      defaultBusinessTypeList: [],\n      docDataSource: [],\n      loadedRatio: 0,\n      isSearchResult: false,\n      filterOptions:[],\n      //要filter的字段\n      filterDictCode: 'km_dict_source',\n      //表头\n      columns: [],\n      //列设置\n      settingColumns: [],\n      //列定义\n      defColumns: [\n        {\n          title: '#',\n          dataIndex: '',\n          key: 'rowIndex',\n          width: 60,\n          align: \"center\",\n          scopedSlots: {customRender: 'indexNum'}\n        },\n        {\n          title: '标题',\n          align: \"left\",\n          dataIndex: 'title',\n          scopedSlots: {customRender: 'docTitle'}\n        },\n        {\n          title: '文档来源',\n          align: \"center\",\n          dataIndex: 'source_dictText',\n          width: 150,\n          filters: [],\n          // scopedSlots: {\n          //   filterDropdown: 'filterSource',\n          //   filterIcon: 'filterIcon'\n          // },\n        },\n        {\n          title: '研究类型',\n          align: \"left\",\n          dataIndex: 'businessType_dictText',\n          customCell: () => {\n            return {\n              style: {\n                'max-width': '6em',\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                textOverflow:'ellipsis'\n              },\n            };\n          },\n        },\n        {\n          title: '操作',\n          dataIndex: 'action',\n          align: \"center\",\n          fixed: \"right\",\n          width: 180,\n          scopedSlots: {\n            filterDropdown: 'filterDropdown',\n            filterIcon: 'filterIcon',\n            customRender: 'action'\n          }\n        },\n      ],\n      options: [],\n      content: '',\n      checkedValues: '',\n      itemList: [],\n      // 要加载多选的字典\n      dictCode: 'km_dict_category',\n\n      url: {\n        rootList: \"/sys/category/loadTreeRoot\",\n        list: '/KM/kmDoc/searchDoc',\n        hotTopicReport: '/KM/kmSearchRecord/hotTopicReport',\n        defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n        previewKmDoc: '/KM/kmDoc/previewKmDoc',\n        downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n        addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n        delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\n        selectKeyword: '/KM/kmSearchRecord/selectKeyword',\n        abstractKmDoc: '/KM/kmDoc/abstractKmDoc',\n      },\n      visible1: false, // 控制模态框显示\n      buttonLoading: false, // 按钮加载状态\n      loading1: true, // 模态框加载状态\n      fullText: \"\", // 后端返回的完整文章摘要\n      displayedText: \"\", // 逐字显示的内容\n      typingSpeed: 50, // 打字速度（毫秒）\n      isGenerating: false, // 是否正在生成中\n    }\n  },\n  computed: {\n    // 动态模态框标题\n    modalTitle() {\n      return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\n    },\n  },\n  created() {\n    this.loadTree();\n    // 调用初始化自定义table列表函数\n    this.initColumns();\n    this.initFilterDict();\n\n    //设置全局token\n    Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n    window._CONFIG['token'] = Vue.prototype.token;\n    // this.hotTopicReportFun();\n    this.initDict();\n    let params = this.$route.params;\n    console.log(\"params：\", params);\n    this.topicCodes=params.topicCodes;\n    this.businessTypes=params.businessTypes;\n\n    // if(this.businessTypes)\n    //   this.loadDefaultBusinessTypeFunc()\n\n    if(this.topicCodes==null){\n      if (Object.keys(params).length > 0) {\n        this.boolCheckChange = params.boolCheckChange;\n        this.content = params.content;\n        let replaceTitle=this.content;\n        if(replaceTitle)\n          replaceTitle = replaceTitle.replace(/，/g, ',');\n        // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n        // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n        if(this.boolCheckChange){\n          params[\"content\"] = replaceTitle;\n        }else{\n          delete params[\"content\"];\n          delete params[\"boolCheckChange\"];\n        }\n        params[\"title\"] = replaceTitle;\n        params[\"keywords\"] = replaceTitle;\n        params[\"advSearchFlag\"] = 0;\n\n        if (params.category !== \"\" && params.category != null) {\n          this.checkboxVuale = params.category.split(\",\");\n          this.checkedValues = params.category\n        }\n        this.searchFun(params);\n      }\n    }else{\n      this.topicCodesTree=params.topicCodesTree;\n      this.knowledgeTitle=params.knowledgeTitle;\n      let param={};\n      param[\"topicCodes\"]=this.topicCodes;\n      this.searchFun(param);\n    }\n  },\n\n  watch: {\n    loadedRatio: {\n      handler(newVal, oldVal) {\n        console.log(newVal)\n        if (newVal === 1) {\n          this.pdfLoading = false;\n        }\n      }\n    }\n  },\n  methods: {\n    // 加载filter字段选项\n    initFilterDict() {\n      //优先从缓存中读取字典配置\n      // if (getDictItemsFromCache(this.dictCode)) {\n      let options = getDictItemsFromCache(this.filterDictCode)\n      if(options){\n        options.forEach((item, index) => {\n          let filterOption = {};\n          filterOption.text = item.title;\n          filterOption.value = item.value;\n          this.filterOptions.push(filterOption);\n        });\n        console.log(this.filterOptions);\n        this.defColumns[2].filters =this.filterOptions;\n        return\n      }\n\n\n\n\n      //根据字典Code, 初始化字典数组\n      ajaxGetDictItems(this.filterDictCode, null).then((res) => {\n        if (res.success) {\n          let options = res.result\n          console.log(options);\n          options.forEach((item, index) => {\n            let filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            this.filterOptions.push(filterOption);\n          });\n          this.defColumns[2].filters =this.filterOptions;\n        }\n      })\n\n    },\n\n\n    // 显示模态框\n    showModal(record) {\n      this.visible1 = true;\n      this.buttonLoading = true;\n      this.isGenerating = true; // 显示“生成中”提示\n      this.abstractKmDoc(record)\n\n    },\n\n    abstractKmDoc(record){\n      let params = {\n        docId: record.id,\n      };\n      abstractKmDoc(this.url.abstractKmDoc, params).then(res => {\n        if (res.success) {\n          this.fullText = res.result\n          this.buttonLoading = false;\n          this.loading1 = false;\n          this.isGenerating = false; // 关闭“生成中”提示\n\n          // 开始逐字显示\n          this.typeText();\n\n        } else {\n          this.$message.warning(res.message)\n        }\n      }).finally(() => {\n      })\n\n    },\n\n    // 模拟调用后端接口\n\n\n    // 逐字显示内容\n    typeText() {\n      let index = 0;\n      const timer = setInterval(() => {\n        if (index < this.fullText.length) {\n          this.displayedText += this.fullText.charAt(index);\n          index++;\n        } else {\n          clearInterval(timer); // 停止定时器\n        }\n      }, this.typingSpeed);\n    },\n\n    // 关闭模态框\n    handleCancel1() {\n      this.visible1 = false;\n      this.displayedText = \"\"; // 清空内容\n      this.loading1 = true; // 重置加载状态\n      this.isGenerating = false; // 关闭“生成中”提示\n    },\n\n    onInput() {\n      console.log(\"=============\")\n      if (this.content) {\n        this.fetchSuggestions(this.content);\n      } else {\n        this.suggestions = [];\n      }\n    },\n    fetchSuggestions(keyword) {\n\n      console.log(\"2222\")\n\n      // 调用后端API获取推荐术语\n      getKeyword(this.url.selectKeyword+'?'+'keyword='+keyword, keyword).then(res => {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            let a = []\n            for (var index = 0; index < res.result.length; index++) {\n              a.push(res.result[index].corword)\n            }\n\n            this.suggestions = a\n          } else {\n            this.suggestions = []\n          }\n        } else {\n          this.$message.warning(res.message)\n        }\n      }).finally(() => {\n      })\n    },\n    selectSuggestion(suggestion) {\n      this.content = suggestion;\n      this.suggestions = [];\n      // 这里可以触发搜索操作\n    },\n\n\n    // 是否全文检索\n    onCheckChange(e) {\n      this.boolCheckChange = e.target.checked\n      console.log(`checked = ${e.target.checked}`);\n    },\n\n    // 加载树节点，获取树数据\n    loadTree() {\n      let params = {\n        async: false,\n        pcode: \"\"\n      };\n      getAction(this.url.rootList, params).then(res => {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            this.treeData = res.result\n          } else {\n            this.treeData = []\n          }\n        } else {\n          this.$message.warning(res.message)\n        }\n      }).finally(() => {\n      })\n    },\n\n    // 查找一个节点的所有父节点\n    familyTree(treeData, id) {\n      var arrTree = [];\n      var forFn = function (arr, key) {\n        for (var i = 0; i < arr.length; i++) {\n          var item = arr[i]\n          if (item.key === key) {\n            if (item.parentId === \"0\") {\n              break;\n            } else {\n              console.log(\"父节点\", item.parentId);\n              arrTree.push(item.parentId);\n              forFn(treeData, item.parentId);\n            }\n            break\n          } else {\n            if (item.children != null) {\n              forFn(item.children, key);\n            }\n          }\n        }\n      }\n      forFn(treeData, id);\n      return arrTree\n    },\n\n    // 树节点选择触发\n    onCheck(checkedKeys, checkedNodes) {\n      if (checkedKeys.checked.length > 1) {\n        let checkKeys = checkedKeys.checked[1];\n        checkedKeys.checked = [];\n        checkedKeys.checked.push(checkKeys);\n        let checkNodesTitle = checkedNodes.checkedNodes[1];\n        checkedNodes.checkedNodes = [];\n        checkedNodes.checkedNodes.push(checkNodesTitle);\n      }\n      console.log(\"checkedKeys\", checkedKeys);\n      console.log(\"checkedNodes\", checkedNodes);\n      let temp = new Array();\n      let tempArray = new Array();\n      this.checkedArray = checkedKeys.checked;\n\n      for (let i = 0; i < this.checkedArray.length; i++) {\n        let arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n        temp = temp.concat(arrTemp);\n      }\n      // 数组去重\n      tempArray = [...new Set(temp)];\n      console.log(\"tempArray\", tempArray);\n      checkedKeys.halfChecked = tempArray;\n      let checkedTitle = checkedNodes.checkedNodes;\n      this.knowledgeTitle = \"\";\n      for (let i = 0; i < checkedTitle.length; i++) {\n        if (this.knowledgeTitle === \"\") {\n          this.knowledgeTitle = checkedTitle[i].data.props.title;\n        } else {\n          if (checkedTitle[i].data.props.data != null) {\n            this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[i].data.props.title;\n          }\n        }\n      }\n      if (this.knowledgeTitle === \"\") {\n        this.knowledgeTitle = \"知识专题\"\n        this.topicCodes = null;\n      }\n      let param = this.getQueryParams();//查询条件互相影响\n      // let param={};\n      this.topicCodes=checkedTitle[0].data.props.code;\n      param[\"topicCodes\"]=this.topicCodes;\n      this.searchFun(param);\n      // this.businessTypes=null;\n\n    },\n    // 自定义列表  列设置更改事件\n    onColSettingsChange(checkedValues) {\n      var key = this.$route.name + \":colsettings\";\n      console.log(\"colsettings\", key);\n      Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000)\n      this.settingColumns = checkedValues;\n      const cols = this.defColumns.filter(item => {\n        if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n          return true\n        }\n        if (this.settingColumns.includes(item.dataIndex)) {\n          return true\n        }\n        return false\n      })\n      this.columns = cols;\n    },\n    // 自定义列表  初始化\n    initColumns() {\n      //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n      //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n      var key = this.$route.name + \":colsettings\";\n      console.log(\"colsettings\", key);\n      let colSettings = Vue.ls.get(key);\n      if (colSettings == null || colSettings == undefined) {\n        let allSettingColumns = [];\n        this.defColumns.forEach(function (item, i, array) {\n          allSettingColumns.push(item.dataIndex);\n        })\n        this.settingColumns = allSettingColumns;\n        this.columns = this.defColumns;\n      } else {\n        this.settingColumns = colSettings;\n        const cols = this.defColumns.filter(item => {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true;\n          }\n          if (colSettings.includes(item.dataIndex)) {\n            return true;\n          }\n          return false;\n        })\n        this.columns = cols;\n      }\n    },\n\n    searchFun(params) {\n      getAction(this.url.list, params).then((res) => {\n        if (res.success) {\n          this.dataSource = res.result.kmSearchResultVOPage.records;\n          this.itemList = res.result.paramPath;\n          if (res.result.kmSearchResultVOPage.total) {\n            this.ipagination.total = res.result.kmSearchResultVOPage.total;\n          } else {\n            this.ipagination.total = 0;\n          }\n        } else {\n          this.$message.error(\"检索失败\");\n        }\n      })\n    },\n\n    loadData() {\n      this.searchDocFun('2');\n    },\n\n    // 加载 分类数据\n    initDict() {\n      this.options = [];\n\n      //优先从缓存中读取字典配置\n      if (getDictItemsFromCache(this.dictCode)) {\n        let options = getDictItemsFromCache(this.dictCode)\n        options.forEach((item, index) => {\n          let person = {};\n          person.label = item.title;\n          person.value = item.value;\n          this.options.push(person);\n        });\n        return\n      }\n\n      //根据字典Code, 初始化字典数组\n      ajaxGetDictItems(this.dictCode, null).then((res) => {\n        if (res.success) {\n          let options = res.result\n          options.forEach((item, index) => {\n            let person = {};\n            person.label = item.title;\n            person.value = item.value;\n            this.options.push(person);\n          });\n        }\n      })\n\n\n    },\n\n    // 多选框选择触发\n    onChange(checkedValues) {\n      this.checkedValues = checkedValues.toString();\n      console.log('checked = ', checkedValues);\n    },\n    // 按回车键触发方法\n    pressEnterFun(e) {\n      this.$nextTick(() => {\n        this.searchDocFun('0');\n      })\n    },\n    // 检索\n    searchDocFun(type) {\n      // this.businessTypes=null;\n\n      let params = {};\n      params = this.getQueryParams();//查询条件\n      if (type === '0') {\n        this.isSearchResult = false;\n        this.ipagination.current = 1;\n        //启用用过滤\n        this.defColumns[2].filters =this.filterOptions;\n      } else if (type === '1') {\n        this.isSearchResult = true;\n        this.ipagination.current = 1;\n        //禁用过滤\n        this.defColumns[2].filters = [];\n      }\n\n      this.loading = true;\n\n      if (this.content !== \"\" && this.content != null) {\n        let replaceTitle=this.content\n        if(replaceTitle)\n          replaceTitle = replaceTitle.replace(/，/g, ',');\n        // replaceTitle = replaceTitle.replace(/\\[/g, '%5B');\n        // replaceTitle = replaceTitle.replace(/\\]/g, '%5D');\n        if(this.boolCheckChange){\n          params[\"content\"] = replaceTitle;\n        }else{\n          delete params[\"content\"];\n        }\n        params[\"title\"] = replaceTitle;\n        params[\"keywords\"] = replaceTitle;\n      }\n      params[\"advSearchFlag\"] = 0;\n      if (this.checkedValues !== \"\" && this.checkedValues != null) {\n        params['category'] = this.checkedValues;\n      }\n      if( this.topicCodes!=null){\n        params['topicCodes']=this.topicCodes;\n      }\n      if(this.businessTypes!=null){\n        params['businessTypes']=this.businessTypes;\n      }\n\n      // 判断参数是否为空\n      if (this.empty(params)) {\n        if (this.isSearchResult) {\n          params.withinSearchFlag = '1';\n        }\n        params.field = this.getQueryField();\n        params.pageNo = this.ipagination.current;\n        params.pageSize = this.ipagination.pageSize;\n        this.loading = true;\n        getAction(this.url.list, params).then((res) => {\n          if (res.success) {\n            this.dataSource = res.result.kmSearchResultVOPage.records;\n            this.itemList = res.result.paramPath;\n            if (res.result.kmSearchResultVOPage.total) {\n              this.ipagination.total = res.result.kmSearchResultVOPage.total;\n            } else {\n              this.ipagination.total = 0;\n            }\n          } else {\n            this.$message.error(\"检索失败\");\n          }\n          this.loading = false;\n        })\n      } else {\n        this.loading = false;\n        this.$message.info(\"请输入搜索条件\");\n      }\n    },\n\n    loadDefaultBusinessTypeFunc(){\n      getAction(this.url.defaultBusinessTypeList).then(res => {\n        if (res.success) {\n          this.defaultBusinessTypeList = res.result;\n        } else {\n          this.$message.error(\"业务加载失败\");\n        }\n      })\n    },\n\n    //  判断对象是否为空\n    empty(obj) {\n      for (let key in obj) {\n        return true;\n      }\n      return false;\n    },\n\n    //批量下载\n    downloadKmDocBatch() {\n      console.log(\"批量下载\")\n      if (!this.url.downloadKmDoc) {\n        this.$message.error(\"请设置url.downloadKmDoc属性!\")\n        return\n      }\n      if (this.selectionRows.length <= 0) {\n        this.$message.warning('请选择一条记录！');\n        return;\n      } else {\n        var that = this;\n        this.$confirm({\n          title: \"确认下载\",\n          content: \"是否下载选中数据?\",\n          onOk: function () {\n            for (var i = 0; i < that.selectionRows.length; i++) {\n              let fileName = i;\n              downloadFileName(that.url.downloadKmDoc, {docId: that.selectionRows[i].id})\n            }\n            that.onClearSelected();\n          }\n        });\n      }\n    },\n    //加收藏夹\n    addFavouriteKmDoc(record) {\n      let httpurl = '';\n      let method = '';\n      httpurl += this.url.addFavouriteKmDoc;\n      method = 'post';\n      httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n        if (res.success) {\n          this.$message.success(\"收藏成功!\");\n          //this.loadData();\n          record.favourite = 1;\n        } else {\n          this.$message.warning(\"收藏失败!\");\n        }\n      }).finally(() => {\n      })\n    },\n    //取消收藏夹\n    delFavouriteKmDoc(record) {\n      let httpurl = '';\n      let method = '';\n      httpurl += this.url.delFavouriteKmDoc;\n      method = 'delete';\n      httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n        if (res.success) {\n          this.$message.success(\"取消收藏成功!\");\n          // this.loadData();\n          record.favourite = 0;\n        } else {\n          this.$message.warning(\"取消收藏失败!\");\n        }\n      }).finally(() => {\n      })\n    },\n\n    // 显示预览窗口，初始化\n    previewKmDoc(record) {\n      // this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n      this.PDFurl =  this.url.previewKmDoc + \"?docId=\" + record.id;\n      this.visible = true;\n      this.pdfLoading = true;\n      this.pdfShow = true;\n    },\n    //关闭预览窗口\n    handleCancel() {\n      this.visible = false;\n    },\n\n    //下载文件\n    downloadKmDoc(record) {\n      this.$notification.success({\n        message: '文件开始下载...',\n        duration: 1,\n      });\n      downloadFileName(this.url.downloadKmDoc, {docId: record.id})\n    },\n\n    // 返回\n    backHomepage() {\n      this.$router.push('/defaultDocSearch');\n    },\n    // 跳转到收藏夹\n    jumpKmDocFavouritePage(){\n      this.$router.push('/km/filemanagement/KmDocFavouriteList');\n    },\n    // 跳转到个人草稿文件夹\n    jumpDraftsPage(){\n      this.$router.push('/km/filemanagement/DraftsList');\n    },\n    historyBack(){\n      history.back()\n    },\n    // 点击个人登录，跳转页面\n    login() {\n      this.$router.push('/dashboard/analysis');\n    },\n\n  }\n}\n</script>\n\n<style scoped>\n@import '~@assets/less/common.less';\n\n.suggestions-list {\n  /*    position: absolute;\n      top: 100%;\n      left: 0;\n      right: 0;\n      margin-top: 5px;\n      padding: 0;\n      list-style: none; */\n  position: fixed;\n  width: 600px;\n  background-color: white;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  list-style: none;\n}\n\n.suggestion-item {\n  padding: 10px;\n  font-size: 14px;\n  color: #333;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.2s ease;\n  text-align: left;\n  padding: 10px 15px; /* 调整内边距，左侧留出更多空间 */\n}\n\n.suggestion-item:hover {\n  background-color: #f8f9fa;\n  transform: translateX(5px);\n}\n\n.suggestion-item:active {\n  background-color: #e9ecef;\n}\n\n\n\n/* 按钮动画 */\n.ant-btn-primary {\n  transition: all 0.3s ease;\n}\n\n.ant-btn-primary:hover {\n  transform: scale(1.05);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n/* 模态框内容样式 */\n.content {\n  font-size: 16px;\n  line-height: 1.6;\n  color: #333;\n  padding: 20px;\n  background: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* 打字机效果 */\n@keyframes blink {\n  0%,\n  100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n}\n\n.content p::after {\n  content: \"|\";\n  animation: blink 1s infinite;\n  color: #1890ff;\n}\n\n/* 生成中提示动画 */\n@keyframes generating {\n  0% {\n    opacity: 0.5;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.5;\n  }\n}\n\n.generating-text {\n  animation: generating 1.5s infinite;\n  color: #1890ff;\n  font-weight: bold;\n}\n</style>"],"mappings":"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","ignoreList":[]}]}