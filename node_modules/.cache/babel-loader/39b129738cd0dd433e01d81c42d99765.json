{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!E:\\work-25\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\work-25\\知识库系统\\admin\\src\\components\\jeecg\\JVxeTable\\mixins\\vxe.web.socket.mixins.js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\components\\jeecg\\JVxeTable\\mixins\\vxe.web.socket.mixins.js","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store from '@/store/';\nimport { randomUUID } from '@/utils/util';\n// vxe socket\nvar vs = {\n  // 页面唯一 id，用于标识同一用户，不同页面的websocket\n  pageId: randomUUID(),\n  // webSocket 对象\n  ws: null,\n  // 一些常量\n  constants: {\n    // 消息类型\n    TYPE: 'type',\n    // 消息数据\n    DATA: 'data',\n    // 消息类型：心跳检测\n    TYPE_HB: 'heart_beat',\n    // 消息类型：通用数据传递\n    TYPE_CSD: 'common_send_date',\n    // 消息类型：更新vxe table数据\n    TYPE_UVT: 'update_vxe_table'\n  },\n  // 心跳检测\n  heartCheck: {\n    // 间隔时间，间隔多久发送一次心跳消息\n    interval: 10000,\n    // 心跳消息超时时间，心跳消息多久没有回复后重连\n    timeout: 6000,\n    timeoutTimer: null,\n    clear: function clear() {\n      clearTimeout(this.timeoutTimer);\n      return this;\n    },\n    start: function start() {\n      vs.sendMessage(vs.constants.TYPE_HB, '');\n      // 如果超过一定时间还没重置，说明后端主动断开了\n      this.timeoutTimer = window.setTimeout(function () {\n        vs.reconnect();\n      }, this.timeout);\n      return this;\n    },\n    // 心跳消息返回\n    back: function back() {\n      var _this = this;\n      this.clear();\n      window.setTimeout(function () {\n        return _this.start();\n      }, this.interval);\n    }\n  },\n  /** 初始化 WebSocket */initialWebSocket: function initialWebSocket() {\n    if (this.ws === null) {\n      var userId = store.getters.userInfo.id;\n      var domain = window._CONFIG['domianURL'].replace('https://', 'wss://').replace('http://', 'ws://');\n      var url = \"\".concat(domain, \"/vxeSocket/\").concat(userId, \"/\").concat(this.pageId);\n      this.ws = new WebSocket(url);\n      this.ws.onopen = this.on.open.bind(this);\n      this.ws.onerror = this.on.error.bind(this);\n      this.ws.onmessage = this.on.message.bind(this);\n      this.ws.onclose = this.on.close.bind(this);\n      console.log('this.ws: ', this.ws);\n    }\n  },\n  // 发送消息\n  sendMessage: function sendMessage(type, message) {\n    try {\n      var ws = this.ws;\n      if (ws != null && ws.readyState === ws.OPEN) {\n        ws.send(JSON.stringify({\n          type: type,\n          data: message\n        }));\n      }\n    } catch (err) {\n      console.warn('【VXEWebSocket】发送消息失败：(' + err.code + ')');\n    }\n  },\n  /** 绑定全局VXE表格 */\n  tableMap: new Map(),\n  CSDMap: new Map(),\n  /** 添加绑定 */addBind: function addBind(map, key, value) {\n    var binds = map.get(key);\n    if (Array.isArray(binds)) {\n      binds.push(value);\n    } else {\n      map.set(key, [value]);\n    }\n  },\n  /** 移除绑定 */removeBind: function removeBind(map, key, value) {\n    var binds = map.get(key);\n    if (Array.isArray(binds)) {\n      for (var i = 0; i < binds.length; i++) {\n        var bind = binds[i];\n        if (bind === value) {\n          binds.splice(i, 1);\n          break;\n        }\n      }\n      if (binds.length === 0) {\n        map.delete(key);\n      }\n    } else {\n      map.delete(key);\n    }\n  },\n  // 呼叫绑定的表单\n  callBind: function callBind(map, key, callback) {\n    var binds = map.get(key);\n    if (Array.isArray(binds)) {\n      binds.forEach(callback);\n    }\n  },\n  lockReconnect: false,\n  /** 尝试重连 */reconnect: function reconnect() {\n    var _this2 = this;\n    if (this.lockReconnect) return;\n    this.lockReconnect = true;\n    setTimeout(function () {\n      if (_this2.ws && _this2.ws.close) {\n        _this2.ws.close();\n      }\n      _this2.ws = null;\n      console.info('【VXEWebSocket】尝试重连...');\n      _this2.initialWebSocket();\n      _this2.lockReconnect = false;\n    }, 5000);\n  },\n  on: {\n    open: function open() {\n      console.log('【VXEWebSocket】连接成功');\n      this.heartCheck.start();\n    },\n    error: function error(e) {\n      console.warn('【VXEWebSocket】连接发生错误:', e);\n      this.reconnect();\n    },\n    message: function message(e) {\n      var _this3 = this;\n      // 解析消息\n      var json;\n      try {\n        json = JSON.parse(e.data);\n      } catch (e) {\n        console.warn('【VXEWebSocket】收到无法解析的消息:', e.data);\n        return;\n      }\n      var type = json[this.constants.TYPE];\n      var data = json[this.constants.DATA];\n      switch (type) {\n        // 心跳检测\n        case this.constants.TYPE_HB:\n          this.heartCheck.back();\n          break;\n        // 通用数据传递\n        case this.constants.TYPE_CSD:\n          this.callBind(this.CSDMap, data.key, function (fn) {\n            return fn.apply(_this3, data.args);\n          });\n          break;\n        // 更新form数据\n        case this.constants.TYPE_UVT:\n          this.callBind(this.tableMap, data.socketKey, function (vm) {\n            return _this3.onVM['onUpdateTable'].apply(vm, data.args);\n          });\n          break;\n        default:\n          console.warn('【VXEWebSocket】收到不识别的消息类型:' + type);\n          break;\n      }\n    },\n    close: function close(e) {\n      console.log('【VXEWebSocket】连接被关闭:', e);\n      this.reconnect();\n    }\n  },\n  onVM: {\n    /** 收到更新表格的消息 */onUpdateTable: function onUpdateTable(row, caseId) {\n      var _this4 = this;\n      // 判断是不是自己发的消息\n      if (this.caseId !== caseId) {\n        var tableRow = this.getIfRowById(row.id).row;\n        // 局部保更新数据\n        if (tableRow) {\n          // 特殊处理拖轮状态\n          if (row['tug_status'] && tableRow['tug_status']) {\n            row['tug_status'] = Object.assign({}, tableRow['tug_status'], row['tug_status']);\n          }\n          // 判断是否启用重载特效\n          if (this.reloadEffect) {\n            this.$set(this.reloadEffectRowKeysMap, row.id, true);\n          }\n          Object.keys(row).forEach(function (key) {\n            if (key !== 'id') {\n              _this4.$set(tableRow, key, row[key]);\n            }\n          });\n          this.$refs.vxe.reloadRow(tableRow);\n        }\n      }\n    }\n  }\n};\nexport default {\n  props: {\n    // 是否开启使用 webSocket 无痕刷新\n    socketReload: {\n      type: Boolean,\n      default: false\n    },\n    socketKey: {\n      type: String,\n      default: 'vxe-default'\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    if (this.socketReload) {\n      vs.initialWebSocket();\n      vs.addBind(vs.tableMap, this.socketKey, this);\n    }\n  },\n  methods: {\n    /** 发送socket消息更新行 */socketSendUpdateRow: function socketSendUpdateRow(row) {\n      vs.sendMessage(vs.constants.TYPE_UVT, {\n        socketKey: this.socketKey,\n        args: [row, this.caseId]\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    vs.removeBind(vs.tableMap, this.socketKey, this);\n  }\n};\n\n/**\n * 添加WebSocket通用数据传递绑定，相同的key可以添加多个方法绑定\n * @param key 唯一key\n * @param fn 当消息来的时候触发的回调方法\n */\nexport function addBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.addBind(vs.CSDMap, key, fn);\n  }\n}\n\n/**\n * 移除WebSocket通用数据传递绑定\n * @param key 唯一key\n * @param fn 要移除的方法，必须和添加时的方法内存层面上保持一致才可以正确移除\n */\nexport function removeBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.removeBind(vs.CSDMap, key, fn);\n  }\n}",{"version":3,"names":["store","randomUUID","vs","pageId","ws","constants","TYPE","DATA","TYPE_HB","TYPE_CSD","TYPE_UVT","heartCheck","interval","timeout","timeoutTimer","clear","clearTimeout","start","sendMessage","window","setTimeout","reconnect","back","_this","initialWebSocket","userId","getters","userInfo","id","domain","_CONFIG","replace","url","concat","WebSocket","onopen","on","open","bind","onerror","error","onmessage","message","onclose","close","console","log","type","readyState","OPEN","send","JSON","stringify","data","err","warn","code","tableMap","Map","CSDMap","addBind","map","key","value","binds","get","Array","isArray","push","set","removeBind","i","length","splice","delete","callBind","callback","forEach","lockReconnect","_this2","info","e","_this3","json","parse","fn","apply","args","socketKey","vm","onVM","onUpdateTable","row","caseId","_this4","tableRow","getIfRowById","Object","assign","reloadEffect","$set","reloadEffectRowKeysMap","keys","$refs","vxe","reloadRow","props","socketReload","Boolean","default","String","mounted","methods","socketSendUpdateRow","beforeDestroy","addBindSocketCSD","removeBindSocketCSD"],"sources":["E:/work-25/知识库系统/admin/src/components/jeecg/JVxeTable/mixins/vxe.web.socket.mixins.js"],"sourcesContent":["import store from '@/store/'\nimport { randomUUID } from '@/utils/util'\n// vxe socket\nconst vs = {\n  // 页面唯一 id，用于标识同一用户，不同页面的websocket\n  pageId: randomUUID(),\n  // webSocket 对象\n  ws: null,\n  // 一些常量\n  constants: {\n    // 消息类型\n    TYPE: 'type',\n    // 消息数据\n    DATA: 'data',\n    // 消息类型：心跳检测\n    TYPE_HB: 'heart_beat',\n    // 消息类型：通用数据传递\n    TYPE_CSD: 'common_send_date',\n    // 消息类型：更新vxe table数据\n    TYPE_UVT: 'update_vxe_table',\n  },\n  // 心跳检测\n  heartCheck: {\n    // 间隔时间，间隔多久发送一次心跳消息\n    interval: 10000,\n    // 心跳消息超时时间，心跳消息多久没有回复后重连\n    timeout: 6000,\n    timeoutTimer: null,\n    clear() {\n      clearTimeout(this.timeoutTimer)\n      return this\n    },\n    start() {\n      vs.sendMessage(vs.constants.TYPE_HB, '')\n      // 如果超过一定时间还没重置，说明后端主动断开了\n      this.timeoutTimer = window.setTimeout(() => {\n        vs.reconnect()\n      }, this.timeout)\n      return this\n    },\n    // 心跳消息返回\n    back() {\n      this.clear()\n      window.setTimeout(() => this.start(), this.interval)\n    },\n  },\n\n  /** 初始化 WebSocket */\n  initialWebSocket() {\n    if (this.ws === null) {\n      const userId = store.getters.userInfo.id\n      const domain = window._CONFIG['domianURL'].replace('https://', 'wss://').replace('http://', 'ws://')\n      const url = `${domain}/vxeSocket/${userId}/${this.pageId}`\n\n      this.ws = new WebSocket(url)\n      this.ws.onopen = this.on.open.bind(this)\n      this.ws.onerror = this.on.error.bind(this)\n      this.ws.onmessage = this.on.message.bind(this)\n      this.ws.onclose = this.on.close.bind(this)\n\n      console.log('this.ws: ', this.ws)\n    }\n  },\n\n  // 发送消息\n  sendMessage(type, message) {\n    try {\n      let ws = this.ws\n      if (ws != null && ws.readyState === ws.OPEN) {\n        ws.send(JSON.stringify({\n          type: type,\n          data: message\n        }))\n      }\n    } catch (err) {\n      console.warn('【VXEWebSocket】发送消息失败：(' + err.code + ')')\n    }\n  },\n\n  /** 绑定全局VXE表格 */\n  tableMap: new Map(),\n  CSDMap: new Map(),\n  /** 添加绑定 */\n  addBind(map, key, value) {\n    let binds = map.get(key)\n    if (Array.isArray(binds)) {\n      binds.push(value)\n    } else {\n      map.set(key, [value])\n    }\n  },\n  /** 移除绑定 */\n  removeBind(map, key, value) {\n    let binds = map.get(key)\n    if (Array.isArray(binds)) {\n      for (let i = 0; i < binds.length; i++) {\n        let bind = binds[i]\n        if (bind === value) {\n          binds.splice(i, 1)\n          break\n        }\n      }\n      if (binds.length === 0) {\n        map.delete(key)\n      }\n    } else {\n      map.delete(key)\n    }\n  },\n  // 呼叫绑定的表单\n  callBind(map, key, callback) {\n    let binds = map.get(key)\n    if (Array.isArray(binds)) {\n      binds.forEach(callback)\n    }\n  },\n\n  lockReconnect: false,\n  /** 尝试重连 */\n  reconnect() {\n    if (this.lockReconnect) return\n    this.lockReconnect = true\n    setTimeout(() => {\n      if (this.ws && this.ws.close) {\n        this.ws.close()\n      }\n      this.ws = null\n      console.info('【VXEWebSocket】尝试重连...')\n      this.initialWebSocket()\n      this.lockReconnect = false\n    }, 5000)\n  },\n\n  on: {\n    open() {\n      console.log('【VXEWebSocket】连接成功')\n      this.heartCheck.start()\n    },\n    error(e) {\n      console.warn('【VXEWebSocket】连接发生错误:', e)\n      this.reconnect()\n    },\n    message(e) {\n      // 解析消息\n      let json\n      try {\n        json = JSON.parse(e.data)\n      } catch (e) {\n        console.warn('【VXEWebSocket】收到无法解析的消息:', e.data)\n        return\n      }\n      let type = json[this.constants.TYPE]\n      let data = json[this.constants.DATA]\n      switch (type) {\n        // 心跳检测\n        case this.constants.TYPE_HB:\n          this.heartCheck.back()\n          break\n        // 通用数据传递\n        case this.constants.TYPE_CSD:\n          this.callBind(this.CSDMap, data.key, (fn) => fn.apply(this, data.args))\n          break\n        // 更新form数据\n        case this.constants.TYPE_UVT:\n          this.callBind(this.tableMap, data.socketKey, (vm) => this.onVM['onUpdateTable'].apply(vm, data.args))\n          break\n        default:\n          console.warn('【VXEWebSocket】收到不识别的消息类型:' + type)\n          break\n      }\n    },\n    close(e) {\n      console.log('【VXEWebSocket】连接被关闭:', e)\n      this.reconnect()\n    },\n  },\n\n  onVM: {\n    /** 收到更新表格的消息 */\n    onUpdateTable(row, caseId) {\n      // 判断是不是自己发的消息\n      if (this.caseId !== caseId) {\n        const tableRow = this.getIfRowById(row.id).row\n        // 局部保更新数据\n        if (tableRow) {\n          // 特殊处理拖轮状态\n          if (row['tug_status'] && tableRow['tug_status']) {\n            row['tug_status'] = Object.assign({}, tableRow['tug_status'], row['tug_status'])\n          }\n          // 判断是否启用重载特效\n          if (this.reloadEffect) {\n            this.$set(this.reloadEffectRowKeysMap, row.id, true)\n          }\n          Object.keys(row).forEach(key => {\n            if (key !== 'id') {\n              this.$set(tableRow, key, row[key])\n            }\n          })\n          this.$refs.vxe.reloadRow(tableRow)\n        }\n      }\n    },\n  },\n\n}\n\nexport default {\n  props: {\n    // 是否开启使用 webSocket 无痕刷新\n    socketReload: {\n      type: Boolean,\n      default: false\n    },\n    socketKey: {\n      type: String,\n      default: 'vxe-default'\n    },\n  },\n  data() {\n    return {}\n  },\n  mounted() {\n    if (this.socketReload) {\n      vs.initialWebSocket()\n      vs.addBind(vs.tableMap, this.socketKey, this)\n    }\n  },\n  methods: {\n\n    /** 发送socket消息更新行 */\n    socketSendUpdateRow(row) {\n      vs.sendMessage(vs.constants.TYPE_UVT, {\n        socketKey: this.socketKey,\n        args: [row, this.caseId],\n      })\n    },\n\n  },\n  beforeDestroy() {\n    vs.removeBind(vs.tableMap, this.socketKey, this)\n  },\n}\n\n/**\n * 添加WebSocket通用数据传递绑定，相同的key可以添加多个方法绑定\n * @param key 唯一key\n * @param fn 当消息来的时候触发的回调方法\n */\nexport function addBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.addBind(vs.CSDMap, key, fn)\n  }\n}\n\n/**\n * 移除WebSocket通用数据传递绑定\n * @param key 唯一key\n * @param fn 要移除的方法，必须和添加时的方法内存层面上保持一致才可以正确移除\n */\nexport function removeBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.removeBind(vs.CSDMap, key, fn)\n  }\n}\n"],"mappings":"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","ignoreList":[]}]}