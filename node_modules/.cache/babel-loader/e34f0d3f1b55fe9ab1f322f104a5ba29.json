{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work-25\\知识库系统\\admin\\src\\views\\system\\modules\\DepartAuthModal.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\views\\system\\modules\\DepartAuthModal.vue","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport { queryTreeListForRole, queryDepartPermission, saveDepartPermission } from '@/api/api';\nimport DepartDataruleModal from './DepartDataruleModal';\nexport default {\n  name: 'DepartAuthModal',\n  components: {\n    DepartDataruleModal: DepartDataruleModal\n  },\n  data: function data() {\n    return {\n      departId: \"\",\n      treeData: [],\n      defaultCheckedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      expandedKeysss: [],\n      allTreeKeys: [],\n      autoExpandParent: true,\n      checkStrictly: false,\n      title: \"部门权限配置\",\n      visible: false,\n      loading: false,\n      selectedKeys: []\n    };\n  },\n  methods: {\n    onTreeNodeSelect: function onTreeNodeSelect(id) {\n      if (id && id.length > 0) {\n        this.selectedKeys = id;\n      }\n      this.$refs.datarule.show(this.selectedKeys[0], this.departId);\n    },\n    onCheck: function onCheck(checkedKeys, _ref) {\n      var halfCheckedKeys = _ref.halfCheckedKeys;\n      // 保存选中的和半选中的，后面保存的时候合并提交\n      this.checkedKeys = checkedKeys;\n      this.halfCheckedKeys = halfCheckedKeys;\n    },\n    show: function show(departId) {\n      this.departId = departId;\n      this.loadData();\n    },\n    close: function close() {\n      this.reset();\n      this.$emit('close');\n      this.visible = false;\n    },\n    onExpand: function onExpand(expandedKeys) {\n      this.expandedKeysss = expandedKeys;\n      this.autoExpandParent = false;\n    },\n    reset: function reset() {\n      this.expandedKeysss = [];\n      this.checkedKeys = [];\n      this.defaultCheckedKeys = [];\n      this.loading = false;\n    },\n    expandAll: function expandAll() {\n      this.expandedKeysss = this.allTreeKeys;\n    },\n    closeAll: function closeAll() {\n      this.expandedKeysss = [];\n    },\n    checkALL: function checkALL() {\n      this.checkedKeys = this.allTreeKeys;\n    },\n    cancelCheckALL: function cancelCheckALL() {\n      this.checkedKeys = [];\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    handleSubmit: function handleSubmit() {\n      var that = this;\n      if (!that.departId) {\n        this.$message.warning('请点击选择一个部门!');\n      }\n      var checkedKeys = [].concat(_toConsumableArray(that.checkedKeys), _toConsumableArray(that.halfCheckedKeys));\n      var permissionIds = checkedKeys.join(\",\");\n      var params = {\n        departId: that.departId,\n        permissionIds: permissionIds,\n        lastpermissionIds: that.defaultCheckedKeys.join(\",\")\n      };\n      that.loading = true;\n      saveDepartPermission(params).then(function (res) {\n        if (res.success) {\n          that.$message.success(res.message);\n          that.loading = false;\n          that.loadData();\n        } else {\n          that.$message.error(res.message);\n          that.loading = false;\n        }\n      });\n    },\n    convertTreeListToKeyLeafPairs: function convertTreeListToKeyLeafPairs(treeList) {\n      var keyLeafPair = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var _iterator = _createForOfIteratorHelper(treeList),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n            key = _step$value.key,\n            isLeaf = _step$value.isLeaf,\n            children = _step$value.children;\n          keyLeafPair.push({\n            key: key,\n            isLeaf: isLeaf\n          });\n          if (children && children.length > 0) {\n            this.convertTreeListToKeyLeafPairs(children, keyLeafPair);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return keyLeafPair;\n    },\n    emptyCurrForm: function emptyCurrForm() {\n      this.form.resetFields();\n    },\n    loadData: function loadData() {\n      var _this = this;\n      this.loading = true;\n      queryTreeListForRole().then(function (res) {\n        _this.treeData = res.result.treeList;\n        _this.allTreeKeys = res.result.ids;\n        var keyLeafPairs = _this.convertTreeListToKeyLeafPairs(_this.treeData);\n        queryDepartPermission({\n          departId: _this.departId\n        }).then(function (res) {\n          // 过滤出 leaf node 即可，即选中的\n          // Tree组件中checkStrictly默认为false的时候，选中子节点，父节点会自动设置选中或半选中\n          // 保存 checkedKeys 以及 halfCheckedKeys 以便于未做任何操作时提交表单数据\n          var checkedKeys = _toConsumableArray(res.result).filter(function (key) {\n            var keyLeafPair = keyLeafPairs.filter(function (item) {\n              return item.key === key;\n            })[0];\n            return keyLeafPair && keyLeafPair.isLeaf;\n          });\n          var halfCheckedKeys = _toConsumableArray(res.result).filter(function (key) {\n            var keyLeafPair = keyLeafPairs.filter(function (item) {\n              return item.key === key;\n            })[0];\n            return keyLeafPair && !keyLeafPair.isLeaf;\n          });\n          _this.checkedKeys = _toConsumableArray(checkedKeys);\n          _this.halfCheckedKeys = _toConsumableArray(halfCheckedKeys);\n          _this.defaultCheckedKeys = [].concat(_toConsumableArray(halfCheckedKeys), _toConsumableArray(checkedKeys));\n          _this.expandedKeysss = _this.allTreeKeys;\n          _this.loading = false;\n        });\n      });\n    }\n  }\n};",{"version":3,"names":["queryTreeListForRole","queryDepartPermission","saveDepartPermission","DepartDataruleModal","name","components","data","departId","treeData","defaultCheckedKeys","checkedKeys","halfCheckedKeys","expandedKeysss","allTreeKeys","autoExpandParent","checkStrictly","title","visible","loading","selectedKeys","methods","onTreeNodeSelect","id","length","$refs","datarule","show","onCheck","_ref","loadData","close","reset","$emit","onExpand","expandedKeys","expandAll","closeAll","checkALL","cancelCheckALL","handleCancel","handleSubmit","that","$message","warning","concat","_toConsumableArray","permissionIds","join","params","lastpermissionIds","then","res","success","message","error","convertTreeListToKeyLeafPairs","treeList","keyLeafPair","arguments","undefined","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","value","key","isLeaf","children","push","err","e","f","emptyCurrForm","form","resetFields","_this","result","ids","keyLeafPairs","filter","item"],"sources":["src/views/system/modules/DepartAuthModal.vue"],"sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n    <template v-if=\"this.departId\">\n      <a-spin :spinning=\"loading\">\n        <a-form>\n          <a-form-item label='所拥有的权限'>\n            <a-tree\n              checkable\n              @check=\"onCheck\"\n              :checkedKeys=\"checkedKeys\"\n              :treeData=\"treeData\"\n              @expand=\"onExpand\"\n              @select=\"onTreeNodeSelect\"\n              :selectedKeys=\"selectedKeys\"\n              :expandedKeys=\"expandedKeysss\"\n              :checkStrictly=\"checkStrictly\"\n              style=\"height:500px;overflow: auto;\">\n              <span slot=\"hasDatarule\" slot-scope=\"{slotTitle,ruleFlag}\">\n                {{ slotTitle }}\n                <a-icon v-if=\"ruleFlag\" type=\"align-left\" style=\"margin-left:5px;color: red;\"></a-icon>\n              </span>\n            </a-tree>\n          </a-form-item>\n        </a-form>\n      </a-spin>\n      <div class=\"anty-form-btn\">\n        <a-dropdown style=\"float: left\" :trigger=\"['click']\" placement=\"topCenter\">\n          <a-menu slot=\"overlay\">\n            <!-- 简化Tree逻辑，使用默认checkStrictly为false的行为，即默认父子关联\n            <a-menu-item key=\"1\" @click=\"switchCheckStrictly(1)\">父子关联</a-menu-item>\n            <a-menu-item key=\"2\" @click=\"switchCheckStrictly(2)\">取消关联</a-menu-item>\n            -->\n            <a-menu-item key=\"3\" @click=\"checkALL\">全部勾选</a-menu-item>\n            <a-menu-item key=\"4\" @click=\"cancelCheckALL\">取消全选</a-menu-item>\n            <a-menu-item key=\"5\" @click=\"expandAll\">展开所有</a-menu-item>\n            <a-menu-item key=\"6\" @click=\"closeAll\">合并所有</a-menu-item>\n          </a-menu>\n          <a-button>\n            树操作 <a-icon type=\"up\" />\n          </a-button>\n        </a-dropdown>\n        <a-button style=\"float: right\" @click=\"handleSubmit\" type=\"primary\" htmlType=\"button\" icon=\"form\">保存</a-button>\n      </div>\n    </template>\n    <a-card v-else :bordered=\"false\" style=\"height:200px\">\n      <a-empty>\n        <span slot=\"description\"> 请先选择一个部门! </span>\n      </a-empty>\n    </a-card>\n    <depart-datarule-modal ref=\"datarule\"/>\n  </a-card>\n</template>\n\n<script>\n  import {queryTreeListForRole,queryDepartPermission,saveDepartPermission} from '@/api/api'\n  import DepartDataruleModal from './DepartDataruleModal'\n\n  export default {\n    name: 'DepartAuthModal',\n    components: { DepartDataruleModal },\n    data(){\n      return {\n        departId:\"\",\n        treeData: [],\n        defaultCheckedKeys:[],\n        checkedKeys:[],\n        halfCheckedKeys:[],\n        expandedKeysss:[],\n        allTreeKeys:[],\n        autoExpandParent: true,\n        checkStrictly: false,\n        title:\"部门权限配置\",\n        visible: false,\n        loading: false,\n        selectedKeys:[]\n      }\n    },\n    methods: {\n      onTreeNodeSelect(id){\n        if(id && id.length>0){\n          this.selectedKeys = id\n        }\n        this.$refs.datarule.show(this.selectedKeys[0],this.departId)\n      },\n      onCheck (checkedKeys, { halfCheckedKeys }) {\n        // 保存选中的和半选中的，后面保存的时候合并提交\n        this.checkedKeys = checkedKeys\n        this.halfCheckedKeys = halfCheckedKeys\n      },\n      show(departId){\n        this.departId=departId\n        this.loadData();\n      },\n      close () {\n        this.reset()\n        this.$emit('close');\n        this.visible = false;\n      },\n      onExpand(expandedKeys){\n        this.expandedKeysss = expandedKeys;\n        this.autoExpandParent = false\n      },\n      reset () {\n        this.expandedKeysss = []\n        this.checkedKeys = []\n        this.defaultCheckedKeys = []\n        this.loading = false\n      },\n      expandAll () {\n        this.expandedKeysss = this.allTreeKeys\n      },\n      closeAll () {\n        this.expandedKeysss = []\n      },\n      checkALL () {\n        this.checkedKeys = this.allTreeKeys\n      },\n      cancelCheckALL () {\n        this.checkedKeys = []\n      },\n      handleCancel () {\n        this.close()\n      },\n      handleSubmit() {\n        let that = this;\n        if(!that.departId){\n          this.$message.warning('请点击选择一个部门!')\n        }\n        let checkedKeys = [...that.checkedKeys, ...that.halfCheckedKeys]\n        const permissionIds = checkedKeys.join(\",\")\n        let params =  {\n          departId:that.departId,\n          permissionIds,\n          lastpermissionIds:that.defaultCheckedKeys.join(\",\"),\n        };\n        that.loading = true;\n        saveDepartPermission(params).then((res)=>{\n          if(res.success){\n            that.$message.success(res.message);\n            that.loading = false;\n            that.loadData();\n          }else {\n            that.$message.error(res.message);\n            that.loading = false;\n          }\n        })\n      },\n      convertTreeListToKeyLeafPairs(treeList, keyLeafPair = []) {\n        for(const {key, isLeaf, children} of treeList) {\n          keyLeafPair.push({key, isLeaf})\n          if(children && children.length > 0) {\n            this.convertTreeListToKeyLeafPairs(children, keyLeafPair)\n          }\n        }\n        return keyLeafPair;\n      },\n      emptyCurrForm() {\n        this.form.resetFields()\n      },\n      loadData(){\n        this.loading = true;\n        queryTreeListForRole().then((res) => {\n          this.treeData = res.result.treeList\n          this.allTreeKeys = res.result.ids\n          const keyLeafPairs = this.convertTreeListToKeyLeafPairs(this.treeData)\n          queryDepartPermission({departId:this.departId}).then((res)=>{\n            // 过滤出 leaf node 即可，即选中的\n            // Tree组件中checkStrictly默认为false的时候，选中子节点，父节点会自动设置选中或半选中\n            // 保存 checkedKeys 以及 halfCheckedKeys 以便于未做任何操作时提交表单数据\n            const checkedKeys = [...res.result].filter(key => {\n              const keyLeafPair = keyLeafPairs.filter(item => item.key === key)[0]\n              return keyLeafPair && keyLeafPair.isLeaf\n            })\n            const halfCheckedKeys = [...res.result].filter(key => {\n              const keyLeafPair = keyLeafPairs.filter(item => item.key === key)[0]\n              return keyLeafPair && !keyLeafPair.isLeaf\n            })\n            this.checkedKeys = [...checkedKeys];\n            this.halfCheckedKeys = [...halfCheckedKeys]\n            this.defaultCheckedKeys = [...halfCheckedKeys, ...checkedKeys];\n            this.expandedKeysss = this.allTreeKeys;\n            this.loading = false;\n          })\n        })\n      }\n    },\n  }\n</script>\n\n<style scoped>\n\n</style>"],"mappings":"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","ignoreList":[]}]}