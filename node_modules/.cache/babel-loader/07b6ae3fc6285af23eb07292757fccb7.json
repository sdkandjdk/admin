{"remainingRequest":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\work-25\\知识库系统\\admin\\src\\views\\km\\search\\DefaultDocSearch.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\work-25\\知识库系统\\admin\\src\\views\\km\\search\\DefaultDocSearch.vue","mtime":1740914036950},{"path":"E:\\work-25\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\work-25\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nimport { ACCESS_TOKEN } from \"@/store/mutation-types\";\nimport { httpPostAction, getAction, downloadFileName, getActionPDF, getKeyword, abstractKmDoc as _abstractKmDoc } from \"../../../api/manage\";\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nimport Vue from \"vue\";\nimport IframePageContent from \"../../../components/layouts/IframeFReportView\";\nimport GlobalFooter from '@/components/page/GlobalFooter';\nimport ARow from \"ant-design-vue/es/grid/Row\";\nimport SearchHeader from '../Common/SearchHeader';\nexport default {\n  name: \"defaultDocSearch\",\n  mixins: [JeecgListMixin],\n  components: {\n    ARow: ARow,\n    IframePageContent: IframePageContent,\n    GlobalFooter: GlobalFooter,\n    SearchHeader: SearchHeader\n  },\n  data: function data() {\n    return {\n      boolCheckChange: true,\n      suggestions: [],\n      checkedArray: [],\n      topicCodesTree: {\n        checked: [],\n        halfChecked: []\n      },\n      boolSelect: false,\n      treeData: [],\n      knowledgeTitle: \"知识专题\",\n      confirmLoading: false,\n      PDFurl: '',\n      visible: false,\n      pdfLoading: false,\n      pdfShow: true,\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 5\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      },\n      title: \"预览\",\n      width: '900',\n      defaultBusinessTypeList: [],\n      hotTopicReportList: [],\n      docDataSource: [],\n      loadedRatio: 0,\n      topMenuStyle: {\n        headerIndexLeft: {},\n        topNavHeader: {},\n        headerIndexRight: {},\n        topSmenuStyle: {}\n      },\n      pageTitle: \"\",\n      //表头\n      columns: [],\n      //列设置\n      settingColumns: [],\n      //要filter的字段\n      filterDictCode: 'km_dict_source',\n      //  过滤字段数据\n      filterOptions: [],\n      //列定义\n      defColumns: [{\n        title: '#',\n        dataIndex: '',\n        key: 'rowIndex',\n        width: 40,\n        align: \"center\",\n        scopedSlots: {\n          customRender: 'indexNum'\n        }\n      }, {\n        title: '标题',\n        align: \"left\",\n        dataIndex: 'title',\n        scopedSlots: {\n          customRender: 'docTitle'\n        }\n      }, {\n        title: '文档来源',\n        align: \"center\",\n        dataIndex: 'source_dictText',\n        width: 150,\n        filters: []\n        // scopedSlots: {\n        //   filterDropdown: 'filterSource',\n        //   filterIcon: 'filterIcon'\n        // },\n      }, {\n        title: '发文时间',\n        align: \"center\",\n        sorter: true,\n        dataIndex: 'pubTimeTxt',\n        width: 95\n      }, {\n        title: '操作',\n        dataIndex: 'action',\n        align: \"center\",\n        width: 120,\n        scopedSlots: {\n          filterDropdown: 'filterDropdown',\n          filterIcon: 'filterIcon',\n          customRender: 'action'\n        }\n      }],\n      //  分类数据\n      options: [],\n      // 输入框输入的内容\n      content: '',\n      // 多选组件使用的变量\n      checkboxVuale: [],\n      checkedValues: '',\n      itemList: [],\n      // 要加载多选的字典\n      dictCode: 'km_dict_category',\n      // 请求的url地址\n      url: {\n        rootList: \"/sys/category/loadTreeRoot\",\n        recentlyList: '/KM/kmDocVisitRecord/recentlyVisitDocs',\n        defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n        hotTopicReport: '/KM/HomePage/listRecommendTopic',\n        list: '/KM/kmDoc/listRecently',\n        previewKmDoc: '/KM/kmDoc/previewKmDoc',\n        downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n        addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n        delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\n        selectKeyword: '/KM/kmSearchRecord/selectKeyword',\n        abstractKmDoc: '/KM/kmDoc/abstractKmDoc'\n      },\n      visible1: false,\n      // 控制模态框显示\n      buttonLoading: false,\n      // 按钮加载状态\n      loading1: true,\n      // 模态框加载状态\n      fullText: \"\",\n      // 后端返回的完整文章摘要\n      displayedText: \"\",\n      // 逐字显示的内容\n      typingSpeed: 50,\n      // 打字速度（毫秒）\n      isGenerating: false // 是否正在生成中\n    };\n  },\n  computed: {\n    // 动态模态框标题\n    modalTitle: function modalTitle() {\n      return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\n    }\n  },\n  created: function created() {\n    this.loadTree();\n    //设置全局token\n    Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n    window._CONFIG['token'] = Vue.prototype.token;\n    this.hotTopicReportFun();\n    this.loadDefaultBusinessTypeFunc();\n    this.initDict();\n    this.initFilterDict();\n\n    // 调用初始化自定义table列表函数\n    this.initColumns();\n    this.changeTitle(\"普通检索\");\n  },\n  methods: {\n    // 显示模态框\n    showModal: function showModal(record) {\n      this.visible1 = true;\n      this.buttonLoading = true;\n      this.isGenerating = true; // 显示“生成中”提示\n      this.abstractKmDoc(record);\n    },\n    abstractKmDoc: function abstractKmDoc(record) {\n      var _this = this;\n      var params = {\n        docId: record.id\n      };\n      _abstractKmDoc(this.url.abstractKmDoc, params).then(function (res) {\n        if (res.success) {\n          _this.fullText = res.result;\n          _this.buttonLoading = false;\n          _this.loading1 = false;\n          _this.isGenerating = false; // 关闭“生成中”提示\n\n          // 开始逐字显示\n          _this.typeText();\n        } else {\n          _this.$message.warning(res.message);\n        }\n      }).finally(function () {});\n    },\n    // 模拟调用后端接口\n    // 逐字显示内容\n    typeText: function typeText() {\n      var _this2 = this;\n      var index = 0;\n      var timer = setInterval(function () {\n        if (index < _this2.fullText.length) {\n          _this2.displayedText += _this2.fullText.charAt(index);\n          index++;\n        } else {\n          clearInterval(timer); // 停止定时器\n        }\n      }, this.typingSpeed);\n    },\n    // 关闭模态框\n    handleCancel1: function handleCancel1() {\n      this.visible1 = false;\n      this.displayedText = \"\"; // 清空内容\n      this.loading1 = true; // 重置加载状态\n      this.isGenerating = false; // 关闭“生成中”提示\n    },\n    onInput: function onInput() {\n      console.log(\"=============\");\n      if (this.content) {\n        this.fetchSuggestions(this.content);\n      } else {\n        this.suggestions = [];\n      }\n    },\n    fetchSuggestions: function fetchSuggestions(keyword) {\n      var _this3 = this;\n      console.log(\"2222\");\n\n      // 调用后端API获取推荐术语\n      getKeyword(this.url.selectKeyword + '?' + 'keyword=' + keyword, keyword).then(function (res) {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            var a = [];\n            for (var index = 0; index < res.result.length; index++) {\n              a.push(res.result[index].corword);\n            }\n            _this3.suggestions = a;\n          } else {\n            _this3.suggestions = [];\n          }\n        } else {\n          _this3.$message.warning(res.message);\n        }\n      }).finally(function () {});\n    },\n    selectSuggestion: function selectSuggestion(suggestion) {\n      this.content = suggestion;\n      this.suggestions = [];\n      // 这里可以触发搜索操作\n    },\n    // 加载filter字段选项\n    initFilterDict: function initFilterDict() {\n      var _this4 = this;\n      this.filterOptions = [];\n\n      //优先从缓存中读取字典配置\n      // if (getDictItemsFromCache(this.dictCode)) {\n      var options = getDictItemsFromCache(this.filterDictCode);\n      if (options) {\n        options.forEach(function (item, index) {\n          var filterOption = {};\n          filterOption.text = item.title;\n          filterOption.value = item.value;\n          _this4.filterOptions.push(filterOption);\n        });\n        console.log(this.filterOptions);\n        this.defColumns[2].filters = this.filterOptions;\n        return;\n      }\n\n      //根据字典Code, 初始化字典数组\n      ajaxGetDictItems(this.filterDictCode, null).then(function (res) {\n        if (res.success) {\n          var _options = res.result;\n          console.log(_options);\n          _options.forEach(function (item, index) {\n            var filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            _this4.filterOptions.push(filterOption);\n          });\n          _this4.defColumns[2].filters = _this4.filterOptions;\n        }\n      });\n    },\n    // 是否全文检索\n    onCheckChange: function onCheckChange(e) {\n      this.boolCheckChange = e.target.checked;\n      console.log(\"checked = \".concat(e.target.checked));\n    },\n    // 查找一个节点的所有父节点\n    familyTree: function familyTree(treeData, id) {\n      var arrTree = [];\n      var _forFn = function forFn(arr, key) {\n        for (var i = 0; i < arr.length; i++) {\n          var item = arr[i];\n          if (item.key === key) {\n            if (item.parentId === \"0\") {\n              break;\n            } else {\n              console.log(\"父节点\", item.parentId);\n              arrTree.push(item.parentId);\n              _forFn(treeData, item.parentId);\n            }\n            break;\n          } else {\n            if (item.children != null) {\n              _forFn(item.children, key);\n            }\n          }\n        }\n      };\n      _forFn(treeData, id);\n      return arrTree;\n    },\n    // 树节点选择触发\n    onCheck: function onCheck(checkedKeys, checkedNodes) {\n      if (checkedKeys.checked.length > 1) {\n        var checkKeys = checkedKeys.checked[1];\n        checkedKeys.checked = [];\n        checkedKeys.checked.push(checkKeys);\n        var checkNodesTitle = checkedNodes.checkedNodes[1];\n        checkedNodes.checkedNodes = [];\n        checkedNodes.checkedNodes.push(checkNodesTitle);\n      }\n      console.log(\"checkedKeys\", checkedKeys);\n      console.log(\"checkedNodes\", checkedNodes);\n      var temp = new Array();\n      var tempArray = new Array();\n      this.checkedArray = checkedKeys.checked;\n      for (var i = 0; i < this.checkedArray.length; i++) {\n        var arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n        temp = temp.concat(arrTemp);\n      }\n      // 数组去重\n      tempArray = _toConsumableArray(new Set(temp));\n      console.log(\"tempArray\", tempArray);\n      checkedKeys.halfChecked = tempArray;\n      var checkedTitle = checkedNodes.checkedNodes;\n      this.knowledgeTitle = \"\";\n      for (var _i = 0; _i < checkedTitle.length; _i++) {\n        if (this.knowledgeTitle === \"\") {\n          this.knowledgeTitle = checkedTitle[_i].data.props.title;\n        } else {\n          if (checkedTitle[_i].data.props.title != null) {\n            this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[_i].data.props.title;\n          }\n        }\n      }\n      if (this.knowledgeTitle === \"\") {\n        this.knowledgeTitle = \"知识专题\";\n      }\n      var topicCodes = checkedTitle[0].data.props.code;\n      this.knowledgeTitleFun(topicCodes, this.topicCodesTree, this.knowledgeTitle);\n    },\n    // 加载树节点，获取树数据\n    loadTree: function loadTree() {\n      var _this5 = this;\n      var params = {\n        async: false,\n        pcode: \"\"\n      };\n      getAction(this.url.rootList, params).then(function (res) {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            _this5.treeData = res.result;\n          } else {\n            _this5.treeData = [];\n          }\n        } else {\n          _this5.$message.warning(res.message);\n        }\n      }).finally(function () {});\n    },\n    // 更改页面标题\n    changeTitle: function changeTitle(title) {\n      var projectTitle = \"Java知识库\";\n      // 特殊处理\n      document.title = title + ' · ' + projectTitle;\n    },\n    // 自定义列表  列设置更改事件\n    onColSettingsChange: function onColSettingsChange(checkedValues) {\n      var _this6 = this;\n      var key = this.$route.name + \":colsettings\";\n      console.log(\"colsettings\", key);\n      Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000);\n      this.settingColumns = checkedValues;\n      var cols = this.defColumns.filter(function (item) {\n        if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n          return true;\n        }\n        if (_this6.settingColumns.includes(item.dataIndex)) {\n          return true;\n        }\n        return false;\n      });\n      this.columns = cols;\n    },\n    // 自定义列表  初始化\n    initColumns: function initColumns() {\n      //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n      //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n      var key = this.$route.name + \":colsettings\";\n      console.log(\"colsettings\", key);\n      var colSettings = Vue.ls.get(key);\n      if (colSettings == null || colSettings == undefined) {\n        var allSettingColumns = [];\n        this.defColumns.forEach(function (item, i, array) {\n          allSettingColumns.push(item.dataIndex);\n        });\n        this.settingColumns = allSettingColumns;\n        this.columns = this.defColumns;\n      } else {\n        this.settingColumns = colSettings;\n        var cols = this.defColumns.filter(function (item) {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true;\n          }\n          if (colSettings.includes(item.dataIndex)) {\n            return true;\n          }\n          return false;\n        });\n        this.columns = cols;\n      }\n    },\n    // 加载 分类数据\n    initDict: function initDict() {\n      var _this7 = this;\n      this.options = [];\n\n      //优先从缓存中读取字典配置\n      if (getDictItemsFromCache(this.dictCode)) {\n        var options = getDictItemsFromCache(this.dictCode);\n        options.forEach(function (item, index) {\n          var person = {};\n          person.label = item.title;\n          person.value = item.value;\n          _this7.options.push(person);\n        });\n        return;\n      }\n\n      //根据字典Code, 初始化字典数组\n      ajaxGetDictItems(this.dictCode, null).then(function (res) {\n        if (res.success) {\n          var _options2 = res.result;\n          _options2.forEach(function (item, index) {\n            var person = {};\n            person.label = item.title;\n            person.value = item.value;\n            _this7.options.push(person);\n          });\n        }\n      });\n    },\n    // 多选框选择触发\n    onChange: function onChange(checkedValues) {\n      this.checkedValues = checkedValues.toString();\n      this.checkboxVuale = checkedValues;\n      console.log('checked = ', checkedValues);\n    },\n    // 按回车键触发方法\n    pressEnterFun: function pressEnterFun(e) {\n      var _this8 = this;\n      this.$nextTick(function () {\n        _this8.searchDocFun();\n      });\n    },\n    //专题检索\n    knowledgeTitleFun: function knowledgeTitleFun(topicCodes, topicCodesTree, knowledgeTitle) {\n      var params = {};\n      params[\"topicCodes\"] = topicCodes;\n      params[\"topicCodesTree\"] = topicCodesTree;\n      params[\"knowledgeTitle\"] = knowledgeTitle;\n      // this.$router.push({name: 'RecommendTopicList',params:params});\n      this.$router.push({\n        name: 'docSearch',\n        params: params\n      });\n    },\n    // 检索\n    searchDocFun: function searchDocFun() {\n      var params = {};\n      if (this.content !== \"\" && this.content != null) {\n        params['content'] = this.content;\n      }\n      if (this.checkedValues !== \"\" && this.checkedValues != null) {\n        params['category'] = this.checkedValues;\n      }\n      // 判断参数是否为空\n      if (this.empty(params)) {\n        params['column'] = \"_score\";\n        params['order'] = \"desc\";\n        params['boolCheckChange'] = this.boolCheckChange;\n        if (params['content'] != null) {\n          params['content'] = params['content'].replace(/，/g, ',');\n        }\n        this.$router.push({\n          name: 'docSearch',\n          params: params\n        });\n      } else {\n        this.$message.info(\"请输入搜索条件\");\n      }\n    },\n    loadDefaultBusinessTypeFunc: function loadDefaultBusinessTypeFunc() {\n      var _this9 = this;\n      getAction(this.url.defaultBusinessTypeList).then(function (res) {\n        if (res.success) {\n          _this9.defaultBusinessTypeList = res.result;\n        } else {\n          _this9.$message.error(\"业务加载失败\");\n        }\n      });\n    },\n    // 热门专题\n    hotTopicReportFun: function hotTopicReportFun() {\n      var _this10 = this;\n      getAction(this.url.hotTopicReport).then(function (res) {\n        if (res.success) {\n          _this10.hotTopicReportList = res.result;\n        } else {\n          //this.$message.error(\"热门专题加载失败\");\n        }\n      });\n    },\n    //  判断对象是否为空\n    empty: function empty(obj) {\n      for (var key in obj) {\n        return true;\n      }\n      return false;\n    },\n    //批量下载\n    downloadKmDocBatch: function downloadKmDocBatch() {\n      console.log(\"批量下载\");\n      if (!this.url.downloadKmDoc) {\n        this.$message.error(\"请设置url.downloadKmDoc属性!\");\n        return;\n      }\n      if (this.selectionRows.length <= 0) {\n        this.$message.warning('请选择一条记录！');\n        return;\n      } else {\n        var that = this;\n        this.$confirm({\n          title: \"确认下载\",\n          content: \"是否下载选中数据?\",\n          onOk: function onOk() {\n            for (var i = 0; i < that.selectionRows.length; i++) {\n              var fileName = i;\n              downloadFileName(that.url.downloadKmDoc, {\n                docId: that.selectionRows[i].id\n              });\n            }\n            // that.loadData();\n            that.onClearSelected();\n          }\n        });\n      }\n    },\n    //访问业务类型\n    searchBusinessType: function searchBusinessType(value) {\n      var params = {};\n      params['businessTypes'] = value;\n      this.$router.push({\n        name: 'docSearch',\n        params: params\n      });\n    },\n    // 显示预览窗口，初始化\n    previewKmDoc: function previewKmDoc(record) {\n      //this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n      this.PDFurl = this.url.previewKmDoc + \"?docId=\" + record.id;\n      this.title = '预览 - ' + record.title;\n      this.visible = true;\n      this.pdfLoading = true;\n      this.pdfShow = true;\n    },\n    //关闭预览窗口\n    handleCancel: function handleCancel() {\n      this.visible = false;\n    },\n    //下载文件\n    downloadKmDoc: function downloadKmDoc(record) {\n      this.$notification.success({\n        message: '文件开始下载...',\n        duration: 1\n      });\n      downloadFileName(this.url.downloadKmDoc, {\n        docId: record.id\n      });\n    },\n    //加收藏夹\n    addFavouriteKmDoc: function addFavouriteKmDoc(record) {\n      var _this11 = this;\n      var httpurl = '';\n      var method = '';\n      httpurl += this.url.addFavouriteKmDoc;\n      method = 'post';\n      httpPostAction(httpurl, {\n        docId: record.id\n      }, method).then(function (res) {\n        if (res.success) {\n          _this11.$message.success(\"收藏成功!\");\n          // this.loadData();\n          record.favourite = 1;\n        } else {\n          _this11.$message.warning(\"收藏失败!\");\n        }\n      }).finally(function () {});\n    },\n    //取消收藏夹\n    delFavouriteKmDoc: function delFavouriteKmDoc(record) {\n      var _this12 = this;\n      var httpurl = '';\n      var method = '';\n      httpurl += this.url.delFavouriteKmDoc;\n      method = 'delete';\n      httpPostAction(httpurl, {\n        docId: record.id\n      }, method).then(function (res) {\n        if (res.success) {\n          _this12.$message.success(\"取消收藏成功!\");\n          // this.loadData();\n          record.favourite = 0;\n        } else {\n          _this12.$message.warning(\"取消收藏失败!\");\n        }\n      }).finally(function () {});\n    }\n  }\n};",{"version":3,"names":["ajaxGetDictItems","getDictItemsFromCache","ACCESS_TOKEN","httpPostAction","getAction","downloadFileName","getActionPDF","getKeyword","abstractKmDoc","JeecgListMixin","Vue","IframePageContent","GlobalFooter","ARow","SearchHeader","name","mixins","components","data","boolCheckChange","suggestions","checkedArray","topicCodesTree","checked","halfChecked","boolSelect","treeData","knowledgeTitle","confirmLoading","PDFurl","visible","pdfLoading","pdfShow","labelCol","xs","span","sm","wrapperCol","title","width","defaultBusinessTypeList","hotTopicReportList","docDataSource","loadedRatio","topMenuStyle","headerIndexLeft","topNavHeader","headerIndexRight","topSmenuStyle","pageTitle","columns","settingColumns","filterDictCode","filterOptions","defColumns","dataIndex","key","align","scopedSlots","customRender","filters","sorter","filterDropdown","filterIcon","options","content","checkboxVuale","checkedValues","itemList","dictCode","url","rootList","recentlyList","hotTopicReport","list","previewKmDoc","downloadKmDoc","addFavouriteKmDoc","delFavouriteKmDoc","selectKeyword","visible1","buttonLoading","loading1","fullText","displayedText","typingSpeed","isGenerating","computed","modalTitle","created","loadTree","prototype","token","ls","get","window","_CONFIG","hotTopicReportFun","loadDefaultBusinessTypeFunc","initDict","initFilterDict","initColumns","changeTitle","methods","showModal","record","_this","params","docId","id","then","res","success","result","typeText","$message","warning","message","finally","_this2","index","timer","setInterval","length","charAt","clearInterval","handleCancel1","onInput","console","log","fetchSuggestions","keyword","_this3","a","push","corword","selectSuggestion","suggestion","_this4","forEach","item","filterOption","text","value","onCheckChange","e","target","concat","familyTree","arrTree","forFn","arr","i","parentId","children","onCheck","checkedKeys","checkedNodes","checkKeys","checkNodesTitle","temp","Array","tempArray","arrTemp","_toConsumableArray","Set","checkedTitle","props","topicCodes","code","knowledgeTitleFun","_this5","async","pcode","projectTitle","document","onColSettingsChange","_this6","$route","set","cols","filter","includes","colSettings","undefined","allSettingColumns","array","_this7","person","label","onChange","toString","pressEnterFun","_this8","$nextTick","searchDocFun","$router","empty","replace","info","_this9","error","_this10","obj","downloadKmDocBatch","selectionRows","that","$confirm","onOk","fileName","onClearSelected","searchBusinessType","handleCancel","$notification","duration","_this11","httpurl","method","favourite","_this12"],"sources":["src/views/km/search/DefaultDocSearch.vue"],"sourcesContent":["<template>\n  <a-layout class=\"layout\">\n\n    <a-layout-header  class=\"searchHeader\" style=\" background-color: #1a53ba;width: 100%; height: 60px\" >\n      <SearchHeader  :title='pageTitle'/>\n    </a-layout-header>\n\n    <a-layout-content :style=\"{ background: '#fff',  minHeight: '680px' }\">\n\n      <div :bordered=\"false\" :style=\"{backgroundColor: '#f2f2f2',height: '100%'}\">\n        <!--<SearchHeader/>-->\n        <div  :style=\"{backgroundColor: '#1a53ba',padding: '10px',minWidth: '900px',height: '150px'}\">\n      <!-- 查询区域 -->\n      <div class=\"table-page-search-wrapper\" >\n        <!--<p></p>-->\n        <a-form layout=\"inline\">\n          <a-row>\n            <a-col :span=\"24\" style=\"text-align: center;\">\n              <div style=\"display:inline-block\">\n                <div style=\"float: left\">\n                  <a-input style=\"width: 800px;\" size=\"large\" placeholder=\"标题、关键字、全文\" v-model=\"content\"\n                           @pressEnter=\"pressEnterFun\" @input=\"onInput\">\n\n                    <a-icon slot=\"suffix\" @click=\"searchDocFun\" type=\"search\" style=\"color:#1890FF;fontSize:22px\"/>\n                  </a-input>\r\n\t\t\t\t<ul v-if=\"suggestions.length\" class=\"suggestions-list\">\n\t\t\t\t\t  <li\n\t\t\t\t\t\tv-for=\"(suggestion, index) in suggestions\"\n\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t@click=\"selectSuggestion(suggestion)\"\n\t\t\t\t\t\tclass=\"suggestion-item\"\n\t\t\t\t\t  >\n\t\t\t\t\t\t{{ suggestion }}\n\t\t\t\t\t  </li>\n\t\t\t\t\t</ul>\n                  <div class=\"checkbox\" style=\"width: 750px;text-align: center;margin-top: 10px;margin-left: 20px\">\n                    <a-checkbox-group :options=\"options\" v-model=\"checkboxVuale\" @change=\"onChange\"/>\n                  </div>\n                </div>\n                <div style=\"float: left;width: 100px;text-align: left;margin-top: -2px\">\n                  <span style=\"color: white;margin-left: 20px\">\n                   <span>全文检索</span>\n                      <a-checkbox  class=\"checkbox\" v-model=\"boolCheckChange\" style=\"margin-left: 8px\" @change=\"onCheckChange\" />\n                  </span>\n                </div>\n              </div>\n            </a-col>\n          </a-row>\n        </a-form>\n      </div>\n      <!-- 查询区域-END -->\n    </div>\n    <!-- 表格区域 -->\n    <div style=\"background-color:#f2f2f2\">\n      <a-form layout=\"inline\">\n        <a-row>\n          <a-col :xl=\"17\" :lg=\"15\" :md=\"14\" :sm=\"24\" style=\"background-color: #f2f2f2;padding: 15px\">\n            <div style=\"padding: 0; box-shadow:1px 2px 3px 2px #ccc\">\n              <!--<a-col style=\"background-color: #108ee9\">-->\n              <!--<h3 style=\"color: white;margin-left: 20px;padding:5px\"><b>新入库文档</b></h3>-->\n              <!--</a-col>-->\n              <a-table\n                style=\"background-color: white\"\n                ref=\"docTable\"\n                size=\"middle\"\n                rowKey=\"id\"\n                :columns=\"columns\"\n                :dataSource=\"dataSource\"\n                :pagination=\"ipagination\"\n                :loading=\"loading\"\n                @change=\"handleTableChange\">\n\n            <span slot=\"docTitle\" slot-scope=\"text,record\">\n              <span @click=\"previewKmDoc(record)\"><a style=\"color: #303133\">{{ record.title}}</a></span>\n           </span>\n\n\n                // 添加自定义列表插槽\n                <div slot=\"filterDropdown\">\n                  <a-card style=\"width: 350px\">\n                    <a-checkbox-group @change=\"onColSettingsChange\" v-model=\"settingColumns\"\n                                      :defaultValue=\"settingColumns\">\n                      <a-row>\n                        <template v-for=\"(item,index) in defColumns\">\n                          <template v-if=\"item.key!='rowIndex'&& item.dataIndex!='action'\">\n                            <a-col :span=\"12\">\n                              <a-checkbox :value=\"item.dataIndex\">{{ item.title }}</a-checkbox>\n                            </a-col>\n                          </template>\n                        </template>\n                      </a-row>\n                    </a-checkbox-group>\n                  </a-card>\n                </div>\n                <a-icon slot=\"filterIcon\" type='setting' title=\"自定义列\"\n                        :style=\"{ fontSize:'16px',color:  '#108ee9',minWidth:'35px'}\"/>\n                <span slot=\"indexNum\" slot-scope=\"text, record,index\">\n                  <p>{{index+1+(ipagination.current-1)*ipagination.pageSize}}</p>\n               </span>\n\n                <span slot=\"action\" slot-scope=\"text, record\" style=\"width: 150px;\">\t\t\r\n\t\t\t\t\t<img src=\"../../../assets/gpt.png\" style=\"width: 25px;height: 25px;\"@click=\"showModal(record)\" />\r\n\t\t\t\t\t<a-divider type=\"vertical\"/>\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\n                   <a-icon v-if=\"record.downloadFlag==1\" type=\"download\" title=\"下载\" @click=\"downloadKmDoc(record)\"\n                           :style=\"{ fontSize: '16px', color: '#1890FF'}\"/>\n                   <a-icon v-else type=\"download\" title=\"禁止下载\"\n                           :style=\"{ fontSize: '16px', color: '#909399'}\"/>\n                   <a-divider type=\"vertical\"/>\n                   <a-icon v-if=\"record.favourite==0\" type=\"star\" title=\"收藏\" @click=\"addFavouriteKmDoc(record)\"\n                           :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n                   <a-icon v-else type=\"star\" theme=\"filled\" title=\"取消收藏\" @click=\"delFavouriteKmDoc(record)\"\n                           :style=\"{ fontSize: '18px', color: '#1890FF', }\"/>\n               </span>\n              </a-table>\n            </div>\n          </a-col>\n          <a-col :xl=\"7\" :lg=\"9\" :md=\"10\" :sm=\"24\" style=\"background-color: #f2f2f2;padding: 15px;min-width: 350px\">\n            <div style=\"background-color: white;padding: 0; box-shadow:1px 2px 3px 2px #ccc\">\n              <a-form layout=\"inline\" style=\"min-height: 10px\">\n                <a-row>\n                  <a-col style=\"background-color: #108ee9\">\n                    <h3 style=\"color: white;margin-left: 20px;padding:5px\">\n                      <b>科室</b>\n                    </h3>\n                  </a-col>\n                  <a-col v-for=\"(item,index) in defaultBusinessTypeList\" :xl=\"12\" :lg=\"12\" :md=\"12\" :sm=\"24\" :key=\"index\">\n                    <h4 style=\"text-align: left;margin-left: 20px\">\n                      <span @click=\"searchBusinessType(item.value)\"><a style=\"color: #303133\">{{item.text}}</a></span>\n                    </h4>\n                  </a-col>\n                </a-row>\n              </a-form>\n            </div>\n\n          </a-col>\n\n        </a-row>\n      </a-form>\n\r\n\r\n  <div>\n\n    <!-- 模态框 -->\n    <a-modal\n      :title=\"modalTitle\"\n      :visible=\"visible1\"\n      :footer=\"null\"\n      @cancel=\"handleCancel1\"\n      :maskClosable=\"false\"\n    >\n      <!-- 加载动画 -->\n      <a-spin v-if=\"loading1\" size=\"large\" />\n\n      <!-- 文章摘要内容 -->\n      <div v-else class=\"content\">\n        <p>{{ displayedText }}</p>\n      </div>\n    </a-modal>\n  </div>\r\n\r\n\n      <b-j-modal :title=\"title\"\n                 :width=\"width\"\n                 :visible=\"visible\"\n                 @cancel=\"handleCancel\"\n                 cancelText=\"关闭\"\n                 :okButtonProps=\"{ class:{'jee-hidden': true} }\">\n        <div>\n          <div>\n            <p-d-f-modal iframe-i-d=\"pdfIDde\" :p-d-furl=\"PDFurl\" :iframeWidth=\"width\"/>\n          </div>\n        </div>\n      </b-j-modal>\n\n      <a-layout-footer style=\"padding: 0\">\n        <global-footer/>\n      </a-layout-footer>\n\n    </div>\n  </div>\n\n    </a-layout-content>\n  </a-layout>\n</template>\n\n<script>\n  import {ajaxGetDictItems, getDictItemsFromCache} from '@/api/api'\n  import {ACCESS_TOKEN} from \"@/store/mutation-types\"\n  import {httpPostAction, getAction, downloadFileName, getActionPDF,getKeyword,abstractKmDoc} from \"../../../api/manage\";\n  import {JeecgListMixin} from '@/mixins/JeecgListMixin'\n  import Vue from \"vue\";\n  import IframePageContent from \"../../../components/layouts/IframeFReportView\";\n  import GlobalFooter from '@/components/page/GlobalFooter'\n  import ARow from \"ant-design-vue/es/grid/Row\";\n  import SearchHeader from '../Common/SearchHeader'\n\n  export default {\n    name: \"defaultDocSearch\",\n    mixins: [JeecgListMixin],\n    components: {ARow, IframePageContent,GlobalFooter,SearchHeader},\n    data() {\n      return {\n        boolCheckChange:true,\r\n\t\tsuggestions:[],\n        checkedArray:[],\n        topicCodesTree: {\n          checked: [],\n          halfChecked: [],\n        },\n        boolSelect:false,\n        treeData:[],\n        knowledgeTitle:\"知识专题\",\n        confirmLoading: false,\n        PDFurl: '',\n        visible: false,\n        pdfLoading: false,\n        pdfShow: true,\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n        title: \"预览\",\n        width: '900',\n        defaultBusinessTypeList: [],\n        hotTopicReportList: [],\n        docDataSource: [],\n        loadedRatio: 0,\n\n        topMenuStyle: {\n          headerIndexLeft: {},\n          topNavHeader: {},\n          headerIndexRight: {},\n          topSmenuStyle: {}\n        },\n        pageTitle: \"\",\n        //表头\n        columns: [],\n        //列设置\n        settingColumns: [],\n        //要filter的字段\n        filterDictCode: 'km_dict_source',\n        //  过滤字段数据\n        filterOptions: [],\n        //列定义\n        defColumns: [\n          {\n            title: '#',\n            dataIndex: '',\n            key: 'rowIndex',\n            width: 40,\n            align: \"center\",\n            scopedSlots: {customRender: 'indexNum'},\n          },\n          {\n            title: '标题',\n            align: \"left\",\n            dataIndex: 'title',\n            scopedSlots: {customRender: 'docTitle'},\n          },\n          {\n            title: '文档来源',\n            align: \"center\",\n            dataIndex: 'source_dictText',\n            width: 150,\n            filters: [],\n            // scopedSlots: {\n            //   filterDropdown: 'filterSource',\n            //   filterIcon: 'filterIcon'\n            // },\n          },\n          {\n            title: '发文时间',\n            align: \"center\",\n            sorter: true,\n            dataIndex: 'pubTimeTxt',\n            width: 95,\n          },\n          {\n            title: '操作',\n            dataIndex: 'action',\n            align: \"center\",\n            width: 120,\n            scopedSlots: {\n              filterDropdown: 'filterDropdown',\n              filterIcon: 'filterIcon',\n              customRender: 'action'\n            }\n          },\n\n\n        ],\n        //  分类数据\n        options: [],\n        // 输入框输入的内容\n        content: '',\n        // 多选组件使用的变量\n        checkboxVuale: [],\n        checkedValues: '',\n\n        itemList: [],\n        // 要加载多选的字典\n        dictCode: 'km_dict_category',\n        // 请求的url地址\n        url: {\n          rootList: \"/sys/category/loadTreeRoot\",\n          recentlyList: '/KM/kmDocVisitRecord/recentlyVisitDocs',\n          defaultBusinessTypeList: '/KM/HomePage/listBusinessType',\n          hotTopicReport: '/KM/HomePage/listRecommendTopic',\n          list: '/KM/kmDoc/listRecently',\n          previewKmDoc: '/KM/kmDoc/previewKmDoc',\n          downloadKmDoc: \"/KM/kmDoc/downloadKmDoc\",\n          addFavouriteKmDoc: '/KM/kmDocFavourite/add',\n          delFavouriteKmDoc: '/KM/kmDocFavourite/delete',\r\n\t\t  selectKeyword: '/KM/kmSearchRecord/selectKeyword',\r\n\t\t  abstractKmDoc: '/KM/kmDoc/abstractKmDoc',\n        },\r\n      visible1: false, // 控制模态框显示\n      buttonLoading: false, // 按钮加载状态\n      loading1: true, // 模态框加载状态\n      fullText: \"\", // 后端返回的完整文章摘要\n      displayedText: \"\", // 逐字显示的内容\n      typingSpeed: 50, // 打字速度（毫秒）\n      isGenerating: false, // 是否正在生成中\n      }\n    },\r\n  computed: {\n    // 动态模态框标题\n    modalTitle() {\n      return this.isGenerating ? \"文献摘要生成中...\" : \"文献摘要\";\n    },\n  },\n    created() {\n      this.loadTree();\n      //设置全局token\n      Vue.prototype.token = Vue.ls.get(ACCESS_TOKEN);\n      window._CONFIG['token'] = Vue.prototype.token;\n      this.hotTopicReportFun();\n      this.loadDefaultBusinessTypeFunc();\n      this.initDict();\n      this.initFilterDict();\n\n      // 调用初始化自定义table列表函数\n      this.initColumns();\n\n      this.changeTitle(\"普通检索\");\n\n    },\n    methods: {\r\n\t\t\r\n\t    // 显示模态框\r\n\t    showModal(record) {\r\n\t      this.visible1 = true;\r\n\t      this.buttonLoading = true;\r\n\t      this.isGenerating = true; // 显示“生成中”提示\r\n\t\t  this.abstractKmDoc(record)\r\n\t\r\n\t    },\r\n\t\r\n\t\tabstractKmDoc(record){\r\n\t\t\tlet params = {\r\n\t\t\t  docId: record.id,\r\n\t\t\t};\r\n\t\t\tabstractKmDoc(this.url.abstractKmDoc, params).then(res => {\r\n\t\t\t  if (res.success) {\r\n\t\t\t\tthis.fullText = res.result\r\n\t\t\t\tthis.buttonLoading = false;\r\n\t\t\t\tthis.loading1 = false;\r\n\t\t\t\tthis.isGenerating = false; // 关闭“生成中”提示\r\n\t\t\t\t\t\r\n\t\t\t\t// 开始逐字显示\r\n\t\t\t\tthis.typeText();\r\n\t\t\t\t\r\n\t\t\t  } else {\r\n\t\t\t    this.$message.warning(res.message)\r\n\t\t\t  }\r\n\t\t\t}).finally(() => {\r\n\t\t\t})\r\n\t\t\t\r\n\t\t},\r\n\t\r\n\t    // 模拟调用后端接口\r\n\r\n\t\r\n\t    // 逐字显示内容\r\n\t    typeText() {\r\n\t      let index = 0;\r\n\t      const timer = setInterval(() => {\r\n\t        if (index < this.fullText.length) {\r\n\t          this.displayedText += this.fullText.charAt(index);\r\n\t          index++;\r\n\t        } else {\r\n\t          clearInterval(timer); // 停止定时器\r\n\t        }\r\n\t      }, this.typingSpeed);\r\n\t    },\r\n\t\r\n\t    // 关闭模态框\r\n\t    handleCancel1() {\r\n\t      this.visible1 = false;\r\n\t      this.displayedText = \"\"; // 清空内容\r\n\t      this.loading1 = true; // 重置加载状态\r\n\t      this.isGenerating = false; // 关闭“生成中”提示\r\n\t    },\r\n\t\t\r\n\t\t\r\n\t\t    onInput() {\r\n\t\t\t  console.log(\"=============\")\r\n\t\t      if (this.content) {\r\n\t\t        this.fetchSuggestions(this.content);\r\n\t\t      } else {\r\n\t\t        this.suggestions = [];\r\n\t\t      }\r\n\t\t    },\r\n\t\tfetchSuggestions(keyword) {\r\n\t\t\t\r\n\t\t\tconsole.log(\"2222\")\r\n\t\t\t\r\n\t\t      // 调用后端API获取推荐术语\r\n\t\t\t\tgetKeyword(this.url.selectKeyword+'?'+'keyword='+keyword, keyword).then(res => {\n\t\t\t\t  if (res.success) {\n\t\t\t\t\tif (res.result && res.result.length > 0) {\r\n\t\t\t\t\t\tlet a = []\r\n\t\t\t\t\t\tfor (var index = 0; index < res.result.length; index++) {\r\n\t\t\t\t\t\t\ta.push(res.result[index].corword)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\n\t\t\t\t\t  this.suggestions = a\n\t\t\t\t\t} else {\n\t\t\t\t\t  this.suggestions = []\n\t\t\t\t\t}\n\t\t\t\t  } else {\n\t\t\t\t\tthis.$message.warning(res.message)\n\t\t\t\t  }\n\t\t\t\t}).finally(() => {\n\t\t\t\t})\r\n\t\t    },\r\n\t\t    selectSuggestion(suggestion) {\r\n\t\t      this.content = suggestion;\r\n\t\t      this.suggestions = [];\r\n\t\t      // 这里可以触发搜索操作\r\n\t\t    },\r\n\t\t\r\n\t\t\r\n\t\t\n      // 加载filter字段选项\n      initFilterDict() {\n        this.filterOptions = [];\n\n        //优先从缓存中读取字典配置\n        // if (getDictItemsFromCache(this.dictCode)) {\n        let options = getDictItemsFromCache(this.filterDictCode)\n        if(options){\n          options.forEach((item, index) => {\n            let filterOption = {};\n            filterOption.text = item.title;\n            filterOption.value = item.value;\n            this.filterOptions.push(filterOption);\n          });\n          console.log(this.filterOptions);\n          this.defColumns[2].filters =this.filterOptions;\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.filterDictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            console.log(options);\n            options.forEach((item, index) => {\n              let filterOption = {};\n              filterOption.text = item.title;\n              filterOption.value = item.value;\n              this.filterOptions.push(filterOption);\n            });\n            this.defColumns[2].filters =this.filterOptions;\n          }\n        })\n\n      },\n      // 是否全文检索\n      onCheckChange(e){\n        this.boolCheckChange=e.target.checked\n        console.log(`checked = ${e.target.checked}`);\n      },\n\n      // 查找一个节点的所有父节点\n      familyTree(treeData, id) {\n        var arrTree = [];\n        var forFn = function (arr, key) {\n          for (var i = 0; i < arr.length; i++) {\n            var item = arr[i]\n            if (item.key === key) {\n              if (item.parentId === \"0\") {\n                break;\n              } else {\n                console.log(\"父节点\", item.parentId);\n                arrTree.push(item.parentId);\n                forFn(treeData, item.parentId);\n              }\n              break\n            } else {\n              if (item.children != null) {\n                forFn(item.children, key);\n              }\n            }\n          }\n        }\n        forFn(treeData, id);\n        return arrTree\n      },\n\n      // 树节点选择触发\n      onCheck(checkedKeys, checkedNodes) {\n        if(checkedKeys.checked.length>1){\n         let checkKeys=checkedKeys.checked[1];\n          checkedKeys.checked=[];\n          checkedKeys.checked.push(checkKeys);\n          let checkNodesTitle= checkedNodes.checkedNodes[1];\n          checkedNodes.checkedNodes=[];\n          checkedNodes.checkedNodes.push(checkNodesTitle);\n        }\n        console.log(\"checkedKeys\",checkedKeys);\n        console.log(\"checkedNodes\",checkedNodes);\n        let temp = new Array();\n        let tempArray = new Array();\n        this.checkedArray = checkedKeys.checked;\n\n        for (let i = 0; i < this.checkedArray.length; i++) {\n          let arrTemp = this.familyTree(this.treeData, this.checkedArray[i]);\n          temp = temp.concat(arrTemp);\n        }\n        // 数组去重\n        tempArray = [...new Set(temp)];\n        console.log(\"tempArray\", tempArray);\n        checkedKeys.halfChecked = tempArray;\n        let checkedTitle = checkedNodes.checkedNodes;\n        this.knowledgeTitle = \"\";\n        for (let i = 0; i < checkedTitle.length; i++) {\n          if (this.knowledgeTitle === \"\") {\n            this.knowledgeTitle = checkedTitle[i].data.props.title;\n          } else {\n            if (checkedTitle[i].data.props.title != null) {\n              this.knowledgeTitle = this.knowledgeTitle + \",\" + checkedTitle[i].data.props.title;\n            }\n          }\n        }\n        if(this.knowledgeTitle ===\"\"){\n          this.knowledgeTitle=\"知识专题\"\n        }\n        let topicCodes=checkedTitle[0].data.props.code;\n        this.knowledgeTitleFun(topicCodes,this.topicCodesTree,this.knowledgeTitle);\n      },\n\n      // 加载树节点，获取树数据\n      loadTree() {\n        let params = {\n          async: false,\n          pcode: \"\"\n        };\n        getAction(this.url.rootList, params).then(res => {\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              this.treeData = res.result\n            } else {\n              this.treeData = []\n            }\n          } else {\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n        })\n      },\n\n      // 更改页面标题\n      changeTitle(title) {\n        let projectTitle = \"Java知识库\"\n        // 特殊处理\n        document.title = title + ' · ' + projectTitle\n\n      },\n\n      // 自定义列表  列设置更改事件\n      onColSettingsChange(checkedValues) {\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        Vue.ls.set(key, checkedValues, 30 * 7 * 24 * 60 * 60 * 1000)\n        this.settingColumns = checkedValues;\n        const cols = this.defColumns.filter(item => {\n          if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n            return true\n          }\n          if (this.settingColumns.includes(item.dataIndex)) {\n            return true\n          }\n          return false\n        })\n        this.columns = cols;\n      },\n      // 自定义列表  初始化\n      initColumns() {\n        //权限过滤（列权限控制时打开，修改第二个参数为授权码前缀）\n        //this.defColumns = colAuthFilter(this.defColumns,'testdemo:');\n\n        var key = this.$route.name + \":colsettings\";\n        console.log(\"colsettings\", key);\n        let colSettings = Vue.ls.get(key);\n        if (colSettings == null || colSettings == undefined) {\n          let allSettingColumns = [];\n          this.defColumns.forEach(function (item, i, array) {\n            allSettingColumns.push(item.dataIndex);\n          })\n          this.settingColumns = allSettingColumns;\n          this.columns = this.defColumns;\n        } else {\n          this.settingColumns = colSettings;\n          const cols = this.defColumns.filter(item => {\n            if (item.key == 'rowIndex' || item.dataIndex == 'action') {\n              return true;\n            }\n            if (colSettings.includes(item.dataIndex)) {\n              return true;\n            }\n            return false;\n          })\n          this.columns = cols;\n        }\n      },\n\n      // 加载 分类数据\n      initDict() {\n        this.options = [];\n\n        //优先从缓存中读取字典配置\n        if (getDictItemsFromCache(this.dictCode)) {\n          let options = getDictItemsFromCache(this.dictCode)\n          options.forEach((item, index) => {\n            let person = {};\n            person.label = item.title;\n            person.value = item.value;\n            this.options.push(person);\n          });\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n            let options = res.result\n            options.forEach((item, index) => {\n              let person = {};\n              person.label = item.title;\n              person.value = item.value;\n              this.options.push(person);\n            });\n          }\n        })\n\n      },\n\n      // 多选框选择触发\n      onChange(checkedValues) {\n        this.checkedValues = checkedValues.toString();\n        this.checkboxVuale = checkedValues;\n        console.log('checked = ', checkedValues);\n      },\n      // 按回车键触发方法\n      pressEnterFun(e) {\n        this.$nextTick(() => {\n          this.searchDocFun();\n        })\n      },\n\n      //专题检索\n      knowledgeTitleFun(topicCodes,topicCodesTree,knowledgeTitle){\n        let params={};\n        params[\"topicCodes\"]=topicCodes;\n        params[\"topicCodesTree\"]=topicCodesTree;\n        params[\"knowledgeTitle\"]=knowledgeTitle;\n        // this.$router.push({name: 'RecommendTopicList',params:params});\n        this.$router.push({name: 'docSearch',params:params});\n      },\n\n      // 检索\n      searchDocFun() {\n        let params = {};\n        if (this.content !== \"\" && this.content != null) {\n          params['content'] = this.content;\n        }\n        if (this.checkedValues !== \"\" && this.checkedValues != null) {\n          params['category'] = this.checkedValues;\n        }\n        // 判断参数是否为空\n        if (this.empty(params)) {\n          params['column']=\"_score\";\n          params['order']=\"desc\";\n          params['boolCheckChange']=this.boolCheckChange;\n          if (params['content'] != null) {\n            params['content'] = params['content'].replace(/，/g, ',');\n          }\n          this.$router.push({name: 'docSearch', params: params});\n        } else {\n          this.$message.info(\"请输入搜索条件\");\n        }\n      },\n\n\n      loadDefaultBusinessTypeFunc(){\n        getAction(this.url.defaultBusinessTypeList).then(res => {\n          if (res.success) {\n            this.defaultBusinessTypeList = res.result;\n          } else {\n            this.$message.error(\"业务加载失败\");\n          }\n        })\n      },\n      // 热门专题\n      hotTopicReportFun() {\n        getAction(this.url.hotTopicReport).then(res => {\n          if (res.success) {\n            this.hotTopicReportList = res.result;\n          } else {\n            //this.$message.error(\"热门专题加载失败\");\n          }\n        })\n      },\n\n      //  判断对象是否为空\n      empty(obj) {\n        for (let key in obj) {\n          return true;\n        }\n        return false;\n      },\n\n      //批量下载\n      downloadKmDocBatch() {\n        console.log(\"批量下载\")\n        if (!this.url.downloadKmDoc) {\n          this.$message.error(\"请设置url.downloadKmDoc属性!\")\n          return\n        }\n        if (this.selectionRows.length <= 0) {\n          this.$message.warning('请选择一条记录！');\n          return;\n        } else {\n          var that = this;\n          this.$confirm({\n            title: \"确认下载\",\n            content: \"是否下载选中数据?\",\n            onOk: function () {\n              for (var i = 0; i < that.selectionRows.length; i++) {\n                let fileName = i;\n                downloadFileName(that.url.downloadKmDoc, {docId: that.selectionRows[i].id})\n              }\n              // that.loadData();\n              that.onClearSelected();\n            }\n          });\n        }\n      },\n\n      //访问业务类型\n      searchBusinessType(value){\n        let params = {};\n        params['businessTypes'] = value;\n        this.$router.push({name: 'docSearch', params: params});\n      },\n\n      // 显示预览窗口，初始化\n      previewKmDoc(record) {\n        //this.PDFurl = window._CONFIG['domianURL'] + this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.PDFurl =  this.url.previewKmDoc + \"?docId=\" + record.id;\n        this.title ='预览 - ' + record.title;\n        this.visible = true;\n        this.pdfLoading = true;\n        this.pdfShow = true;\n      },\n      //关闭预览窗口\n      handleCancel() {\n        this.visible = false;\n      },\n\n      //下载文件\n      downloadKmDoc(record) {\n        this.$notification.success({\n          message: '文件开始下载...',\n          duration: 1,\n        });\n        downloadFileName(this.url.downloadKmDoc, {docId: record.id})\n      },\n      //加收藏夹\n      addFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.addFavouriteKmDoc;\n        method = 'post';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"收藏成功!\");\n            // this.loadData();\n            record.favourite = 1;\n          } else {\n            this.$message.warning(\"收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n      //取消收藏夹\n      delFavouriteKmDoc(record) {\n        let httpurl = '';\n        let method = '';\n        httpurl += this.url.delFavouriteKmDoc;\n        method = 'delete';\n        httpPostAction(httpurl, {docId: record.id}, method).then((res) => {\n          if (res.success) {\n            this.$message.success(\"取消收藏成功!\");\n            // this.loadData();\n            record.favourite = 0;\n          } else {\n            this.$message.warning(\"取消收藏失败!\");\n          }\n        }).finally(() => {\n        })\n      },\n\n\n\n    }\n  }\n</script>\n\n<style>\n  @import \"~@assets/less/common.less\";\r\n  \r\n  \r\n  .suggestions-list {\r\n/*    position: absolute;\r\n    top: 100%;\r\n    left: 0;\r\n    right: 0;\r\n    margin-top: 5px;\r\n    padding: 0;\r\n    list-style: none; */\r\n\tposition: fixed;\r\n\twidth: 600px;\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    z-index: 1000;\r\n\tlist-style: none;\r\n  }\r\n  \r\n  .suggestion-item {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n    color: #333;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease, transform 0.2s ease;\r\n\ttext-align: left;\r\n\tpadding: 10px 15px; /* 调整内边距，左侧留出更多空间 */\r\n  }\r\n  \r\n  .suggestion-item:hover {\r\n    background-color: #f8f9fa;\r\n    transform: translateX(5px);\r\n  }\r\n  \r\n  .suggestion-item:active {\r\n    background-color: #e9ecef;\n\t}\r\n\t\r\n\t\r\n\t\r\n\t/* 按钮动画 */\r\n\t.ant-btn-primary {\r\n\t  transition: all 0.3s ease;\r\n\t}\r\n\t\r\n\t.ant-btn-primary:hover {\r\n\t  transform: scale(1.05);\r\n\t  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\t}\r\n\t\r\n\t/* 模态框内容样式 */\r\n\t.content {\r\n\t  font-size: 16px;\r\n\t  line-height: 1.6;\r\n\t  color: #333;\r\n\t  padding: 20px;\r\n\t  background: #f9f9f9;\r\n\t  border-radius: 8px;\r\n\t  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\t\r\n\t/* 打字机效果 */\r\n\t@keyframes blink {\r\n\t  0%,\r\n\t  100% {\r\n\t    opacity: 1;\r\n\t  }\r\n\t  50% {\r\n\t    opacity: 0;\r\n\t  }\r\n\t}\r\n\t\r\n\t.content p::after {\r\n\t  content: \"|\";\r\n\t  animation: blink 1s infinite;\r\n\t  color: #1890ff;\r\n\t}\r\n\t\r\n\t/* 生成中提示动画 */\r\n\t@keyframes generating {\r\n\t  0% {\r\n\t    opacity: 0.5;\r\n\t  }\r\n\t  50% {\r\n\t    opacity: 1;\r\n\t  }\r\n\t  100% {\r\n\t    opacity: 0.5;\r\n\t  }\r\n\t}\r\n\t\r\n\t.generating-text {\r\n\t  animation: generating 1.5s infinite;\r\n\t  color: #1890ff;\r\n\t  font-weight: bold;\r\n\t}\n</style>\n\n"],"mappings":"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","ignoreList":[]}]}