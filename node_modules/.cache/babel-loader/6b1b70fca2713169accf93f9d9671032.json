{"remainingRequest":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\jeecg\\JSuperQuery.vue?vue&type=script&lang=js","dependencies":[{"path":"F:\\workspace\\3月\\知识库系统\\admin\\src\\components\\jeecg\\JSuperQuery.vue","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\babel.config.js","mtime":1704718217000},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1709701140363},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1709701155248},{"path":"F:\\workspace\\3月\\知识库系统\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1709701116791}],"contextDependencies":[],"result":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport moment from 'moment';\nimport * as utils from '@/utils/util';\nimport { mixinDevice } from '@/utils/mixin';\nimport JDate from '@/components/jeecg/JDate.vue';\nimport JSelectDepart from '@/components/jeecgbiz/JSelectDepart';\nimport JSelectMultiUser from '@/components/jeecgbiz/JSelectMultiUser';\nimport JMultiSelectTag from '@/components/dict/JMultiSelectTag';\nimport JAreaLinkage from '@comp/jeecg/JAreaLinkage';\nexport default {\n  name: 'JSuperQuery',\n  mixins: [mixinDevice],\n  components: {\n    JAreaLinkage: JAreaLinkage,\n    JMultiSelectTag: JMultiSelectTag,\n    JDate: JDate,\n    JSelectDepart: JSelectDepart,\n    JSelectMultiUser: JSelectMultiUser\n  },\n  props: {\n    /*\n     fieldList: [{\n        value:'',\n        text:'',\n        type:'',\n        dictCode:'' // 只要 dictCode 有值，无论 type 是什么，都显示为字典下拉框\n     }]\n     type:date datetime int number string\n    * */\n    fieldList: {\n      type: Array,\n      required: true\n    },\n    /*\n    * 这个回调函数接收一个数组参数 即查询条件\n    * */\n    callback: {\n      type: String,\n      required: false,\n      default: 'handleSuperQuery'\n    },\n    // 当前是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 保存查询条件的唯一 code，通过该 code 区分\n    // 默认为 null，代表以当前路由全路径为区分Code\n    saveCode: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    var h = this.$createElement;\n    return {\n      moment: moment,\n      fieldTreeData: [],\n      prompt: {\n        visible: false,\n        value: ''\n      },\n      visible: false,\n      queryParamsModel: [],\n      treeIcon: h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"file-text\"\n        }\n      }),\n      // 保存查询条件的treeData\n      saveTreeData: [],\n      // 保存查询条件的前缀名\n      saveCodeBefore: 'JSuperQuerySaved_',\n      // 查询类型，过滤条件匹配（and、or）\n      matchType: 'and',\n      superQueryFlag: false\n    };\n  },\n  computed: {\n    izMobile: function izMobile() {\n      return this.device === 'mobile';\n    },\n    tooltipProps: function tooltipProps() {\n      return this.izMobile ? {\n        visible: false\n      } : {};\n    },\n    fullSaveCode: function fullSaveCode() {\n      var saveCode = this.saveCode;\n      if (saveCode == null || saveCode === '') {\n        saveCode = this.$route.fullPath;\n      }\n      return this.saveCodeBefore + saveCode;\n    }\n  },\n  watch: {\n    // 当 saveCode 变化时，重新查询已保存的条件\n    fullSaveCode: {\n      immediate: true,\n      handler: function handler() {\n        var _this = this;\n        var list = this.$ls.get(this.fullSaveCode);\n        if (list instanceof Array) {\n          this.saveTreeData = list.map(function (i) {\n            return _this.renderSaveTreeData(i);\n          });\n        }\n      }\n    },\n    fieldList: {\n      deep: true,\n      immediate: true,\n      handler: function handler(val) {\n        var mainData = [],\n          subData = [];\n        val.forEach(function (item) {\n          var data = _objectSpread({}, item);\n          data.label = data.label || data.text;\n          var hasChildren = data.children instanceof Array;\n          data.disabled = hasChildren;\n          data.selectable = !hasChildren;\n          if (hasChildren) {\n            data.children = data.children.map(function (item2) {\n              var child = _objectSpread({}, item2);\n              child.label = child.label || child.text;\n              child.label = data.label + '-' + child.label;\n              child.value = data.value + ',' + child.value;\n              child.val = '';\n              return child;\n            });\n            data.val = '';\n            subData.push(data);\n          } else {\n            mainData.push(data);\n          }\n        });\n        this.fieldTreeData = mainData.concat(subData);\n      }\n    }\n  },\n  methods: {\n    show: function show() {\n      if (!this.queryParamsModel || this.queryParamsModel.length === 0) {\n        this.resetLine();\n      }\n      this.visible = true;\n    },\n    getDictInfo: function getDictInfo(item) {\n      var str = '';\n      if (!item.dictTable) {\n        str = item.dictCode;\n      } else {\n        str = item.dictTable + ',' + item.dictText + ',' + item.dictCode;\n      }\n      console.log('高级查询字典信息', str);\n      return str;\n    },\n    handleOk: function handleOk() {\n      if (!this.isNullArray(this.queryParamsModel)) {\n        var event = {\n          matchType: this.matchType,\n          params: this.removeEmptyObject(this.queryParamsModel)\n        };\n        // 移动端模式下关闭弹窗\n        if (this.izMobile) {\n          this.visible = false;\n        }\n        this.emitCallback(event);\n      } else {\n        this.$message.warn(\"不能查询空条件\");\n      }\n    },\n    emitCallback: function emitCallback() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _event$params = event.params,\n        params = _event$params === void 0 ? [] : _event$params,\n        _event$matchType = event.matchType,\n        matchType = _event$matchType === void 0 ? this.matchType : _event$matchType;\n      this.superQueryFlag = params && params.length > 0;\n      var _iterator = _createForOfIteratorHelper(params),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var param = _step.value;\n          if (Array.isArray(param.val)) {\n            param.val = param.val.join(',');\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      console.debug('---高级查询参数--->', {\n        params: params,\n        matchType: matchType\n      });\n      this.$emit(this.callback, params, matchType);\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n    close: function close() {\n      this.$emit('close');\n      this.visible = false;\n    },\n    handleAdd: function handleAdd() {\n      this.addNewLine();\n    },\n    addNewLine: function addNewLine() {\n      this.queryParamsModel.push({\n        rule: 'eq'\n      });\n    },\n    resetLine: function resetLine() {\n      this.superQueryFlag = false;\n      this.queryParamsModel = [];\n      this.addNewLine();\n    },\n    handleDel: function handleDel(index) {\n      this.queryParamsModel.splice(index, 1);\n    },\n    handleSelected: function handleSelected(node, item) {\n      var _node$dataRef = node.dataRef,\n        type = _node$dataRef.type,\n        options = _node$dataRef.options,\n        dictCode = _node$dataRef.dictCode,\n        dictTable = _node$dataRef.dictTable,\n        dictText = _node$dataRef.dictText,\n        customReturnField = _node$dataRef.customReturnField,\n        popup = _node$dataRef.popup;\n      item['type'] = type;\n      item['options'] = options;\n      item['dictCode'] = dictCode;\n      item['dictTable'] = dictTable;\n      item['dictText'] = dictText;\n      item['customReturnField'] = customReturnField;\n      if (popup) {\n        item['popup'] = popup;\n      }\n      this.$set(item, 'val', undefined);\n    },\n    handleOpen: function handleOpen() {\n      this.show();\n    },\n    handleReset: function handleReset() {\n      this.resetLine();\n      this.emitCallback();\n    },\n    handleSave: function handleSave() {\n      var queryParams = this.removeEmptyObject(this.queryParamsModel);\n      if (this.isNullArray(queryParams)) {\n        this.$message.warning('空条件不能保存');\n      } else {\n        this.prompt.value = '';\n        this.prompt.visible = true;\n      }\n    },\n    handlePromptOk: function handlePromptOk() {\n      var _this2 = this;\n      var value = this.prompt.value;\n      if (!value) {\n        this.$message.warning('保存名称不能为空');\n        return;\n      }\n      // 取出查询条件\n      var records = this.removeEmptyObject(this.queryParamsModel);\n      // 判断有没有重名的\n      var filterList = this.saveTreeData.filter(function (i) {\n        return i.originTitle === value;\n      });\n      if (filterList.length > 0) {\n        this.$confirm({\n          content: \"\".concat(value, \" \\u5DF2\\u5B58\\u5728\\uFF0C\\u662F\\u5426\\u8986\\u76D6\\uFF1F\"),\n          onOk: function onOk() {\n            _this2.prompt.visible = false;\n            filterList[0].records = records;\n            _this2.saveToLocalStore();\n            _this2.$message.success('保存成功');\n          }\n        });\n      } else {\n        // 没有重名的，直接添加\n        this.prompt.visible = false;\n        // 添加到树列表中\n        this.saveTreeData.push(this.renderSaveTreeData({\n          title: value,\n          matchType: this.matchType,\n          records: records\n        }));\n        // 保存到 LocalStore\n        this.saveToLocalStore();\n        this.$message.success('保存成功');\n      }\n    },\n    handleTreeSelect: function handleTreeSelect(idx, event) {\n      if (event.selectedNodes[0]) {\n        var _event$selectedNodes$ = event.selectedNodes[0].data.props,\n          matchType = _event$selectedNodes$.matchType,\n          records = _event$selectedNodes$.records;\n        // 将保存的matchType取出，兼容旧数据，如果没有保存就还是使用原来的\n        this.matchType = matchType || this.matchType;\n        this.queryParamsModel = utils.cloneObject(records);\n      }\n    },\n    handleRemoveSaveTreeItem: function handleRemoveSaveTreeItem(event, vNode) {\n      var _this3 = this;\n      // 阻止事件冒泡\n      event.stopPropagation();\n      this.$confirm({\n        content: '是否删除当前查询？',\n        onOk: function onOk() {\n          var eventKey = vNode.eventKey;\n          _this3.saveTreeData.splice(Number.parseInt(eventKey.substring(2)), 1);\n          _this3.saveToLocalStore();\n        }\n      });\n    },\n    // 将查询保存到 LocalStore 里\n    saveToLocalStore: function saveToLocalStore() {\n      var saveValue = this.saveTreeData.map(function (_ref) {\n        var originTitle = _ref.originTitle,\n          matchType = _ref.matchType,\n          records = _ref.records;\n        return {\n          title: originTitle,\n          matchType: matchType,\n          records: records\n        };\n      });\n      this.$ls.set(this.fullSaveCode, saveValue);\n    },\n    isNullArray: function isNullArray(array) {\n      //判断是不是空数组对象\n      if (!array || array.length === 0) {\n        return true;\n      }\n      if (array.length === 1) {\n        var obj = array[0];\n        if (!obj.field || obj.val == null || obj.val === '' || !obj.rule) {\n          return true;\n        }\n      }\n      return false;\n    },\n    // 去掉数组中的空对象\n    removeEmptyObject: function removeEmptyObject(arr) {\n      var array = utils.cloneObject(arr);\n      for (var i = 0; i < array.length; i++) {\n        var item = array[i];\n        if (item == null || Object.keys(item).length <= 0) {\n          array.splice(i--, 1);\n        } else {\n          if (Array.isArray(item.options)) {\n            // 如果有字典属性，就不需要保存 options 了\n            //update-begin-author:taoyan date:20200819 for:【开源问题】 高级查询 下拉框作为并且选项很多多多 LOWCOD-779\n            delete item.options;\n            //update-end-author:taoyan date:20200819 for:【开源问题】 高级查询 下拉框作为并且选项很多多多 LOWCOD-779\n          }\n        }\n      }\n      return array;\n    },\n    /** 渲染保存查询条件的 title（加个删除按钮） */renderSaveTreeData: function renderSaveTreeData(item) {\n      var _this4 = this;\n      var h = this.$createElement;\n      item.icon = this.treeIcon;\n      item.originTitle = item['title'];\n      item.title = function (arg1, arg2) {\n        var vNode;\n        // 兼容旧版的Antdv\n        if (arg1.dataRef) {\n          vNode = arg1;\n        } else if (arg2.dataRef) {\n          vNode = arg2;\n        } else {\n          return h(\"span\", {\n            \"style\": \"color:red;\"\n          }, [\"Antdv\\u7248\\u672C\\u4E0D\\u652F\\u6301\"]);\n        }\n        var originTitle = vNode.dataRef.originTitle;\n        return h(\"div\", {\n          \"class\": \"j-history-tree-title\"\n        }, [h(\"span\", [originTitle]), h(\"div\", {\n          \"class\": \"j-history-tree-title-closer\",\n          \"on\": {\n            \"click\": function click(e) {\n              return _this4.handleRemoveSaveTreeItem(e, vNode);\n            }\n          }\n        }, [h(\"a-icon\", {\n          \"attrs\": {\n            \"type\": \"close-circle\"\n          }\n        })])]);\n      };\n      return item;\n    },\n    /** 判断是否允许多选 */allowMultiple: function allowMultiple(item) {\n      return item.rule === 'in';\n    },\n    handleRuleChange: function handleRuleChange(item, newValue) {\n      var oldValue = item.rule;\n      this.$set(item, 'rule', newValue);\n      // 上一个规则是否是 in，且type是字典或下拉\n      if (oldValue === 'in') {\n        if (item.dictCode || item.options instanceof Array) {\n          var value = item.val;\n          if (typeof item.val === 'string') {\n            value = item.val.split(',')[0];\n          } else if (Array.isArray(item.val)) {\n            value = item.val[0];\n          }\n          this.$set(item, 'val', value);\n        }\n      }\n    },\n    handleChangeJPopup: function handleChangeJPopup(item, e, values) {\n      item.val = values[item.popup['destFields']];\n    }\n  }\n};",{"version":3,"names":["moment","utils","mixinDevice","JDate","JSelectDepart","JSelectMultiUser","JMultiSelectTag","JAreaLinkage","name","mixins","components","props","fieldList","type","Array","required","callback","String","default","loading","Boolean","saveCode","data","h","$createElement","fieldTreeData","prompt","visible","value","queryParamsModel","treeIcon","saveTreeData","saveCodeBefore","matchType","superQueryFlag","computed","izMobile","device","tooltipProps","fullSaveCode","$route","fullPath","watch","immediate","handler","_this","list","$ls","get","map","i","renderSaveTreeData","deep","val","mainData","subData","forEach","item","_objectSpread","label","text","hasChildren","children","disabled","selectable","item2","child","push","concat","methods","show","length","resetLine","getDictInfo","str","dictTable","dictCode","dictText","console","log","handleOk","isNullArray","event","params","removeEmptyObject","emitCallback","$message","warn","arguments","undefined","_event$params","_event$matchType","_iterator","_createForOfIteratorHelper","_step","s","n","done","param","isArray","join","err","e","f","debug","$emit","handleCancel","close","handleAdd","addNewLine","rule","handleDel","index","splice","handleSelected","node","_node$dataRef","dataRef","options","customReturnField","popup","$set","handleOpen","handleReset","handleSave","queryParams","warning","handlePromptOk","_this2","records","filterList","filter","originTitle","$confirm","content","onOk","saveToLocalStore","success","title","handleTreeSelect","idx","selectedNodes","_event$selectedNodes$","cloneObject","handleRemoveSaveTreeItem","vNode","_this3","stopPropagation","eventKey","Number","parseInt","substring","saveValue","_ref","set","array","obj","field","arr","Object","keys","_this4","icon","arg1","arg2","click","allowMultiple","handleRuleChange","newValue","oldValue","split","handleChangeJPopup","values"],"sources":["src/components/jeecg/JSuperQuery.vue"],"sourcesContent":["<template>\n<div class=\"j-super-query-box\">\n\n  <slot name=\"button\" :isActive=\"superQueryFlag\" :isMobile=\"izMobile\" :open=\"handleOpen\" :reset=\"handleReset\">\n    <a-tooltip v-if=\"superQueryFlag\" v-bind=\"tooltipProps\" :mouseLeaveDelay=\"0.2\">\n      <!-- begin 不知道为什么不加上这段代码就无法生效 -->\n      <span v-show=\"false\">{{tooltipProps}}</span>\n      <!-- end 不知道为什么不加上这段代码就无法生效 -->\n      <template slot=\"title\">\n        <span>已有高级查询条件生效</span>\n        <a-divider type=\"vertical\"/>\n        <a @click=\"handleReset\">清空</a>\n      </template>\n      <a-button-group>\n        <a-button @click=\"handleOpen\">\n          <a-icon type=\"appstore\" theme=\"twoTone\" spin/>\n          <span>高级查询</span>\n        </a-button>\n        <a-button v-if=\"izMobile\"  icon=\"delete\" @click=\"handleReset\"/>\n      </a-button-group>\n    </a-tooltip>\n    <a-button v-else  icon=\"filter\" @click=\"handleOpen\">高级查询</a-button>\n  </slot>\n\n  <j-modal\n    title=\"高级查询构造器\"\n    :width=\"1000\"\n    :visible=\"visible\"\n    @cancel=\"handleCancel\"\n    :mask=\"false\"\n    :fullscreen=\"izMobile\"\n    class=\"j-super-query-modal\"\n    style=\"top:5%;max-height: 95%;\"\n  >\n\n    <template slot=\"footer\">\n      <div style=\"float: left\">\n        <a-button :loading=\"loading\" @click=\"handleReset\">重置</a-button>\n        <a-button :loading=\"loading\" @click=\"handleSave\">保存查询条件</a-button>\n      </div>\n      <a-button :loading=\"loading\" @click=\"handleCancel\">关闭</a-button>\n      <a-button :loading=\"loading\" type=\"primary\" @click=\"handleOk\">查询</a-button>\n    </template>\n\n    <a-spin :spinning=\"loading\">\n      <a-row>\n        <a-col :sm=\"24\" :md=\"24-5\">\n\n          <a-empty v-if=\"queryParamsModel.length === 0\" style=\"margin-bottom: 12px;\">\n            <div slot=\"description\">\n              <span>没有任何查询条件</span>\n              <a-divider type=\"vertical\"/>\n              <a @click=\"handleAdd\">点击新增</a>\n            </div>\n          </a-empty>\n\n          <a-form v-else layout=\"inline\">\n\n            <a-row style=\"margin-bottom: 12px;\">\n              <a-col :md=\"12\" :xs=\"24\">\n                <a-form-item label=\"过滤条件匹配\" :labelCol=\"{md: 6,xs:24}\" :wrapperCol=\"{md: 18,xs:24}\" style=\"width: 100%;\">\n                  <a-select v-model=\"matchType\" :getPopupContainer=\"node=>node.parentNode\" style=\"width: 100%;\">\n                    <a-select-option value=\"and\">AND（所有条件都要求匹配）</a-select-option>\n                    <a-select-option value=\"or\">OR（条件中的任意一个匹配）</a-select-option>\n                  </a-select>\n                </a-form-item>\n              </a-col>\n            </a-row>\n\n            <a-row type=\"flex\" style=\"margin-bottom:10px\" :gutter=\"16\" v-for=\"(item, index) in queryParamsModel\" :key=\"index\">\n\n              <a-col :md=\"8\" :xs=\"24\" style=\"margin-bottom: 12px;\">\n                <a-tree-select\n                  showSearch\n                  v-model=\"item.field\"\n                  :treeData=\"fieldTreeData\"\n                  :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\n                  placeholder=\"选择查询字段\"\n                  allowClear\n                  treeDefaultExpandAll\n                  :getPopupContainer=\"node=>node.parentNode\"\n                  style=\"width: 100%\"\n                  @select=\"(val,option)=>handleSelected(option,item)\"\n                >\n                </a-tree-select>\n              </a-col>\n\n              <a-col :md=\"4\" :xs=\"24\" style=\"margin-bottom: 12px;\">\n                <a-select placeholder=\"匹配规则\" :value=\"item.rule\" :getPopupContainer=\"node=>node.parentNode\" @change=\"handleRuleChange(item,$event)\">\n                  <a-select-option value=\"eq\">等于</a-select-option>\n                  <a-select-option value=\"like\">包含</a-select-option>\n                  <a-select-option value=\"right_like\">以..开始</a-select-option>\n                  <a-select-option value=\"left_like\">以..结尾</a-select-option>\n                  <a-select-option value=\"in\">在...中</a-select-option>\n                  <a-select-option value=\"ne\">不等于</a-select-option>\n                  <a-select-option value=\"gt\">大于</a-select-option>\n                  <a-select-option value=\"ge\">大于等于</a-select-option>\n                  <a-select-option value=\"lt\">小于</a-select-option>\n                  <a-select-option value=\"le\">小于等于</a-select-option>\n                </a-select>\n              </a-col>\n\n              <a-col :md=\"8\" :xs=\"24\" style=\"margin-bottom: 12px;\">\n                <!-- 下拉搜索 -->\n                <j-search-select-tag v-if=\"item.type==='sel_search'\" v-model=\"item.val\" :dict=\"getDictInfo(item)\" placeholder=\"请选择\"/>\n                <!-- 下拉多选 -->\n                <template v-else-if=\"item.type==='list_multi'\">\n                  <j-multi-select-tag v-if=\"item.options\" v-model=\"item.val\" :options=\"item.options\" placeholder=\"请选择\"/>\n                  <j-multi-select-tag v-else v-model=\"item.val\" :dictCode=\"getDictInfo(item)\" placeholder=\"请选择\"/>\n                </template>\n\n                <template v-else-if=\"item.dictCode\">\n                  <template v-if=\"item.type === 'table-dict'\">\n                    <j-popup\n                      v-model=\"item.val\"\n                      :code=\"item.dictTable\"\n                      :field=\"item.dictCode\"\n                      :orgFields=\"item.dictCode\"\n                      :destFields=\"item.dictCode\"\n                      :multi=\"true\"\n                    ></j-popup>\n                  </template>\n                  <template v-else>\n                    <j-multi-select-tag v-show=\"allowMultiple(item)\" v-model=\"item.val\" :dictCode=\"item.dictCode\" placeholder=\"请选择\"/>\n                    <j-dict-select-tag v-show=\"!allowMultiple(item)\" v-model=\"item.val\" :dictCode=\"item.dictCode\" placeholder=\"请选择\"/>\n                  </template>\n                </template>\n                <j-popup\n                  v-else-if=\"item.type === 'popup'\"\n                  :value=\"item.val\"\n                  v-bind=\"item.popup\"\n                  group-id=\"superQuery\"\n                  @input=\"(e,v)=>handleChangeJPopup(item,e,v)\"\n                  :multi=\"true\"/>\n                <j-select-multi-user\n                  v-else-if=\"item.type === 'select-user' || item.type === 'sel_user'\"\n                  v-model=\"item.val\"\n                  :buttons=\"false\"\n                  :multiple=\"false\"\n                  placeholder=\"请选择用户\"\n                  :returnKeys=\"['id', item.customReturnField || 'username']\"\n                />\n                <j-select-depart\n                  v-else-if=\"item.type === 'select-depart' || item.type === 'sel_depart'\"\n                  v-model=\"item.val\"\n                  :multi=\"false\"\n                  placeholder=\"请选择部门\"\n                  :customReturnField=\"item.customReturnField || 'id'\"\n                />\n                <a-select\n                  v-else-if=\"item.options instanceof Array\"\n                  v-model=\"item.val\"\n                  :options=\"item.options\"\n                  allowClear\n                  placeholder=\"请选择\"\n                  :mode=\"allowMultiple(item)?'multiple':''\"\n                />\n                <j-area-linkage v-model=\"item.val\" v-else-if=\"item.type==='area-linkage' || item.type==='pca'\" style=\"width: 100%\"/>\n                <j-date v-else-if=\" item.type=='date' \" v-model=\"item.val\" placeholder=\"请选择日期\" style=\"width: 100%\"></j-date>\n                <j-date v-else-if=\" item.type=='datetime' \" v-model=\"item.val\" placeholder=\"请选择时间\" :show-time=\"true\" date-format=\"YYYY-MM-DD HH:mm:ss\" style=\"width: 100%\"></j-date>\n                <a-time-picker v-else-if=\"item.type==='time'\" :value=\"item.val ? moment(item.val,'HH:mm:ss') : null\" format=\"HH:mm:ss\" style=\"width: 100%\" @change=\"(time,value)=>item.val=value\"/>\n                <a-input-number v-else-if=\" item.type=='int'||item.type=='number' \" style=\"width: 100%\" placeholder=\"请输入数值\" v-model=\"item.val\"/>\n                <a-select v-else-if=\"item.type=='switch'\" placeholder=\"请选择\" v-model=\"item.val\">\n                  <a-select-option value=\"Y\">是</a-select-option>\n                  <a-select-option value=\"N\">否</a-select-option>\n                </a-select>\n                <a-input v-else v-model=\"item.val\" placeholder=\"请输入值\"/>\n              </a-col>\n\n              <a-col :md=\"4\" :xs=\"0\" style=\"margin-bottom: 12px;\">\n                <a-button @click=\"handleAdd\" icon=\"plus\"></a-button>&nbsp;\n                <a-button @click=\"handleDel( index )\" icon=\"minus\"></a-button>\n              </a-col>\n\n              <a-col :md=\"0\" :xs=\"24\" style=\"margin-bottom: 12px;text-align: right;\">\n                <a-button @click=\"handleAdd\" icon=\"plus\"></a-button>&nbsp;\n                <a-button @click=\"handleDel( index )\" icon=\"minus\"></a-button>\n              </a-col>\n\n            </a-row>\n\n          </a-form>\n        </a-col>\n        <a-col :sm=\"24\" :md=\"5\">\n          <!-- 查询记录 -->\n\n          <a-card class=\"j-super-query-history-card\" :bordered=\"true\">\n            <div slot=\"title\">\n              保存的查询\n            </div>\n\n            <a-empty v-if=\"saveTreeData.length === 0\" class=\"j-super-query-history-empty\" description=\"没有保存任何查询\"/>\n            <a-tree\n              v-else\n              class=\"j-super-query-history-tree\"\n              showIcon\n              :treeData=\"saveTreeData\"\n              :selectedKeys=\"[]\"\n              @select=\"handleTreeSelect\"\n            >\n            </a-tree>\n          </a-card>\n\n\n        </a-col>\n      </a-row>\n\n\n    </a-spin>\n\n    <a-modal title=\"请输入保存的名称\" :visible=\"prompt.visible\" @cancel=\"prompt.visible=false\" @ok=\"handlePromptOk\">\n      <a-input v-model=\"prompt.value\"></a-input>\n    </a-modal>\n\n  </j-modal>\n</div>\n</template>\n\n<script>\n  import moment from 'moment'\n  import * as utils from '@/utils/util'\n  import { mixinDevice } from '@/utils/mixin'\n  import JDate from '@/components/jeecg/JDate.vue'\n  import JSelectDepart from '@/components/jeecgbiz/JSelectDepart'\n  import JSelectMultiUser from '@/components/jeecgbiz/JSelectMultiUser'\n  import JMultiSelectTag from '@/components/dict/JMultiSelectTag'\n  import JAreaLinkage from '@comp/jeecg/JAreaLinkage'\n\n  export default {\n    name: 'JSuperQuery',\n    mixins: [mixinDevice],\n    components: { JAreaLinkage, JMultiSelectTag, JDate, JSelectDepart, JSelectMultiUser },\n    props: {\n      /*\n       fieldList: [{\n          value:'',\n          text:'',\n          type:'',\n          dictCode:'' // 只要 dictCode 有值，无论 type 是什么，都显示为字典下拉框\n       }]\n       type:date datetime int number string\n      * */\n      fieldList: {\n        type: Array,\n        required: true\n      },\n      /*\n      * 这个回调函数接收一个数组参数 即查询条件\n      * */\n      callback: {\n        type: String,\n        required: false,\n        default: 'handleSuperQuery'\n      },\n\n      // 当前是否在加载中\n      loading: {\n        type: Boolean,\n        default: false\n      },\n\n      // 保存查询条件的唯一 code，通过该 code 区分\n      // 默认为 null，代表以当前路由全路径为区分Code\n      saveCode: {\n        type: String,\n        default: null\n      }\n\n    },\n    data() {\n      return {\n        moment,\n        fieldTreeData: [],\n\n        prompt: {\n          visible: false,\n          value: ''\n        },\n\n        visible: false,\n        queryParamsModel: [],\n        treeIcon: <a-icon type=\"file-text\"/>,\n        // 保存查询条件的treeData\n        saveTreeData: [],\n        // 保存查询条件的前缀名\n        saveCodeBefore: 'JSuperQuerySaved_',\n        // 查询类型，过滤条件匹配（and、or）\n        matchType: 'and',\n        superQueryFlag: false,\n      }\n    },\n    computed: {\n      izMobile() {\n        return this.device === 'mobile'\n      },\n      tooltipProps() {\n        return this.izMobile ? { visible: false } : {}\n      },\n      fullSaveCode() {\n        let saveCode = this.saveCode\n        if (saveCode == null || saveCode === '') {\n          saveCode = this.$route.fullPath\n        }\n        return this.saveCodeBefore + saveCode\n      },\n    },\n    watch: {\n      // 当 saveCode 变化时，重新查询已保存的条件\n      fullSaveCode: {\n        immediate: true,\n        handler() {\n          let list = this.$ls.get(this.fullSaveCode)\n          if (list instanceof Array) {\n            this.saveTreeData = list.map(i => this.renderSaveTreeData(i))\n          }\n        }\n      },\n      fieldList: {\n        deep: true,\n        immediate: true,\n        handler(val) {\n          let mainData = [], subData = []\n          val.forEach(item => {\n            let data = { ...item }\n            data.label = data.label || data.text\n            let hasChildren = (data.children instanceof Array)\n            data.disabled = hasChildren\n            data.selectable = !hasChildren\n            if (hasChildren) {\n              data.children = data.children.map(item2 => {\n                let child = { ...item2 }\n                child.label = child.label || child.text\n                child.label = data.label + '-' + child.label\n                child.value = data.value + ',' + child.value\n                child.val = ''\n                return child\n              })\n              data.val = ''\n              subData.push(data)\n            } else {\n              mainData.push(data)\n            }\n          })\n          this.fieldTreeData = mainData.concat(subData)\n        }\n      }\n    },\n\n    methods: {\n      show() {\n        if (!this.queryParamsModel || this.queryParamsModel.length === 0) {\n          this.resetLine()\n        }\n        this.visible = true\n      },\n\n      getDictInfo(item) {\n        let str = ''\n        if(!item.dictTable){\n          str = item.dictCode\n        }else{\n          str = item.dictTable+','+item.dictText+','+item.dictCode\n        }\n        console.log('高级查询字典信息',str)\n        return str\n      },\n      handleOk() {\n        if (!this.isNullArray(this.queryParamsModel)) {\n          let event = {\n            matchType: this.matchType,\n            params: this.removeEmptyObject(this.queryParamsModel)\n          }\n          // 移动端模式下关闭弹窗\n          if (this.izMobile) {\n            this.visible = false\n          }\n          this.emitCallback(event)\n        } else {\n          this.$message.warn(\"不能查询空条件\")\n        }\n      },\n      emitCallback(event = {}) {\n        let { params = [], matchType = this.matchType } = event\n        this.superQueryFlag = (params && params.length > 0)\n        for (let param of params) {\n          if (Array.isArray(param.val)) {\n            param.val = param.val.join(',')\n          }\n        }\n        console.debug('---高级查询参数--->', { params, matchType })\n        this.$emit(this.callback, params, matchType)\n      },\n      handleCancel() {\n        this.close()\n      },\n      close() {\n        this.$emit('close')\n        this.visible = false\n      },\n      handleAdd() {\n        this.addNewLine()\n      },\n      addNewLine() {\n        this.queryParamsModel.push({ rule: 'eq' })\n      },\n      resetLine() {\n        this.superQueryFlag = false\n        this.queryParamsModel = []\n        this.addNewLine()\n      },\n      handleDel(index) {\n        this.queryParamsModel.splice(index, 1)\n      },\n      handleSelected(node, item) {\n        let { type, options, dictCode, dictTable, dictText, customReturnField, popup } = node.dataRef\n        item['type'] = type\n        item['options'] = options\n        item['dictCode'] = dictCode\n        item['dictTable'] = dictTable\n        item['dictText'] = dictText\n        item['customReturnField'] = customReturnField\n        if (popup) {\n          item['popup'] = popup\n        }\n        this.$set(item, 'val', undefined)\n      },\n      handleOpen() {\n        this.show()\n      },\n      handleReset() {\n        this.resetLine()\n        this.emitCallback()\n      },\n      handleSave() {\n        let queryParams = this.removeEmptyObject(this.queryParamsModel)\n        if (this.isNullArray(queryParams)) {\n          this.$message.warning('空条件不能保存')\n        } else {\n          this.prompt.value = ''\n          this.prompt.visible = true\n        }\n      },\n      handlePromptOk() {\n        let { value } = this.prompt\n        if(!value){\n          this.$message.warning('保存名称不能为空')\n          return\n        }\n        // 取出查询条件\n        let records = this.removeEmptyObject(this.queryParamsModel)\n        // 判断有没有重名的\n        let filterList = this.saveTreeData.filter(i => i.originTitle === value)\n        if (filterList.length > 0) {\n          this.$confirm({\n            content: `${value} 已存在，是否覆盖？`,\n            onOk: () => {\n              this.prompt.visible = false\n              filterList[0].records = records\n              this.saveToLocalStore()\n              this.$message.success('保存成功')\n            }\n          })\n        } else {\n          // 没有重名的，直接添加\n          this.prompt.visible = false\n          // 添加到树列表中\n          this.saveTreeData.push(this.renderSaveTreeData({\n            title: value,\n            matchType: this.matchType,\n            records: records\n          }))\n          // 保存到 LocalStore\n          this.saveToLocalStore()\n          this.$message.success('保存成功')\n        }\n      },\n      handleTreeSelect(idx, event) {\n        if (event.selectedNodes[0]) {\n          let { matchType, records } = event.selectedNodes[0].data.props\n          // 将保存的matchType取出，兼容旧数据，如果没有保存就还是使用原来的\n          this.matchType = matchType || this.matchType\n          this.queryParamsModel = utils.cloneObject(records)\n        }\n      },\n      handleRemoveSaveTreeItem(event, vNode) {\n        // 阻止事件冒泡\n        event.stopPropagation()\n\n        this.$confirm({\n          content: '是否删除当前查询？',\n          onOk: () => {\n            let { eventKey } = vNode\n            this.saveTreeData.splice(Number.parseInt(eventKey.substring(2)), 1)\n            this.saveToLocalStore()\n          },\n        })\n      },\n\n      // 将查询保存到 LocalStore 里\n      saveToLocalStore() {\n        let saveValue = this.saveTreeData.map(({ originTitle, matchType, records }) => ({ title: originTitle, matchType, records }))\n        this.$ls.set(this.fullSaveCode, saveValue)\n      },\n\n      isNullArray(array) {\n        //判断是不是空数组对象\n        if (!array || array.length === 0) {\n          return true\n        }\n        if (array.length === 1) {\n          let obj = array[0]\n          if (!obj.field || (obj.val == null || obj.val === '') || !obj.rule) {\n            return true\n          }\n        }\n        return false\n      },\n      // 去掉数组中的空对象\n      removeEmptyObject(arr) {\n        let array = utils.cloneObject(arr)\n        for (let i = 0; i < array.length; i++) {\n          let item = array[i]\n          if (item == null || Object.keys(item).length <= 0) {\n            array.splice(i--, 1)\n          } else {\n            if (Array.isArray(item.options)) {\n              // 如果有字典属性，就不需要保存 options 了\n              //update-begin-author:taoyan date:20200819 for:【开源问题】 高级查询 下拉框作为并且选项很多多多 LOWCOD-779\n              delete item.options\n              //update-end-author:taoyan date:20200819 for:【开源问题】 高级查询 下拉框作为并且选项很多多多 LOWCOD-779\n            }\n          }\n        }\n        return array\n      },\n\n      /** 渲染保存查询条件的 title（加个删除按钮） */\n      renderSaveTreeData(item) {\n        item.icon = this.treeIcon\n        item.originTitle = item['title']\n        item.title = (arg1, arg2) => {\n          let vNode\n          // 兼容旧版的Antdv\n          if (arg1.dataRef) {\n            vNode = arg1\n          } else if (arg2.dataRef) {\n            vNode = arg2\n          } else {\n            return <span style=\"color:red;\">Antdv版本不支持</span>\n          }\n          let {originTitle} = vNode.dataRef\n          return (\n            <div class=\"j-history-tree-title\">\n              <span>{originTitle}</span>\n\n              <div class=\"j-history-tree-title-closer\" onClick={e => this.handleRemoveSaveTreeItem(e, vNode)}>\n                <a-icon type=\"close-circle\"/>\n              </div>\n            </div>\n          )\n        }\n        return item\n      },\n\n      /** 判断是否允许多选 */\n      allowMultiple(item) {\n        return item.rule === 'in'\n      },\n\n      handleRuleChange(item, newValue) {\n        let oldValue = item.rule\n        this.$set(item, 'rule', newValue)\n        // 上一个规则是否是 in，且type是字典或下拉\n        if (oldValue === 'in') {\n          if (item.dictCode || item.options instanceof Array) {\n            let value = item.val\n            if (typeof item.val === 'string') {\n              value = item.val.split(',')[0]\n            } else if (Array.isArray(item.val)) {\n              value = item.val[0]\n            }\n            this.$set(item, 'val', value)\n          }\n        }\n      },\n\n      handleChangeJPopup(item, e, values) {\n        item.val = values[item.popup['destFields']]\n      },\n\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n  .j-super-query-box {\n    display: inline-block;\n  }\n\n  .j-super-query-modal {\n\n    .j-super-query-history-card {\n      /deep/ .ant-card-body,\n      /deep/ .ant-card-head-title {\n        padding: 0;\n      }\n\n      /deep/ .ant-card-head {\n        padding: 4px 8px;\n        min-height: initial;\n      }\n    }\n\n    .j-super-query-history-empty {\n      /deep/ .ant-empty-image {\n        height: 80px;\n        line-height: 80px;\n        margin-bottom: 0;\n      }\n\n      /deep/ img {\n        width: 80px;\n        height: 65px;\n      }\n\n      /deep/ .ant-empty-description {\n        color: #afafaf;\n        margin: 8px 0;\n      }\n    }\n\n    .j-super-query-history-tree {\n\n      .j-history-tree-title {\n        width: calc(100% - 24px);\n        position: relative;\n        display: inline-block;\n\n        &-closer {\n          color: #999999;\n          position: absolute;\n          top: 0;\n          right: 0;\n          width: 24px;\n          height: 24px;\n          text-align: center;\n          opacity: 0;\n          transition: opacity 0.3s, color 0.3s;\n\n          &:hover {\n            color: #666666;\n          }\n\n          &:active {\n            color: #333333;\n          }\n        }\n\n        &:hover {\n          .j-history-tree-title-closer {\n            opacity: 1;\n          }\n        }\n\n      }\n\n      /deep/ .ant-tree-switcher {\n        display: none;\n      }\n\n      /deep/ .ant-tree-node-content-wrapper {\n        width: 100%;\n      }\n    }\n\n  }\n\n</style>"],"mappings":"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","ignoreList":[]}]}