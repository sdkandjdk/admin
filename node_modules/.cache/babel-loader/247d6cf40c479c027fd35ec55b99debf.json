{"remainingRequest":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js!D:\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\知识库系统\\admin\\src\\components\\jeecg\\JVxeTable\\components\\cells\\ReloadEffect.js","dependencies":[{"path":"D:\\知识库系统\\admin\\src\\components\\jeecg\\JVxeTable\\components\\cells\\ReloadEffect.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\babel.config.js","mtime":1704718216000},{"path":"D:\\知识库系统\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\知识库系统\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\知识库系统\\admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import '../../less/reload-effect.less';\nimport { randomString } from '@/utils/util';\n\n// 修改数据特效\nexport default {\n  props: {\n    vNode: null,\n    // 是否启用特效\n    effect: Boolean\n  },\n  data: function data() {\n    return {\n      // vNode: null,\n      innerEffect: false,\n      // 应付同时多个特效\n      effectIdx: 0,\n      effectList: []\n    };\n  },\n  watch: {\n    vNode: {\n      deep: true,\n      immediate: true,\n      handler: function handler(vNode, old) {\n        this.innerEffect = this.effect;\n        if (this.innerEffect && old != null) {\n          var topLayer = this.renderSpan(old, 'top');\n          this.effectList.push(topLayer);\n        }\n      }\n    }\n  },\n  methods: {\n    // 条件渲染内容 span\n    renderVNode: function renderVNode() {\n      var _this = this;\n      if (this.vNode == null) {\n        return null;\n      }\n      var bottom = this.renderSpan(this.vNode, 'bottom');\n      // 启用了特效，并且有旧数据，就渲染特效顶层\n      if (this.innerEffect && this.effectList.length > 0) {\n        this.$emit('effect-begin');\n        // 1.4s 以后关闭特效\n        window.setTimeout(function () {\n          var item = _this.effectList[_this.effectIdx];\n          if (item && item.elm) {\n            // 特效结束后，展示先把 display 设为 none，而不是直接删掉该元素，\n            // 目的是为了防止页面重新渲染，导致动画重置\n            item.elm.style.display = 'none';\n          }\n          // 当所有的层级动画都结束时，再删掉所有元素\n          if (++_this.effectIdx === _this.effectList.length) {\n            _this.innerEffect = false;\n            _this.effectIdx = 0;\n            _this.effectList = [];\n            _this.$emit('effect-end');\n          }\n        }, 1400);\n        return [this.effectList, bottom];\n      } else {\n        return bottom;\n      }\n    },\n    // 渲染内容 span\n    renderSpan: function renderSpan(vNode, layer) {\n      var options = {\n        key: layer + this.effectIdx + randomString(6),\n        class: ['j-vxe-reload-effect-span', \"layer-\".concat(layer)],\n        style: {}\n      };\n      if (layer === 'top') {\n        // 最新渲染的在下面\n        options.style['z-index'] = 9999 - this.effectIdx;\n      }\n      return this.$createElement('span', options, [vNode]);\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      class: ['j-vxe-reload-effect-box']\n    }, [this.renderVNode()]);\n  }\n};",{"version":3,"names":["randomString","props","vNode","effect","Boolean","data","innerEffect","effectIdx","effectList","watch","deep","immediate","handler","old","topLayer","renderSpan","push","methods","renderVNode","_this","bottom","length","$emit","window","setTimeout","item","elm","style","display","layer","options","key","class","concat","$createElement","render","h"],"sources":["D:/知识库系统/admin/src/components/jeecg/JVxeTable/components/cells/ReloadEffect.js"],"sourcesContent":["import '../../less/reload-effect.less'\nimport { randomString } from '@/utils/util'\n\n// 修改数据特效\nexport default {\n  props: {\n    vNode: null,\n    // 是否启用特效\n    effect: Boolean,\n  },\n  data() {\n    return {\n      // vNode: null,\n      innerEffect: false,\n      // 应付同时多个特效\n      effectIdx: 0,\n      effectList: [],\n    }\n  },\n  watch: {\n    vNode: {\n      deep: true,\n      immediate: true,\n      handler(vNode, old) {\n        this.innerEffect = this.effect\n        if (this.innerEffect && old != null) {\n          let topLayer = this.renderSpan(old, 'top')\n          this.effectList.push(topLayer)\n        }\n      },\n    },\n  },\n  methods: {\n\n    // 条件渲染内容 span\n    renderVNode() {\n      if (this.vNode == null) {\n        return null\n      }\n      let bottom = this.renderSpan(this.vNode, 'bottom')\n      // 启用了特效，并且有旧数据，就渲染特效顶层\n      if (this.innerEffect && this.effectList.length > 0) {\n        this.$emit('effect-begin')\n        // 1.4s 以后关闭特效\n        window.setTimeout(() => {\n          let item = this.effectList[this.effectIdx]\n          if (item && item.elm) {\n            // 特效结束后，展示先把 display 设为 none，而不是直接删掉该元素，\n            // 目的是为了防止页面重新渲染，导致动画重置\n            item.elm.style.display = 'none'\n          }\n          // 当所有的层级动画都结束时，再删掉所有元素\n          if (++this.effectIdx === this.effectList.length) {\n            this.innerEffect = false\n            this.effectIdx = 0\n            this.effectList = []\n            this.$emit('effect-end')\n          }\n        }, 1400)\n        return [this.effectList, bottom]\n      } else {\n        return bottom\n      }\n    },\n    // 渲染内容 span\n    renderSpan(vNode, layer) {\n      let options = {\n        key: layer + this.effectIdx + randomString(6),\n        class: ['j-vxe-reload-effect-span', `layer-${layer}`],\n        style: {},\n      }\n      if (layer === 'top') {\n        // 最新渲染的在下面\n        options.style['z-index'] = (9999 - this.effectIdx)\n      }\n      return this.$createElement('span', options, [vNode])\n    },\n  },\n  render(h) {\n    return h('div', {\n      class: ['j-vxe-reload-effect-box'],\n    }, [this.renderVNode()])\n  },\n}"],"mappings":"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","ignoreList":[]}]}